<?xml version="1.0" standalone="no"?><?xml-stylesheet type="text/css" href="https://www.processon.com/themes/default/mind/icons/icons.css" ?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xlink="http://www.w3.org/1999/xlink" id="mind-svg-con" width="1640.4000244140625px" height="3141.7000732421875px" style="position: absolute; left: 0px; top: 0px; width: 1640.4px; height: 3141.7px; background: rgb(255, 255, 255); z-index: 999;"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="1640.4000244140625" height="3141.7000732421875" fill="#ffffff"></rect></g><g transform="translate(-9917, -8370)" id="sdjakdjak9"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_8ec1bd3b1027abd0" d="M 10000 9941 C 10000 9941 10010 8427 10133 8427" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_026f5180c03eea29" d="M 10000 9941 C 10000 9941 10010 8523 10133 8523" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_a1c22e320d37cdf4" d="M 10000 9941 C 10000 9941 10010 8635 10133 8635" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_c9c9c2bf69612f7a" d="M 10000 9941 C 10000 9941 10010 8731 10133 8731" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_3ab8869902354e05" d="M 10000 9941 C 10000 9941 10010 8879 10133 8879" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_4d7afc4f8bf0b6af" d="M 10000 9941 C 10000 9941 10010 9778 10133 9778" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_1ef5d4acecc0b367" d="M 10000 9941 C 10000 9941 10010 10647 10133 10647" stroke="#666" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_2c74cae778e26824" d="M 10000 9941 C 10000 9941 10010 11109 10133 11109" stroke="#666" fill="none" stroke-width="2"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="2c74cae778e26824"><rect x="216" y="2719" rx="5px" ry="5px" width="98" height="38" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="2745.9500732421875"><tspan>spring事务</tspan></tspan></text></g></g><g id="48e3240a376d6332"><rect x="341.0875244140625" y="2379.25" rx="1px" ry="1px" width="83" height="22" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="350.0875244140625" y="2395.1375244140627"><tspan>什么是事务</tspan></tspan></text></g></g><g id="dec0f50be52e192b"><rect x="452.0875244140625" y="2366" rx="1px" ry="1px" width="494" height="50" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="461.0875244140625" y="2380.8"><tspan>mysql中的事务是指一组sql语句的集合， 集合中有多条sql语句</tspan></tspan><tspan x="461.0875244140625" y="2398.8"><tspan>可能是insert ， update ，select ，delete， 我们希望这些多个sql语句都能成功，</tspan></tspan><tspan x="461.0875244140625" y="2416.8"><tspan>或者都失败， 这些sql语句的执行是一致的，作为一个整体执行。</tspan></tspan></text></g></g><g id="42e03e1eb8decb99"><rect x="341.0875244140625" y="2454.6875" rx="1px" ry="1px" width="226" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="350.0875244140625" y="2470.5750244140627"><tspan>多种数据库访问技术处理事务的不足</tspan></tspan></text></g></g><g id="4d4b2a8d20e50aed"><rect x="595.0875244140625" y="2423.5999755859375" rx="1px" ry="1px" width="601" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.0875244140625" y="2439.4875"><tspan>1.不同的数据库访问技术，处理事务的对象，方法不同，需要了解不同数据库访问技术使用事务的原理</tspan></tspan></text></g></g><g id="a7575e56ddd456b8"><rect x="595.0875244140625" y="2454.6875" rx="1px" ry="1px" width="536" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.0875244140625" y="2470.5750244140627"><tspan>2.开发人员需要掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回滚事务</tspan></tspan></text></g></g><g id="36f78fc0686c387d"><rect x="595.0875244140625" y="2485.7750244140625" rx="1px" ry="1px" width="146" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.0875244140625" y="2501.662548828125"><tspan>3.处理事务有多种方法</tspan></tspan></text></g></g><g id="2a124726561bb45a"><rect x="341.0875244140625" y="2802.3499755859375" rx="1px" ry="1px" width="122" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="350.0875244140625" y="2818.2375"><tspan>spring声明式事务</tspan></tspan></text></g></g><g id="38c50d85fe6184bc"><rect x="491.16253662109375" y="2516.862548828125" rx="1px" ry="1px" width="594" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="500.16253662109375" y="2532.7500732421877"><tspan>提供了一种处理事务的统一模型， 能使用统一步骤，方式完成多种不同数据库访问技术的事务处理。</tspan></tspan></text></g></g><g id="55762f66870f6933"><rect x="491.16253662109375" y="2615.7750244140625" rx="1px" ry="1px" width="109" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="500.16253662109375" y="2631.662548828125"><tspan>统一处理步骤：</tspan></tspan></text></g></g><g id="fddf2cad9226411b"><rect x="628.1625366210938" y="2547.9500732421875" rx="1px" ry="1px" width="918" height="34" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="637.1625366210938" y="2562.7500732421877"><tspan>1.使用的事务管理器对象，代替你完成commit，rollback。指定要使用的事务管理器实现类&lt;bean id=“xxx" class="...DataSourceTransactionManager"&gt;</tspan></tspan></text></g></g><g id="20faee9db3eb4386"><rect x="628.1625366210938" y="2590.3499755859375" rx="1px" ry="1px" width="276" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="637.1625366210938" y="2606.2375"><tspan>2.指定哪些类，哪些方法需要加入事务的功能</tspan></tspan></text></g></g><g id="41bfeaa1138c7d35"><rect x="628.1625366210938" y="2652.5250244140625" rx="1px" ry="1px" width="172" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="637.1625366210938" y="2668.412548828125"><tspan>3.指定方法需要的事务类型</tspan></tspan></text></g></g><g id="e10007375e196c6f"><rect x="827.925048828125" y="2621.4375" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="836.925048828125" y="2637.3250244140627"><tspan>1.事务的隔离级别</tspan></tspan></text></g></g><g id="96abb930a265f79c"><rect x="827.925048828125" y="2652.5250244140625" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="836.925048828125" y="2668.412548828125"><tspan>2.事务的超时时间</tspan></tspan></text></g></g><g id="e35b945b90b2d3af"><rect x="827.925048828125" y="2683.612548828125" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="836.925048828125" y="2699.5000732421877"><tspan>3.事务的传播行为</tspan></tspan></text></g></g><g id="ebb9e0d914805d6e"><rect x="491.16253662109375" y="2901.2750244140625" rx="1px" ry="1px" width="135" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="500.16253662109375" y="2917.162548828125"><tspan>具体的事务处理方式</tspan></tspan></text></g></g><g id="262e987514007dee"><rect x="654.1625366210938" y="2766.987548828125" rx="1px" ry="1px" width="226" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="663.1625366210938" y="2782.8750732421877"><tspan>适合中小型项目的方案（注解方案）</tspan></tspan></text></g></g><g id="a80b34466f35ee34"><rect x="908.1624755859375" y="2714.7000732421875" rx="1px" ry="1px" width="141" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="917.1624755859375" y="2730.5874755859377"><tspan>1.添加依赖 spring-tx</tspan></tspan></text></g></g><g id="9d8ec04fa3186e5d"><rect x="908.1624755859375" y="2745.7874755859375" rx="1px" ry="1px" width="615" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="917.1624755859375" y="2761.675"><tspan>2.声明事务管理器对象 &lt;bean id="transactionManager" class="DataSourceTransactionManager"&gt;</tspan></tspan></text></g></g><g id="2ad238971ed6bd5b"><rect x="908.1624755859375" y="2776.875" rx="1px" ry="1px" width="582" height="34" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="917.1624755859375" y="2791.675"><tspan>3.开启事务注解驱动 ：&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;</tspan></tspan><tspan x="917.1624755859375" y="2809.675"><tspan>（告诉spring框架，我要使用注解的方式管理事务）</tspan></tspan></text></g></g><g id="506ab81b6d131f4a"><rect x="908.1624755859375" y="2819.2750244140625" rx="1px" ry="1px" width="229" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="917.1624755859375" y="2835.162548828125"><tspan>4.在方法的上面加入@Transactional</tspan></tspan></text></g></g><g id="40dca5d23cf0843b"><rect x="654.1625366210938" y="2969.0999755859375" rx="1px" ry="1px" width="314" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="663.1625366210938" y="2984.9875"><tspan>适合大型项目的方案（都是在xml配置文件中实现）</tspan></tspan></text></g></g><g id="40c1e96a3b6f266c"><rect x="995.4000244140625" y="2850.362548828125" rx="1px" ry="1px" width="175" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1004.4000244140625" y="2866.2500732421877"><tspan>1.添加依赖 spring-aspects</tspan></tspan></text></g></g><g id="e9a86565264a8d64"><rect x="995.4000244140625" y="2881.4500732421875" rx="1px" ry="1px" width="615" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1004.4000244140625" y="2897.3374755859377"><tspan>2.声明事务管理器对象 &lt;bean id="transactionManager" class="DataSourceTransactionManager"&gt;</tspan></tspan></text></g></g><g id="efd5767ed91276b8"><rect x="995.4000244140625" y="2912.5374755859375" rx="1px" ry="1px" width="497" height="95" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1004.4000244140625" y="2927.3374755859377"><tspan>3.声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</tspan></tspan><tspan x="1004.4000244140625" y="2945.3374755859377"><tspan>&lt;tx:advice id="myAdvice" transaction-manager="transactionManager"&gt;</tspan></tspan><tspan x="1004.4000244140625" y="2963.3374755859377"><tspan>     &lt;tx:attributes&gt;</tspan></tspan><tspan x="1004.4000244140625" y="2981.3374755859377"><tspan>         &lt;tx:method name=""/&gt;</tspan></tspan><tspan x="1004.4000244140625" y="2999.3374755859377"><tspan>      &lt;/tx:attributes&gt;</tspan></tspan><tspan x="1004.4000244140625" y="3017.3374755859377"><tspan>&lt;/tx:advice&gt;</tspan></tspan></text></g></g><g id="0ef8103d94751c3b"><rect x="995.4000244140625" y="3015.737548828125" rx="1px" ry="1px" width="494" height="95" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1004.4000244140625" y="3030.537548828125"><tspan>4.配置aop：指定哪些类要创建代理。</tspan></tspan><tspan x="1004.4000244140625" y="3048.537548828125"><tspan>&lt;aop:config&gt;</tspan></tspan><tspan x="1004.4000244140625" y="3066.537548828125"><tspan>     &lt;aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/&gt;</tspan></tspan><tspan x="1004.4000244140625" y="3084.537548828125"><tspan>     &lt;!--关联advice和pointcut--&gt;</tspan></tspan><tspan x="1004.4000244140625" y="3102.537548828125"><tspan>     &lt;aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/&gt;</tspan></tspan><tspan x="1004.4000244140625" y="3120.537548828125"><tspan>&lt;/aop:config&gt;</tspan></tspan></text></g></g><g id="1ef5d4acecc0b367"><rect x="216" y="2257.362548828125" rx="5px" ry="5px" width="154" height="38" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="2284.3125"><tspan>spring整合mybatis</tspan></tspan></text></g></g><g id="9f57caa21a2d9650"><rect x="397.47503662109375" y="2213" rx="1px" ry="1px" width="592" height="34" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="406.47503662109375" y="2227.8"><tspan>整合的思路：使用spring的ioc核心技术，把mybatis框架中使用的对象交给spring统一创建和管理。</tspan></tspan><tspan x="406.47503662109375" y="2245.8"><tspan>spring是容器，存放项目中要使用的各种对象，例如Service对象，Dao对象，工具类对象等等</tspan></tspan></text></g></g><g id="40ebc84ddd27e3f0"><rect x="397.47503662109375" y="2286.487548828125" rx="1px" ry="1px" width="171" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="406.47503662109375" y="2302.3750732421877"><tspan>交给spring的mybatis对象</tspan></tspan></text></g></g><g id="a79b6dc1c2e23f3e"><rect x="596.4249877929688" y="2255.4000244140625" rx="1px" ry="1px" width="291" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="605.4249877929688" y="2271.287548828125"><tspan>1.数据源DataSource，使用阿里的Druid连接池</tspan></tspan></text></g></g><g id="0495e4201d2eb1d0"><rect x="596.4249877929688" y="2286.487548828125" rx="1px" ry="1px" width="550" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="605.4249877929688" y="2302.3750732421877"><tspan>2.SqlSessionFactory对象，使用的SqlSessionFactoryBean在内部创建的SqlSessionFactory</tspan></tspan></text></g></g><g id="de38e82f6a1cc4d2"><rect x="596.4249877929688" y="2317.5750732421875" rx="1px" ry="1px" width="674" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="605.4249877929688" y="2333.4624755859377"><tspan>3.Dao代理对象，使用的MapperScannerConfigurer，在这个类的内部，调用getMapper()，创建接口的Dao对象</tspan></tspan></text></g></g><g id="4d7afc4f8bf0b6af"><rect x="216" y="1388.375" rx="5px" ry="5px" width="82" height="39" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="1415.3249969482422"><tspan>核心技术</tspan></tspan></text></g></g><g id="b3d6a7756bc1be04"><rect x="326" y="945.5249938964844" rx="1px" ry="1px" width="106" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="335" y="961.4124877929687"><tspan>IOC：控制反转</tspan></tspan></text></g></g><g id="4d7c6bdab07d6779"><rect x="460.11248779296875" y="629" rx="1px" ry="1px" width="536" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="644.8874633789062"><tspan>1.理论，思想，概念：指导开发人员在容器中，代码之外管理对象，给属性赋值，管理依赖</tspan></tspan></text></g></g><g id="8589ebf2ee6d38b6"><rect x="460.11248779296875" y="660.0874633789062" rx="1px" ry="1px" width="776" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="675.9749877929687"><tspan>2.ioc技术实现使用的是DI（依赖注入）：开发人员在项目中只需要提供对象的名称，对象的创建，查找，赋值都由容器内部资源实现</tspan></tspan></text></g></g><g id="fecc0159b5347896"><rect x="460.11248779296875" y="691.1749877929688" rx="1px" ry="1px" width="304" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="707.0625122070312"><tspan>3.Spring使用的DI的技术，底层使用的是反射机制</tspan></tspan></text></g></g><g id="512495028e6dea0a"><rect x="460.11248779296875" y="815.5249938964844" rx="1px" ry="1px" width="107" height="22" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="831.4124877929687"><tspan>4.DI给属性赋值</tspan></tspan></text></g></g><g id="1847a5bcd84b037e"><rect x="595.6000366210938" y="737.7999877929688" rx="1px" ry="1px" width="314" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.6000366210938" y="753.6874816894531"><tspan>1.set注入：Spring调用类的set方法实现属性的注入</tspan></tspan></text></g></g><g id="5d899c562c823b27"><rect x="937.3875732421875" y="722.2624816894531" rx="1px" ry="1px" width="384" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="946.3875732421875" y="738.1500061035156"><tspan>1.简单类型set注入&lt;property name="属性名" value="属性值"</tspan></tspan></text></g></g><g id="a494139329599d64"><rect x="937.3875732421875" y="753.3500061035156" rx="1px" ry="1px" width="400" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="946.3875732421875" y="769.2375"><tspan>2.引用类型set注入&lt;property name="属性名" ref="bean的id"/&gt;</tspan></tspan></text></g></g><g id="ea96b2ba508dfe40"><rect x="595.6000366210938" y="799.9750061035156" rx="1px" ry="1px" width="226" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.6000366210938" y="815.8625"><tspan>2.构造注入：Spring调用有参构造器</tspan></tspan></text></g></g><g id="8ca3468b1054f6d0"><rect x="848.9124755859375" y="784.4375" rx="1px" ry="1px" width="390" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="857.9124755859375" y="800.3249938964843"><tspan>1.&lt;constructor-arg/&gt;的name属性，name表示构造器的形参名</tspan></tspan></text></g></g><g id="bfa7d9f2f1dbe659"><rect x="848.9124755859375" y="815.5249938964844" rx="1px" ry="1px" width="426" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="857.9124755859375" y="831.4124877929687"><tspan>2.&lt;constructor-arg/&gt;的index属性，index表示形参在构造器中的位置</tspan></tspan></text></g></g><g id="c3b07c33a75f5993"><rect x="595.6000366210938" y="877.6999816894531" rx="1px" ry="1px" width="81" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="604.6000366210938" y="893.5875061035156"><tspan>3.自动注入</tspan></tspan></text></g></g><g id="1a8703355ad41a9b"><rect x="704.3624877929688" y="846.6124877929688" rx="1px" ry="1px" width="454" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="713.3624877929688" y="862.4999816894531"><tspan>由spring根据某些规则，给引用类型完成赋值，常用的有byName，byType</tspan></tspan></text></g></g><g id="86b27f00041f4786"><rect x="704.3624877929688" y="877.6999816894531" rx="1px" ry="1px" width="765" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="713.3624877929688" y="893.5875061035156"><tspan>1.byName：按名称注入，java类中引用类型的属性名和spring容器中bean的id一样，数据类型一样，这样的bean赋值给引用类型</tspan></tspan></text></g></g><g id="bcd7556541823c1d"><rect x="704.3624877929688" y="908.7875061035156" rx="1px" ry="1px" width="774" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="713.3624877929688" y="924.675"><tspan>2.byType：按类型注入，java类中引用类型的数据类型和spring容器中bean的class是同源关系的，这样的bean能够赋值给引用类型</tspan></tspan></text></g></g><g id="1d1b0013fb46fe75"><rect x="460.11248779296875" y="1085.4250030517578" rx="1px" ry="1px" width="81" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="1101.3124969482421"><tspan>5.常用注解</tspan></tspan></text></g></g><g id="c464c5af9866570a"><rect x="568.875" y="939.875" rx="1px" ry="1px" width="181" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="955.7624938964843"><tspan>1.@Component：创建对象</tspan></tspan></text></g></g><g id="e811fa4396857745"><rect x="568.875" y="970.9624938964844" rx="1px" ry="1px" width="314" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="986.8500030517578"><tspan>2.@Repository，创建dao对象，用来访问数据库的</tspan></tspan></text></g></g><g id="7b412cc63ec0dddd"><rect x="568.875" y="1002.0500030517578" rx="1px" ry="1px" width="403" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1017.9374969482421"><tspan>3.@Service，创建Service对象，处理业务逻辑的，可以有事务功能</tspan></tspan></text></g></g><g id="89e1845ddf6ff071"><rect x="568.875" y="1033.1374969482422" rx="1px" ry="1px" width="390" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1049.0249908447265"><tspan>4.@Controller，创建控制器对象的，接收请求，显示处理结果的</tspan></tspan></text></g></g><g id="6f19f6c15556d594"><rect x="568.875" y="1064.2249908447266" rx="1px" ry="1px" width="194" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1080.1125"><tspan>5.@Value简单类型的属性赋值</tspan></tspan></text></g></g><g id="2b2afeb6ab6c7b9e"><rect x="568.875" y="1095.3125" rx="1px" ry="1px" width="851" height="34" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1110.1125"><tspan>6.@Autowired：Spring框架中引用类型的赋值注解，支持byName，byType，默认是byType（如果要用byName的话，需要增加@Qualifier）</tspan></tspan><tspan x="577.875" y="1128.1125"><tspan> </tspan></tspan></text></g></g><g id="f62e3dd5ab6c47a0"><rect x="568.875" y="1137.712501525879" rx="1px" ry="1px" width="619" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1153.5999954223632"><tspan>7.@Resource：jdk中的注解，使用自动注入给引用类型赋值，支持byName，byType，默认是byName</tspan></tspan></text></g></g><g id="310cdbeec26034ca"><rect x="568.875" y="1199.8874998092651" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="577.875" y="1215.7749994277954"><tspan>8.注解的使用步骤</tspan></tspan></text></g></g><g id="2c974a7b24e75038"><rect x="716.6375122070312" y="1168.7999992370605" rx="1px" ry="1px" width="318" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="725.6375732421875" y="1184.6875007629394"><tspan>1.加入依赖：spring-context，间接加入spring-aop</tspan></tspan></text></g></g><g id="dc6b1a8976bbb6b9"><rect x="716.6375122070312" y="1199.8874998092651" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="725.6375732421875" y="1215.7749994277954"><tspan>2.在类中加入注解</tspan></tspan></text></g></g><g id="8011db32aefb6285"><rect x="716.6375122070312" y="1230.9750003814697" rx="1px" ry="1px" width="618" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="725.6375732421875" y="1246.8625"><tspan>3.在spring的配置文件中，加入组件扫描器的标签&lt;context:component-scan base-package="包名"/&gt;</tspan></tspan></text></g></g><g id="8d3d544ed7d144b3"><rect x="460.11248779296875" y="1262.0625" rx="1px" ry="1px" width="125" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="469.11248779296875" y="1277.9500015258789"><tspan>6.ioc能实现解耦合</tspan></tspan></text></g></g><g id="deac44d302fb0be2"><rect x="613.1124877929688" y="1262.0625" rx="1px" ry="1px" width="441" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="622.1124877929688" y="1277.9500015258789"><tspan>ioc能实现业务对象之间的解耦合，例如service和dao对象之间的解耦合。</tspan></tspan></text></g></g><g id="1bd9dc0aa6356f64"><rect x="326" y="1728.375" rx="1px" ry="1px" width="137" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="335" y="1744.2625244140625"><tspan>AOP：面向切面编程</tspan></tspan></text></g></g><g id="db03fc44a10027c5"><rect x="490.70001220703125" y="1355.3249969482422" rx="1px" ry="1px" width="109" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1371.2125061035156"><tspan>底层是动态代理</tspan></tspan></text></g></g><g id="b267dd8cedb7b5b3"><rect x="627.7000122070312" y="1308.6875" rx="1px" ry="1px" width="100" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="636.7000122070312" y="1324.5750015258789"><tspan>1.jdk动态代理</tspan></tspan></text></g></g><g id="8049ddb5ede736c0"><rect x="755.3250732421875" y="1293.150001525879" rx="1px" ry="1px" width="284" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="764.3250732421875" y="1309.0375030517578"><tspan>使用jdk反射包中的类实现创建代理对象的功能</tspan></tspan></text></g></g><g id="38c1d81a874b8b01"><rect x="755.3250732421875" y="1324.2375030517578" rx="1px" ry="1px" width="174" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="764.3250732421875" y="1340.1250045776367"><tspan>要求：目标类必须实现接口</tspan></tspan></text></g></g><g id="54457db22b481fd2"><rect x="627.7000122070312" y="1386.4125061035156" rx="1px" ry="1px" width="111" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="636.7000122070312" y="1402.3"><tspan>2.cglib动态代理</tspan></tspan></text></g></g><g id="be510bd4580be462"><rect x="766.5125732421875" y="1355.3249969482422" rx="1px" ry="1px" width="265" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="775.5125732421875" y="1371.2125061035156"><tspan>使用第三方的工具库，实现代理对象的创建</tspan></tspan></text></g></g><g id="82408ac6a8ce3dfd"><rect x="766.5125732421875" y="1386.4125061035156" rx="1px" ry="1px" width="253" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="775.5125732421875" y="1402.3"><tspan>要求：目标类必须能够继承，不能是final</tspan></tspan></text></g></g><g id="1354711aa0936734"><rect x="766.5125732421875" y="1417.5" rx="1px" ry="1px" width="200" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="775.5125732421875" y="1433.3875091552734"><tspan>原理：就是继承，子类就是代理</tspan></tspan></text></g></g><g id="57c4ffff5bc68386"><rect x="490.70001220703125" y="1448.5875091552734" rx="1px" ry="1px" width="470" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1464.4750030517578"><tspan>aop：看作是动态代理的规范化，把实现动态代理的步骤进行了一个规范，定义</tspan></tspan></text></g></g><g id="053775853c647010"><rect x="490.70001220703125" y="1526.3000183105469" rx="1px" ry="1px" width="68" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1542.1875122070312"><tspan>aop作用</tspan></tspan></text></g></g><g id="d08a24b408636547"><rect x="586.4625244140625" y="1479.6750183105469" rx="1px" ry="1px" width="276" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="595.4625244140625" y="1495.5625122070312"><tspan>1.在目标类不修改源代码的情况下，增加功能</tspan></tspan></text></g></g><g id="c133491534dd3c3a"><rect x="586.4625244140625" y="1510.7625122070312" rx="1px" ry="1px" width="106" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="595.4625244140625" y="1526.6500061035156"><tspan>2.减少重复代码</tspan></tspan></text></g></g><g id="08c2dbd09250d02b"><rect x="586.4625244140625" y="1541.8500061035156" rx="1px" ry="1px" width="146" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="595.4625244140625" y="1557.7375"><tspan>3.专注业务功能的实现</tspan></tspan></text></g></g><g id="d104c1a3dea81779"><rect x="586.4625244140625" y="1572.9375" rx="1px" ry="1px" width="341" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="595.4625244140625" y="1588.8249938964843"><tspan>4.解耦合：业务功能和日志、事务这些非业务功能的耦合</tspan></tspan></text></g></g><g id="9759d62cd892d620"><rect x="490.70001220703125" y="1635.1125183105469" rx="1px" ry="1px" width="172" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1651.0000122070312"><tspan>什么时候考虑使用aop技术</tspan></tspan></text></g></g><g id="209af9eecfdfe4f2"><rect x="690.4625244140625" y="1604.0249938964844" rx="1px" ry="1px" width="677" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="699.4625244140625" y="1619.9125183105468"><tspan>1.当你要给一个系统中存在的类修改功能，但是原有类的功能不完善，但是你还有源代码，使用aop就可以增加功能</tspan></tspan></text></g></g><g id="4dbb0d6ce3db72a4"><rect x="690.4625244140625" y="1635.1125183105469" rx="1px" ry="1px" width="351" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="699.4625244140625" y="1651.0000122070312"><tspan>2.你要给项目中的多个类，增加一个相同的功能，使用aop</tspan></tspan></text></g></g><g id="759c34bc63d0e0cf"><rect x="690.4625244140625" y="1666.2000122070312" rx="1px" ry="1px" width="210" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="699.4625244140625" y="1682.0875061035156"><tspan>3.给业务方法增加事务，日志输出</tspan></tspan></text></g></g><g id="1d0e6223a661563e"><rect x="490.70001220703125" y="1728.375" rx="1px" ry="1px" width="106" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1744.2625244140625"><tspan>aop的实现框架</tspan></tspan></text></g></g><g id="9fa4bf2e248be7f6"><rect x="625.4625244140625" y="1697.2875061035156" rx="1px" ry="1px" width="234" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="634.4625244140625" y="1713.175"><tspan>1.spring实现了aop，实现方式是接口</tspan></tspan></text></g></g><g id="60fb7506e6eccf3c"><rect x="625.4625244140625" y="1743.9125366210938" rx="1px" ry="1px" width="100" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="634.4625244140625" y="1759.8"><tspan>2.aspectJ框架</tspan></tspan></text></g></g><g id="00ba00e104531241"><rect x="753.612548828125" y="1728.375" rx="1px" ry="1px" width="195" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="762.612548828125" y="1744.2625244140625"><tspan>1.使用注解可以实现aop的功能</tspan></tspan></text></g></g><g id="08ce753bde514e73"><rect x="753.612548828125" y="1759.4625244140625" rx="1px" ry="1px" width="257" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="762.612548828125" y="1775.3499877929687"><tspan>2.使用xml配置文件中的标签实现aop功能</tspan></tspan></text></g></g><g id="14fd39db6c92e437"><rect x="490.70001220703125" y="1821.6375122070312" rx="1px" ry="1px" width="94" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="1837.5250366210937"><tspan>aop中的概念</tspan></tspan></text></g></g><g id="9d5a1e671c2cebd0"><rect x="612.4625244140625" y="1790.5499877929688" rx="1px" ry="1px" width="524" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="621.4625244140625" y="1806.4375122070312"><tspan>1.aspect：切面，表示给业务方法增加的功能，一般日志输出，事务，权限检查等是切面</tspan></tspan></text></g></g><g id="a41c4efb8349128e"><rect x="612.4625244140625" y="1821.6375122070312" rx="1px" ry="1px" width="477" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="621.4625244140625" y="1837.5250366210937"><tspan>2.pointcut：切入点，是一个或多个JoinPoint的集合，表示切面功能执行的位置</tspan></tspan></text></g></g><g id="a1959989a9ec93bd"><rect x="612.4625244140625" y="1852.7250366210938" rx="1px" ry="1px" width="446" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="621.4625244140625" y="1868.6125"><tspan>3.advice：通知，也叫增强，表示切面执行的时间，在方法前，方法后等等</tspan></tspan></text></g></g><g id="fb6a436c99649902"><rect x="490.70001220703125" y="2023.7000122070312" rx="1px" ry="1px" width="129" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="499.70001220703125" y="2039.5875366210937"><tspan>aspectJ框架的使用</tspan></tspan></text></g></g><g id="6b82256d346eec9c"><rect x="647.1000366210938" y="2023.7000122070312" rx="1px" ry="1px" width="250" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="656.1000366210938" y="2039.5875366210937"><tspan>1.表示切面的执行时间，使用的通知注解</tspan></tspan></text></g></g><g id="f18621699edb212f"><rect x="924.862548828125" y="1883.8125" rx="1px" ry="1px" width="343" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="1899.7000244140625"><tspan>1.@Before：前置通知，在目标方法之前执行切面的功能</tspan></tspan></text></g></g><g id="7c7aaaa4c9280f0d"><rect x="924.862548828125" y="1914.9000244140625" rx="1px" ry="1px" width="511" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="1930.7874877929687"><tspan>2.@AfterReturning后置通知，在目标方法之后执行的，能够获取到目标方法的返回值</tspan></tspan></text></g></g><g id="f15366f5c175baf3"><rect x="924.862548828125" y="1945.9874877929688" rx="1px" ry="1px" width="544" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="1961.8750122070312"><tspan>3.@Around环绕通知，在目标方法前和后都能增强功能，控制目标方法的访问，修改返回值</tspan></tspan></text></g></g><g id="4a625c40f791501e"><rect x="924.862548828125" y="1977.0750122070312" rx="1px" ry="1px" width="378" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="1992.9625366210937"><tspan>4.AfterThrowing异常通知，在目标方法抛出异常后执行的通知</tspan></tspan></text></g></g><g id="e30695ae3c7566dc"><rect x="924.862548828125" y="2008.1625366210938" rx="1px" ry="1px" width="255" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="2024.05"><tspan>5.@After最终通知，总是会被执行的代码</tspan></tspan></text></g></g><g id="58363225c5e19a34"><rect x="924.862548828125" y="2039.25" rx="1px" ry="1px" width="275" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="2055.1375244140627"><tspan>6.@Pointcout 定义和管理切入点的辅助注解</tspan></tspan></text></g></g><g id="175347b87ce78ccf"><rect x="924.862548828125" y="2101.4249877929688" rx="1px" ry="1px" width="120" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="2117.3125122070314"><tspan>7.代理的使用方式</tspan></tspan></text></g></g><g id="7e56c2cc20cfb3c4"><rect x="1072.625" y="2070.3375244140625" rx="1px" ry="1px" width="294" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.625" y="2086.224987792969"><tspan>1.如果目标类有接口，框架默认使用jdk动态代理</tspan></tspan></text></g></g><g id="c216a195b8c37061"><rect x="1072.625" y="2101.4249877929688" rx="1px" ry="1px" width="319" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.625" y="2117.3125122070314"><tspan>2.如果目标类没有接口，框架默认使用cglib动态代理</tspan></tspan></text></g></g><g id="ebffbff37ae4831d"><rect x="1072.625" y="2132.5125122070312" rx="1px" ry="1px" width="241" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.625" y="2148.400036621094"><tspan>3.有接口也可以强制使用cglib动态代理</tspan></tspan></text></g></g><g id="f15e2f4488b4f1d3"><rect x="924.862548828125" y="2163.6000366210938" rx="1px" ry="1px" width="606" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="933.862548828125" y="2179.4875"><tspan>2.表示切面位置的切入点表达式：execution(访问修饰符 返回值 包名.类名.方法名称(方法的参数) 异常)</tspan></tspan></text></g></g><g id="3ab8869902354e05"><rect x="216" y="488.76251220703125" rx="5px" ry="5px" width="174" height="38" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="515.7124633789062"><tspan>使用Spring框架的步骤</tspan></tspan></text></g></g><g id="aeb5c739cd2e3ac6"><rect x="417.79998779296875" y="450.04998779296875" rx="1px" ry="1px" width="81" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="426.79998779296875" y="465.93751220703126"><tspan>1.加入依赖</tspan></tspan></text></g></g><g id="be2f6c1d9ce8291d"><rect x="526.5625" y="414" rx="1px" ry="1px" width="520" height="95" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="535.5625" y="428.8"><tspan>&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</tspan></tspan><tspan x="535.5625" y="446.8"><tspan>&lt;dependency&gt;</tspan></tspan><tspan x="535.5625" y="464.8"><tspan>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</tspan></tspan><tspan x="535.5625" y="482.8"><tspan>      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</tspan></tspan><tspan x="535.5625" y="500.8"><tspan>      &lt;version&gt;5.2.0.RELEASE&lt;/version&gt;</tspan></tspan><tspan x="535.5625" y="518.8"><tspan>&lt;/dependency&gt;</tspan></tspan></text></g></g><g id="147ab59c9f82a632"><rect x="417.79998779296875" y="517.2000122070312" rx="1px" ry="1px" width="250" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="426.79998779296875" y="533.0874755859375"><tspan>2.创建类：接口、实现类，没有接口的类</tspan></tspan></text></g></g><g id="aec9eb008bbb4abb"><rect x="417.79998779296875" y="548.2874755859375" rx="1px" ry="1px" width="302" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="426.79998779296875" y="564.175"><tspan>3.创建Spring的配置文件，使用&lt;bean&gt;声明对象</tspan></tspan></text></g></g><g id="26997f45074334df"><rect x="417.79998779296875" y="579.375" rx="1px" ry="1px" width="723" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="426.79998779296875" y="595.2624633789062"><tspan>4.我们使用容器中的对象，通过ApplicationContext接口和它的实现类ClassPathXmlApplicationContext的方法getBean()</tspan></tspan></text></g></g><g id="c9c9c2bf69612f7a"><rect x="216" y="341.61248779296875" rx="5px" ry="5px" width="204" height="38" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="368.5625"><tspan>不放到Spring容器中的对象</tspan></tspan></text></g></g><g id="aa4743d644bd9f9e"><rect x="447.79998779296875" y="334" rx="1px" ry="1px" width="237" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="456.79998779296875" y="349.88746337890626"><tspan>1.实体类对象，实体类数据来自数据库</tspan></tspan></text></g></g><g id="34427e16309080b7"><rect x="447.79998779296875" y="365.08746337890625" rx="1px" ry="1px" width="422" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="456.79998779296875" y="380.97498779296876"><tspan>2.servlet，listener，filter等（这几个对象是由tomcat容器来创建的）</tspan></tspan></text></g></g><g id="a1c22e320d37cdf4"><rect x="216" y="245.1624755859375" rx="5px" ry="5px" width="187" height="39" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="272.11248779296875"><tspan>什么样的对象放入容器中</tspan></tspan></text></g></g><g id="6169f4cb3c12e44f"><rect x="431" y="237.5374755859375" rx="1px" ry="1px" width="262" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="440" y="253.425"><tspan>dao类，service类，controller类，工具类</tspan></tspan></text></g></g><g id="a9939d49c01a77e4"><rect x="720.4375" y="222" rx="1px" ry="1px" width="218" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="729.4375" y="237.88746337890626"><tspan>1.使用xml配置文件，使用&lt;bean&gt;</tspan></tspan></text></g></g><g id="6b803c3402722a2f"><rect x="720.4375" y="253.08746337890625" rx="1px" ry="1px" width="54" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="729.4375" y="268.97498779296876"><tspan>2.注解</tspan></tspan></text></g></g><g id="5ace69f76cc76210"><rect x="431" y="284.17498779296875" rx="1px" ry="1px" width="202" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="440" y="300.06251220703126"><tspan>Spring中的对象默认都是单例的</tspan></tspan></text></g></g><g id="026f5180c03eea29"><rect x="216" y="133.1624755859375" rx="5px" ry="5px" width="129" height="39" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="160.1124267578125"><tspan>怎么使用Spring</tspan></tspan></text></g></g><g id="caf9d23b9203bb7a"><rect x="372.79998779296875" y="110" rx="1px" ry="1px" width="318" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="381.79998779296875" y="125.8875244140625"><tspan>Spring是一个容器，把项目中用的对象放入到容器中</tspan></tspan></text></g></g><g id="08a619f569790c39"><rect x="372.79998779296875" y="141.0875244140625" rx="1px" ry="1px" width="356" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="381.79998779296875" y="156.9749267578125"><tspan>让容器完成对象的创建，对象之间关系的管理（属性赋值）</tspan></tspan></text></g></g><g id="f85fa22614bdcf44"><rect x="372.79998779296875" y="172.1749267578125" rx="1px" ry="1px" width="252" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="381.79998779296875" y="188.062451171875"><tspan>我们在程序中从容器中获取要使用的对象</tspan></tspan></text></g></g><g id="8ec1bd3b1027abd0"><rect x="216" y="37.6124267578125" rx="5px" ry="5px" width="114" height="38" style="fill: #ffffff; stroke:#444;stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(115, 92, 69)"><tspan x="227" y="64.5625"><tspan>什么是Spring</tspan></tspan></text></g></g><g id="275f302da6334667"><rect x="357.79998779296875" y="30" rx="1px" ry="1px" width="294" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="366.79998779296875" y="45.8875244140625"><tspan>是一个框架，核心技术是ioc，aop，实现解耦合</tspan></tspan></text></g></g><g id="d0d69d3352bb2fcf"><rect x="357.79998779296875" y="61.0875244140625" rx="1px" ry="1px" width="238" height="23" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="13px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="366.79998779296875" y="76.9749267578125"><tspan>是一个容器，容器中存放的是java对象</tspan></tspan></text></g></g><g transform="translate(216, 2366)" id="sdjakdjak0"><g id="subline_2c74cae778e26824" transform="translate(0.5,-0.5)"><path id="line_48e3240a376d6332" d="M 98 373 L 116 373 L 116 28 A 4 4 0 0 1 120 24 L 125.0875244140625 24" p="2c74cae778e26824" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dec0f50be52e192b" d="M 208.0875244140625 24 L 227 24 L 227 24 L 236.0875244140625 24" p="48e3240a376d6332" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_42e03e1eb8decb99" d="M 98 373 L 116 373 L 116 104 A 4 4 0 0 1 120 100 L 125.0875244140625 100" p="2c74cae778e26824" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d4b2a8d20e50aed" d="M 351.0875244140625 100 L 370 100 L 370 73 A 4 4 0 0 1 374 69 L 379.0875244140625 69" p="42e03e1eb8decb99" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a7575e56ddd456b8" d="M 351.0875244140625 100 L 370 100 L 370 100 L 379.0875244140625 100" p="42e03e1eb8decb99" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_36f78fc0686c387d" d="M 351.0875244140625 100 L 370 100 L 370 127 A 4 4 0 0 0 374 131 L 379.0875244140625 131" p="42e03e1eb8decb99" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a124726561bb45a" d="M 98 373 L 116 373 L 116 443 A 4 4 0 0 0 120 447 L 125.0875244140625 447" p="2c74cae778e26824" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_38c50d85fe6184bc" d="M 247.0875244140625 447 L 266 447 L 266 166 A 4 4 0 0 1 270 162 L 275.16253662109375 162" p="2a124726561bb45a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_55762f66870f6933" d="M 247.0875244140625 447 L 266 447 L 266 265 A 4 4 0 0 1 270 261 L 275.16253662109375 261" p="2a124726561bb45a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fddf2cad9226411b" d="M 384.16253662109375 261 L 403 261 L 403 202 A 4 4 0 0 1 407 198 L 412.16253662109375 198" p="55762f66870f6933" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_20faee9db3eb4386" d="M 384.16253662109375 261 L 403 261 L 403 239 A 4 4 0 0 1 407 235 L 412.16253662109375 235" p="55762f66870f6933" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_41bfeaa1138c7d35" d="M 384.16253662109375 261 L 403 261 L 403 294 A 4 4 0 0 0 407 298 L 412.16253662109375 298" p="55762f66870f6933" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e10007375e196c6f" d="M 584.1625366210938 298 L 603 298 L 603 270 A 4 4 0 0 1 607 266 L 611.925048828125 266" p="41bfeaa1138c7d35" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_96abb930a265f79c" d="M 584.1625366210938 298 L 603 298 L 603 298 L 611.925048828125 298" p="41bfeaa1138c7d35" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e35b945b90b2d3af" d="M 584.1625366210938 298 L 603 298 L 603 325 A 4 4 0 0 0 607 329 L 611.925048828125 329" p="41bfeaa1138c7d35" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ebb9e0d914805d6e" d="M 247.0875244140625 447 L 266 447 L 266 542 A 4 4 0 0 0 270 546 L 275.16253662109375 546" p="2a124726561bb45a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_262e987514007dee" d="M 410.16253662109375 546 L 429 546 L 429 416 A 4 4 0 0 1 433 412 L 438.16253662109375 412" p="ebb9e0d914805d6e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a80b34466f35ee34" d="M 664.1625366210938 412 L 683 412 L 683 364 A 4 4 0 0 1 687 360 L 692.1624755859375 360" p="262e987514007dee" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9d8ec04fa3186e5d" d="M 664.1625366210938 412 L 683 412 L 683 395 A 4 4 0 0 1 687 391 L 692.1624755859375 391" p="262e987514007dee" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2ad238971ed6bd5b" d="M 664.1625366210938 412 L 683 412 L 683 423 A 4 4 0 0 0 687 427 L 692.1624755859375 427" p="262e987514007dee" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_506ab81b6d131f4a" d="M 664.1625366210938 412 L 683 412 L 683 460 A 4 4 0 0 0 687 464 L 692.1624755859375 464" p="262e987514007dee" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_40dca5d23cf0843b" d="M 410.16253662109375 546 L 429 546 L 429 610 A 4 4 0 0 0 433 614 L 438.16253662109375 614" p="ebb9e0d914805d6e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_40c1e96a3b6f266c" d="M 752.1625366210938 614 L 771 614 L 771 499 A 4 4 0 0 1 775 495 L 779.4000244140625 495" p="40dca5d23cf0843b" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e9a86565264a8d64" d="M 752.1625366210938 614 L 771 614 L 771 530 A 4 4 0 0 1 775 526 L 779.4000244140625 526" p="40dca5d23cf0843b" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_efd5767ed91276b8" d="M 752.1625366210938 614 L 771 614 L 771 598 A 4 4 0 0 1 775 594 L 779.4000244140625 594" p="40dca5d23cf0843b" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0ef8103d94751c3b" d="M 752.1625366210938 614 L 771 614 L 771 693 A 4 4 0 0 0 775 697 L 779.4000244140625 697" p="40dca5d23cf0843b" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 2213)" id="sdjakdjak1"><g id="subline_1ef5d4acecc0b367" transform="translate(0.5,-0.5)"><path id="line_9f57caa21a2d9650" d="M 154 64 L 172 64 L 172 21 A 4 4 0 0 1 176 17 L 181.47503662109375 17" p="1ef5d4acecc0b367" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_40ebc84ddd27e3f0" d="M 154 64 L 172 64 L 172 80 A 4 4 0 0 0 176 84 L 181.47503662109375 84" p="1ef5d4acecc0b367" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a79b6dc1c2e23f3e" d="M 352.47503662109375 84 L 371 84 L 371 57 A 4 4 0 0 1 375 53 L 380.42498779296875 53" p="40ebc84ddd27e3f0" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0495e4201d2eb1d0" d="M 352.47503662109375 84 L 371 84 L 371 84 L 380.42498779296875 84" p="40ebc84ddd27e3f0" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_de38e82f6a1cc4d2" d="M 352.47503662109375 84 L 371 84 L 371 112 A 4 4 0 0 0 375 116 L 380.42498779296875 116" p="40ebc84ddd27e3f0" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 629)" id="sdjakdjak2"><g id="subline_4d7afc4f8bf0b6af" transform="translate(0.5,-0.5)"><path id="line_b3d6a7756bc1be04" d="M 82 779 L 100 779 L 100 332 A 4 4 0 0 1 104 328 L 110 328" p="4d7afc4f8bf0b6af" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d7c6bdab07d6779" d="M 216 328 L 234 328 L 234 15 A 4 4 0 0 1 238 11 L 244.11248779296875 11" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8589ebf2ee6d38b6" d="M 216 328 L 234 328 L 234 46 A 4 4 0 0 1 238 42 L 244.11248779296875 42" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fecc0159b5347896" d="M 216 328 L 234 328 L 234 77 A 4 4 0 0 1 238 73 L 244.11248779296875 73" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_512495028e6dea0a" d="M 216 328 L 234 328 L 234 201 A 4 4 0 0 1 238 197 L 244.11248779296875 197" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1847a5bcd84b037e" d="M 351.11248779296875 197 L 370 197 L 370 124 A 4 4 0 0 1 374 120 L 379.60003662109375 120" p="512495028e6dea0a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5d899c562c823b27" d="M 693.6000366210938 120 L 712 120 L 712 108 A 4 4 0 0 1 716 104 L 721.3875732421875 104" p="1847a5bcd84b037e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a494139329599d64" d="M 693.6000366210938 120 L 712 120 L 712 131 A 4 4 0 0 0 716 135 L 721.3875732421875 135" p="1847a5bcd84b037e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ea96b2ba508dfe40" d="M 351.11248779296875 197 L 370 197 L 370 186 A 4 4 0 0 1 374 182 L 379.60003662109375 182" p="512495028e6dea0a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8ca3468b1054f6d0" d="M 605.6000366210938 182 L 624 182 L 624 170 A 4 4 0 0 1 628 166 L 632.9124755859375 166" p="ea96b2ba508dfe40" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bfa7d9f2f1dbe659" d="M 605.6000366210938 182 L 624 182 L 624 194 A 4 4 0 0 0 628 198 L 632.9124755859375 198" p="ea96b2ba508dfe40" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c3b07c33a75f5993" d="M 351.11248779296875 197 L 370 197 L 370 256 A 4 4 0 0 0 374 260 L 379.60003662109375 260" p="512495028e6dea0a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1a8703355ad41a9b" d="M 460.60003662109375 260 L 479 260 L 479 233 A 4 4 0 0 1 483 229 L 488.36248779296875 229" p="c3b07c33a75f5993" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_86b27f00041f4786" d="M 460.60003662109375 260 L 479 260 L 479 260 L 488.36248779296875 260" p="c3b07c33a75f5993" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bcd7556541823c1d" d="M 460.60003662109375 260 L 479 260 L 479 287 A 4 4 0 0 0 483 291 L 488.36248779296875 291" p="c3b07c33a75f5993" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d1b0013fb46fe75" d="M 216 328 L 234 328 L 234 463 A 4 4 0 0 0 238 467 L 244.11248779296875 467" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c464c5af9866570a" d="M 325.11248779296875 467 L 344 467 L 344 326 A 4 4 0 0 1 348 322 L 352.875 322" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e811fa4396857745" d="M 325.11248779296875 467 L 344 467 L 344 357 A 4 4 0 0 1 348 353 L 352.875 353" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7b412cc63ec0dddd" d="M 325.11248779296875 467 L 344 467 L 344 388 A 4 4 0 0 1 348 384 L 352.875 384" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_89e1845ddf6ff071" d="M 325.11248779296875 467 L 344 467 L 344 419 A 4 4 0 0 1 348 415 L 352.875 415" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6f19f6c15556d594" d="M 325.11248779296875 467 L 344 467 L 344 450 A 4 4 0 0 1 348 446 L 352.875 446" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b2afeb6ab6c7b9e" d="M 325.11248779296875 467 L 344 467 L 344 479 A 4 4 0 0 0 348 483 L 352.875 483" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f62e3dd5ab6c47a0" d="M 325.11248779296875 467 L 344 467 L 344 516 A 4 4 0 0 0 348 520 L 352.875 520" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_310cdbeec26034ca" d="M 325.11248779296875 467 L 344 467 L 344 578 A 4 4 0 0 0 348 582 L 352.875 582" p="1d1b0013fb46fe75" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2c974a7b24e75038" d="M 472.875 582 L 491 582 L 491 555 A 4 4 0 0 1 495 551 L 500.63751220703125 551" p="310cdbeec26034ca" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dc6b1a8976bbb6b9" d="M 472.875 582 L 491 582 L 491 582 L 500.63751220703125 582" p="310cdbeec26034ca" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8011db32aefb6285" d="M 472.875 582 L 491 582 L 491 609 A 4 4 0 0 0 495 613 L 500.63751220703125 613" p="310cdbeec26034ca" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8d3d544ed7d144b3" d="M 216 328 L 234 328 L 234 640 A 4 4 0 0 0 238 644 L 244.11248779296875 644" p="b3d6a7756bc1be04" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_deac44d302fb0be2" d="M 369.11248779296875 644 L 388 644 L 388 644 L 397.11248779296875 644" p="8d3d544ed7d144b3" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1bd9dc0aa6356f64" d="M 82 779 L 100 779 L 100 1106 A 4 4 0 0 0 104 1110 L 110 1110" p="4d7afc4f8bf0b6af" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_db03fc44a10027c5" d="M 247 1110 L 265 1110 L 265 741 A 4 4 0 0 1 269 737 L 274.70001220703125 737" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b267dd8cedb7b5b3" d="M 383.70001220703125 737 L 402 737 L 402 695 A 4 4 0 0 1 406 691 L 411.70001220703125 691" p="db03fc44a10027c5" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8049ddb5ede736c0" d="M 511.70001220703125 691 L 530 691 L 530 679 A 4 4 0 0 1 534 675 L 539.3250732421875 675" p="b267dd8cedb7b5b3" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_38c1d81a874b8b01" d="M 511.70001220703125 691 L 530 691 L 530 702 A 4 4 0 0 0 534 706 L 539.3250732421875 706" p="b267dd8cedb7b5b3" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_54457db22b481fd2" d="M 383.70001220703125 737 L 402 737 L 402 764 A 4 4 0 0 0 406 768 L 411.70001220703125 768" p="db03fc44a10027c5" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_be510bd4580be462" d="M 522.7000122070312 768 L 541 768 L 541 741 A 4 4 0 0 1 545 737 L 550.5125732421875 737" p="54457db22b481fd2" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_82408ac6a8ce3dfd" d="M 522.7000122070312 768 L 541 768 L 541 768 L 550.5125732421875 768" p="54457db22b481fd2" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1354711aa0936734" d="M 522.7000122070312 768 L 541 768 L 541 796 A 4 4 0 0 0 545 800 L 550.5125732421875 800" p="54457db22b481fd2" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_57c4ffff5bc68386" d="M 247 1110 L 265 1110 L 265 835 A 4 4 0 0 1 269 831 L 274.70001220703125 831" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_053775853c647010" d="M 247 1110 L 265 1110 L 265 912 A 4 4 0 0 1 269 908 L 274.70001220703125 908" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d08a24b408636547" d="M 342.70001220703125 908 L 361 908 L 361 866 A 4 4 0 0 1 365 862 L 370.4625244140625 862" p="053775853c647010" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c133491534dd3c3a" d="M 342.70001220703125 908 L 361 908 L 361 897 A 4 4 0 0 1 365 893 L 370.4625244140625 893" p="053775853c647010" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_08c2dbd09250d02b" d="M 342.70001220703125 908 L 361 908 L 361 920 A 4 4 0 0 0 365 924 L 370.4625244140625 924" p="053775853c647010" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d104c1a3dea81779" d="M 342.70001220703125 908 L 361 908 L 361 951 A 4 4 0 0 0 365 955 L 370.4625244140625 955" p="053775853c647010" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9759d62cd892d620" d="M 247 1110 L 265 1110 L 265 1021 A 4 4 0 0 1 269 1017 L 274.70001220703125 1017" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_209af9eecfdfe4f2" d="M 446.70001220703125 1017 L 465 1017 L 465 990 A 4 4 0 0 1 469 986 L 474.4625244140625 986" p="9759d62cd892d620" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4dbb0d6ce3db72a4" d="M 446.70001220703125 1017 L 465 1017 L 465 1017 L 474.4625244140625 1017" p="9759d62cd892d620" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_759c34bc63d0e0cf" d="M 446.70001220703125 1017 L 465 1017 L 465 1044 A 4 4 0 0 0 469 1048 L 474.4625244140625 1048" p="9759d62cd892d620" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d0e6223a661563e" d="M 247 1110 L 265 1110 L 265 1110 L 274.70001220703125 1110" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9fa4bf2e248be7f6" d="M 380.70001220703125 1110 L 399 1110 L 399 1083 A 4 4 0 0 1 403 1079 L 409.4625244140625 1079" p="1d0e6223a661563e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_60fb7506e6eccf3c" d="M 380.70001220703125 1110 L 399 1110 L 399 1122 A 4 4 0 0 0 403 1126 L 409.4625244140625 1126" p="1d0e6223a661563e" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_00ba00e104531241" d="M 509.4625244140625 1126 L 528 1126 L 528 1114 A 4 4 0 0 1 532 1110 L 537.612548828125 1110" p="60fb7506e6eccf3c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_08ce753bde514e73" d="M 509.4625244140625 1126 L 528 1126 L 528 1137 A 4 4 0 0 0 532 1141 L 537.612548828125 1141" p="60fb7506e6eccf3c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_14fd39db6c92e437" d="M 247 1110 L 265 1110 L 265 1200 A 4 4 0 0 0 269 1204 L 274.70001220703125 1204" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9d5a1e671c2cebd0" d="M 368.70001220703125 1204 L 387 1204 L 387 1177 A 4 4 0 0 1 391 1173 L 396.4625244140625 1173" p="14fd39db6c92e437" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a41c4efb8349128e" d="M 368.70001220703125 1204 L 387 1204 L 387 1204 L 396.4625244140625 1204" p="14fd39db6c92e437" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a1959989a9ec93bd" d="M 368.70001220703125 1204 L 387 1204 L 387 1231 A 4 4 0 0 0 391 1235 L 396.4625244140625 1235" p="14fd39db6c92e437" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fb6a436c99649902" d="M 247 1110 L 265 1110 L 265 1402 A 4 4 0 0 0 269 1406 L 274.70001220703125 1406" p="1bd9dc0aa6356f64" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6b82256d346eec9c" d="M 403.70001220703125 1406 L 422 1406 L 422 1406 L 431.10003662109375 1406" p="fb6a436c99649902" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f18621699edb212f" d="M 681.1000366210938 1406 L 700 1406 L 700 1270 A 4 4 0 0 1 704 1266 L 708.862548828125 1266" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7c7aaaa4c9280f0d" d="M 681.1000366210938 1406 L 700 1406 L 700 1301 A 4 4 0 0 1 704 1297 L 708.862548828125 1297" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f15366f5c175baf3" d="M 681.1000366210938 1406 L 700 1406 L 700 1332 A 4 4 0 0 1 704 1328 L 708.862548828125 1328" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4a625c40f791501e" d="M 681.1000366210938 1406 L 700 1406 L 700 1363 A 4 4 0 0 1 704 1359 L 708.862548828125 1359" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e30695ae3c7566dc" d="M 681.1000366210938 1406 L 700 1406 L 700 1394 A 4 4 0 0 1 704 1390 L 708.862548828125 1390" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_58363225c5e19a34" d="M 681.1000366210938 1406 L 700 1406 L 700 1417 A 4 4 0 0 0 704 1421 L 708.862548828125 1421" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_175347b87ce78ccf" d="M 681.1000366210938 1406 L 700 1406 L 700 1479 A 4 4 0 0 0 704 1483 L 708.862548828125 1483" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7e56c2cc20cfb3c4" d="M 828.862548828125 1483 L 847 1483 L 847 1456 A 4 4 0 0 1 851 1452 L 856.625 1452" p="175347b87ce78ccf" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c216a195b8c37061" d="M 828.862548828125 1483 L 847 1483 L 847 1483 L 856.625 1483" p="175347b87ce78ccf" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ebffbff37ae4831d" d="M 828.862548828125 1483 L 847 1483 L 847 1511 A 4 4 0 0 0 851 1515 L 856.625 1515" p="175347b87ce78ccf" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f15e2f4488b4f1d3" d="M 681.1000366210938 1406 L 700 1406 L 700 1542 A 4 4 0 0 0 704 1546 L 708.862548828125 1546" p="6b82256d346eec9c" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 414)" id="sdjakdjak3"><g id="subline_3ab8869902354e05" transform="translate(0.5,-0.5)"><path id="line_aeb5c739cd2e3ac6" d="M 174 95 L 192 95 L 192 51 A 4 4 0 0 1 196 47 L 201.79998779296875 47" p="3ab8869902354e05" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_be2f6c1d9ce8291d" d="M 282.79998779296875 47 L 301 47 L 301 47 L 310.5625 47" p="aeb5c739cd2e3ac6" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_147ab59c9f82a632" d="M 174 95 L 192 95 L 192 110 A 4 4 0 0 0 196 114 L 201.79998779296875 114" p="3ab8869902354e05" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_aec9eb008bbb4abb" d="M 174 95 L 192 95 L 192 141 A 4 4 0 0 0 196 145 L 201.79998779296875 145" p="3ab8869902354e05" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_26997f45074334df" d="M 174 95 L 192 95 L 192 172 A 4 4 0 0 0 196 176 L 201.79998779296875 176" p="3ab8869902354e05" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 334)" id="sdjakdjak4"><g id="subline_c9c9c2bf69612f7a" transform="translate(0.5,-0.5)"><path id="line_aa4743d644bd9f9e" d="M 204 27 L 222 27 L 222 15 A 4 4 0 0 1 226 11 L 231.79998779296875 11" p="c9c9c2bf69612f7a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_34427e16309080b7" d="M 204 27 L 222 27 L 222 38 A 4 4 0 0 0 226 42 L 231.79998779296875 42" p="c9c9c2bf69612f7a" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 222)" id="sdjakdjak5"><g id="subline_a1c22e320d37cdf4" transform="translate(0.5,-0.5)"><path id="line_6169f4cb3c12e44f" d="M 187 43 L 205 43 L 205 31 A 4 4 0 0 1 209 27 L 215 27" p="a1c22e320d37cdf4" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a9939d49c01a77e4" d="M 477 27 L 495 27 L 495 15 A 4 4 0 0 1 499 11 L 504.4375 11" p="6169f4cb3c12e44f" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6b803c3402722a2f" d="M 477 27 L 495 27 L 495 38 A 4 4 0 0 0 499 42 L 504.4375 42" p="6169f4cb3c12e44f" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5ace69f76cc76210" d="M 187 43 L 205 43 L 205 69 A 4 4 0 0 0 209 73 L 215 73" p="a1c22e320d37cdf4" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 110)" id="sdjakdjak6"><g id="subline_026f5180c03eea29" transform="translate(0.5,-0.5)"><path id="line_caf9d23b9203bb7a" d="M 129 43 L 147 43 L 147 15 A 4 4 0 0 1 151 11 L 156.79998779296875 11" p="026f5180c03eea29" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_08a619f569790c39" d="M 129 43 L 147 43 L 147 43 L 156.79998779296875 43" p="026f5180c03eea29" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f85fa22614bdcf44" d="M 129 43 L 147 43 L 147 69 A 4 4 0 0 0 151 73 L 156.79998779296875 73" p="026f5180c03eea29" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(216, 30)" id="sdjakdjak7"><g id="subline_8ec1bd3b1027abd0" transform="translate(0.5,-0.5)"><path id="line_275f302da6334667" d="M 114 27 L 132 27 L 132 15 A 4 4 0 0 1 136 11 L 141.79998779296875 11" p="8ec1bd3b1027abd0" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d0d69d3352bb2fcf" d="M 114 27 L 132 27 L 132 38 A 4 4 0 0 0 136 42 L 141.79998779296875 42" p="8ec1bd3b1027abd0" stroke="#555" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 1542)" id="sdjakdjak8"><g id="subline_root" transform="translate(0.5,-0.5)"></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="30" y="1542" rx="29" ry="29" width="106" height="58" style="fill: #55beed; stroke:#55beed;stroke-width:2px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="font-size=&quot;25px&quot;" font-weight="" fill=""><tspan x="44" y="1583.8500061035156"><tspan>Spring</tspan></tspan></text></g></g></svg>
