<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lskj</title>
  
  <subtitle>心若浮沉，浅笑安然。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lskjwp.gitee.io/"/>
  <updated>2021-12-19T12:29:49.100Z</updated>
  <id>https://lskjwp.gitee.io/</id>
  
  <author>
    <name>勇也很努力</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringData JPA学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/7ae77e8c/"/>
    <id>https://lskjwp.gitee.io/archives/7ae77e8c/</id>
    <published>2021-12-19T11:07:57.000Z</published>
    <updated>2021-12-19T12:29:49.100Z</updated>
    
    <content type="html"><![CDATA[<p><em>JPA</em>(Java Persistence API)意即Java持久化API。</p><a id="more"></a><h1 id="一、JPA"><a href="#一、JPA" class="headerlink" title="一、JPA"></a>一、JPA</h1><p>ORM（Object Relational Mapping）表示对象关系映射。</p><blockquote><p>为什么使用ORM？</p></blockquote><p>当实现一个应用程序时（不使用ORM），可能会编写很多繁琐的数据访问层的代码，从数据库中增、删、改数据，而这些代码都是重复的。使用ORM则会大大减少重复性代码。ORM主要实现程序对象到关系数据库数据的映射。</p><blockquote><p>常见的ORM框架</p></blockquote><p>Mybatis、Hibernate、Jpa</p><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p>Java Persistence API：用于对象持久化的API，是sun公司推出的一套基于ORM的规范，内部是由一系列的接口和抽象类构成。</p><p>JPA通过JDK5.0注解描述对象-关系表的映射关系，并将运行期的实体对象持久化到数据库中。</p><blockquote><p>JPA与Hibernate的关系</p></blockquote><ul><li><p>JPA是hibernate的一个抽象（就像JDBC和JDBC驱动的关系）：</p><ul><li><p>JPA是规范：JPA本质上就是一种ORM规范，不是ORM框架——因为JPA并未提供ORM实现，它只是制定了一些规范，提供了一些编程的API接口，但具体实现则由ORM厂商提供实现</p></li><li><p>Hibernate是实现：Hibernate除了作为ORM框架之外，它也是一种JPA实现</p></li></ul></li><li><p>从功能上来说，JPA是Hibernate功能的一个子集</p></li></ul><p><img src="/archives/7ae77e8c/image-20211127150436808.png" alt=""></p><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的ORM框架，Hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。</p><p>JPA和Hibernate的关系就像JDBC和JDBC驱动的关系，JPA是规范，Hibernate除了作为ORM框架之外，它也是一种JPA实现。JPA怎么取代Hibernate呢？JDBC规范可以驱动底层数据库吗？答案是否定的，也就是说，如果使用JPA规范进行数据库操作，底层需要hibernate作为其实现类完成数据持久化工作。</p><blockquote><p>JPA的优势</p></blockquote><ul><li><strong>标准化</strong>：JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。</li><li><strong>容器级特性的支持</strong>：JPA框架中支持大数据集、事务、并发等容器级事务，这使得JPA超越了简单持久化框架的局限，在企业应用中发挥更大的作用。</li><li><strong>简单易用，集成方便</strong>：JPA的主要目标之一就是提供更加简单的编程模型，在JPA框架下创建实现和创建Java类一样简单，只需要使用javax.persistence.Entitty进行注释；JPA的框架和接口也都是非常简单的</li><li><strong>可媲美JDBC的查询能力</strong>：JPA的查询语言是面向对象的，JPA的定义了独立的JPQL，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING等通常只有SQL才能够提供的高级查询特性，甚至还能够支持子查询。</li><li><strong>支持面向对象的高级特性</strong>：JPA中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化</li></ul><blockquote><p>JPA包括3方面的技术</p></blockquote><ul><li>ORM映射元数据：JPA支持XML和JDK5.0的注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中。</li><li>JPA的API：用来操作实现对象，执行CRUD操作，框架在后台完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。</li><li>查询语言（JPQL）：这是持久化操作中很重要的一个方面，通过面向对象而非面向数据库的查询语言查询数据，避免程序和具体的SQL紧密耦合。</li></ul><h2 id="1-2、JPA持久化对象的步骤"><a href="#1-2、JPA持久化对象的步骤" class="headerlink" title="1.2、JPA持久化对象的步骤"></a>1.2、JPA持久化对象的步骤</h2><ul><li>创建persistence.xml，在这个文件中配置持久化单元<ul><li>需要指定跟哪个数据库进行交互</li><li>需要指定JPA使用哪个持久化的框架以及配置该框架的基本属性</li></ul></li><li>创建实体类，使用annotation来描述实体类与数据库表之间的映射关系</li><li>使用JPA API完成数据增加、删除、修改和查询操作<ul><li>创建EntityManagerFactory（对应Hibernate中的SessionFactory）</li><li>创建EntityManager（对应Hibernate中的Session）</li></ul></li></ul><pre><code>1、加载配置文件创建工厂（实体管理类工厂）对象    Persistence：静态方法（根据持久化单元名称创建实体管理器工厂）        createEntityManagerFactory（持久化单元名称）    作用：创建实体管理器工厂2、通过实体管理类工厂获取实体管理器    EntityManagerFactory：获取EntityManager对象    方法：createEntityManager    - 内部维护的很多的内容        内部维护了数据库信息        维护了缓存信息        维护了所有的实体管理器对象        在创建EntityManagerFactory的过程中会根据配置创建数据库表    - EntityManagerFactory的创建过程比较浪费资源    特点：线程安全的对象        多个线程访问同一个EntityManagerFactory不会有线程安全问题    - 如何解决EntityManagerFactory的创建过程浪费资源（耗时）的问题？    思路：创建一个公共的EntityManagerFactory的对象    - 静态代码块的形式创建EntityManagerFactory3、获取事务管理对象，开启事务    EntityManager对象：实体类管理器        beginTransaction：创建事务对象        persist：保存        merge：更新        remove：删除        find/getReference：根据id查询    Transaction对象：事务        begin：开启事务        commit：提交事务        rollback：回滚事务4、完成增删该查操作5、提交事务（回滚事务）6、释放资源</code></pre><h1 id="二、JPA的基本操作"><a href="#二、JPA的基本操作" class="headerlink" title="二、JPA的基本操作"></a>二、JPA的基本操作</h1><h2 id="2-1、第一个JPA程序"><a href="#2-1、第一个JPA程序" class="headerlink" title="2.1、第一个JPA程序"></a>2.1、第一个JPA程序</h2><p><strong>1、新建项目，并导入jar包。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.hibernate.version</span><span class="token punctuation">></span></span>5.0.7.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.hibernate.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- junit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate对jpa的支持包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-entitymanager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Mysql and MariaDB --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><strong>2、配置jpa的核心配置文件。</strong></p><ul><li>位置：配置到类路径下的<code>META-INF</code>文件夹下。</li><li>命名：<code>persistence.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistence</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/persistence<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--需要配置persistence-unit节点        持久化单元：            name：持久化单元名称            transaction-type：事务管理的方式                JTA：分布式事务管理                RESOURCE_LOCAL：本地事务管理    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistence-unit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myJpa<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RESOURCE_LOCAL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jpa的实现方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">></span></span>org.hibernate.jpa.HibernatePersistenceProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--数据库信息                用户名：javax.persistence.jdbc.user                密码：javax.persistence.jdbc.password                驱动：javax.persistence.jdbc.driver                数据库地址：javax.persistence.jdbc.url            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.persistence.jdbc.user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.persistence.jdbc.password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.persistence.jdbc.driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.persistence.jdbc.url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///jpa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--可选配置：配置jpa实现方的配置信息--></span>            <span class="token comment" spellcheck="true">&lt;!--配置jpa实现方（hibernate）的配置信息                显示sql：hibernate.show_sql                自动创建数据库表：hibernate.hbm2ddl.auto                    create：程序运行时创建数据库表（如果表存在，先删除表再创建表）                    update：程序运行时创建表（如果表存在，不会创建表）                    none：不会创建表            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.show_sql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.hbm2ddl.auto<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistence-unit</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistence</span><span class="token punctuation">></span></span></code></pre><p><strong>3、创建实体类，并配置实体类和表，类中属性和表中字段的映射关系。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 客户实体类 *  配置映射管理 *      1、实体类与表的映射关系 *          @Entity：声明实体类 *          @Table：配置实体类和表的映射关系 *          name：配置数据库表的名称 *      2、实体类中属性与表中字段的映射关系 */</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cst_customer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @Id：声明主键     * @GeneratedValue：配置主键的生成策略     *    GenerationType.IDENTITY：自增     *      底层数据库必须支持自动增长（MySQL）     *    GenerationType.SEQUENCE：序列     *      底层数据库必须支持序列（Oracle）     *    GenerationType.TABLE：jpa提供的一种机制，通过一场数据库表的形式帮助完成主键自增     *    GenerationType.AUTO：由程序自动的帮助选择主键生成策略     * @Column：配置属性和字段的映射关系     *  name：指定数据库表的列名称。     *  unique：是否唯一       *  nullable：是否可以为空       *  inserttable：是否可以插入       *  updateable：是否可以更新       *  columnDefinition: 定义建表时创建此列的DDL       *  secondaryTable: 从表名。如果此列不建在主表上（默认建在主表），该属性定义该列所在从表的名字搭建开发环境     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>TABLE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long custId<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//客户的主键</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客户名称</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_source"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custSource<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客户来源</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_level"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custLevel<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//客户级别</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_industry"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custIndustry<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户所属行业</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_phone"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custPhone<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//客户的联系方式</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_address"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custAddress<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//客户地址</span>    <span class="token keyword">public</span> Long <span class="token function">getCustId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustId</span><span class="token punctuation">(</span>Long custId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custId <span class="token operator">=</span> custId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustName</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custName <span class="token operator">=</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustSource</span><span class="token punctuation">(</span>String custSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custSource <span class="token operator">=</span> custSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custLevel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustLevel</span><span class="token punctuation">(</span>String custLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custLevel <span class="token operator">=</span> custLevel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustIndustry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custIndustry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustIndustry</span><span class="token punctuation">(</span>String custIndustry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custIndustry <span class="token operator">=</span> custIndustry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustPhone</span><span class="token punctuation">(</span>String custPhone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custPhone <span class="token operator">=</span> custPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustAddress</span><span class="token punctuation">(</span>String custAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custAddress <span class="token operator">=</span> custAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"custId="</span> <span class="token operator">+</span> custId <span class="token operator">+</span>                <span class="token string">", custName='"</span> <span class="token operator">+</span> custName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custSource='"</span> <span class="token operator">+</span> custSource <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custLevel='"</span> <span class="token operator">+</span> custLevel <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custIndustry='"</span> <span class="token operator">+</span> custIndustry <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custPhone='"</span> <span class="token operator">+</span> custPhone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custAddress='"</span> <span class="token operator">+</span> custAddress <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、保存信息到数据库中。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityTransaction<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Persistence<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 测试JPA的保存     *  Jpa的操作步骤：     *      1、加载配置文件创建工厂（实体管理类工厂）对象     *      2、通过实体管理类工厂获取实体管理器     *      3、获取事务管理对象，开启事务     *      4、完成增删该查操作     *      5、提交事务（回滚事务）     *      6、释放资源     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、加载配置文件创建工厂（实体管理类工厂）对象</span>        EntityManagerFactory factory <span class="token operator">=</span> Persistence<span class="token punctuation">.</span><span class="token function">createEntityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"myJpa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、通过实体管理类工厂获取实体管理器</span>        EntityManager em <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、获取事务管理对象，开启事务</span>        EntityTransaction tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取事务对象</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启事务</span>        <span class="token comment" spellcheck="true">//4、完成增删该查操作</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustIndustry</span><span class="token punctuation">(</span><span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存</span>        em<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//保存操作</span>        <span class="token comment" spellcheck="true">//5、提交事务（回滚事务）</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6、释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-2、抽取jpaUtils工具类"><a href="#2-2、抽取jpaUtils工具类" class="headerlink" title="2.2、抽取jpaUtils工具类"></a>2.2、抽取jpaUtils工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Persistence<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 解决实体管理器工厂的浪费资源和耗时问题 *  通过静态代码块的形式，当程序第一次访问此工具类时，创建一个公共的实体管理器工厂对象 * *  第一次访问getEntityManager方法：经过静态代码块创建一个factory对象，再调用方法创建一个EntityManager对象 *  第二次访问getEntityManager方法：直接通过一个已经创建好的factory对象，创建EntityManager对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> EntityManagerFactory factory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、加载配置文件，创建entityManagerFactory</span>        factory <span class="token operator">=</span> Persistence<span class="token punctuation">.</span><span class="token function">createEntityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"myJpa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取EntityManager对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EntityManager <span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改上述的<code>testSave()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        //1、加载配置文件创建工厂（实体管理类工厂）对象        EntityManagerFactory factory = Persistence.createEntityManagerFactory("myJpa");        //2、通过实体管理类工厂获取实体管理器        EntityManager em = factory.createEntityManager();    */</span>    EntityManager em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、获取事务管理对象，开启事务</span>    EntityTransaction tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取事务对象</span>    tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启事务</span>    <span class="token comment" spellcheck="true">//4、完成增删该查操作</span>    Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customer<span class="token punctuation">.</span><span class="token function">setCustIndustry</span><span class="token punctuation">(</span><span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存</span>    em<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//保存操作</span>    <span class="token comment" spellcheck="true">//5、提交事务（回滚事务）</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6、释放资源</span>    em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//factory.close();</span><span class="token punctuation">}</span></code></pre><h2 id="2-3、使用JPA完成CRUD"><a href="#2-3、使用JPA完成CRUD" class="headerlink" title="2.3、使用JPA完成CRUD"></a>2.3、使用JPA完成CRUD</h2><blockquote><p>增</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义对象</span>    Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customer<span class="token punctuation">.</span><span class="token function">setCustLevel</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customer<span class="token punctuation">.</span><span class="token function">setCustIndustry</span><span class="token punctuation">(</span><span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        em<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>删</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        Customer customer <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 6L<span class="token punctuation">)</span><span class="token punctuation">;</span>        em<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>改</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMerge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        <span class="token comment" spellcheck="true">//定义对象</span>        Customer customer <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustLevel</span><span class="token punctuation">(</span><span class="token string">"Lv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        em<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把customer对象从缓存中清除出去</span>        em<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>根据id查询</p></blockquote><p><strong>find</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 立即加载*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        Customer customer <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 6L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>getReference</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * getReference方法 *  1、获取的对象是一个动态代理对象 *  2、调用getReference方法不会立即放松sql语句查询数据库 *      当调用查询结果对象时，才会发送查询的失去了语句：什么时候用，什么时候发送sql语句查询数据库 * 延迟加载（懒加载） *  得到的是一个动态代理对象 *  什么时候用，什么时候才会查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        Customer customer <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4、JPA中的复杂查询"><a href="#2-4、JPA中的复杂查询" class="headerlink" title="2.4、JPA中的复杂查询"></a>2.4、JPA中的复杂查询</h2><p>JPQL（Java Persistence Query Language）基于首次在EJB2.0中引入的EJB查询语言(EJB QL),Java持久化查询语言(JPQL)是一种可移植的查询语言，旨在以面向对象表达式语言的表达式，将SQL语法和简单查询语义绑定在一起·使用这种语言编写的查询是可移植的，可以被编译成所有主流数据库服务器上的SQL。</p><p>其特征与原生SQL语句类似，并且完全面向对象，通过类名和属性访问，而不是表名和表的属性。</p><ul><li>sql查询的是表和表中的字段</li><li>jpql查询的是实体类和类中的属性</li></ul><p>进行jpql查询：</p><ul><li>创建query对象</li><li>对参数进行赋值</li><li>查询，并得到返回结果</li></ul><blockquote><p>查询全部</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询全部 *  sql：select * from cst_customer *  jqpl: from Customer */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">FindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em  <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建query对象，query对象才是执行jpql的对象</span>        String jpql <span class="token operator">=</span> <span class="token string">"from com.lskj.domain.Customer"</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>jpql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送查询，并封装结果集</span>        List list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>排序查询</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 倒序查询 *  sql：select * from cst_customer order by cust_id desc *  jqpl: from Customer order by custId desc */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em  <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建query对象，query对象才是执行jpql的对象</span>        String jpql <span class="token operator">=</span> <span class="token string">"from Customer order by custId desc"</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>jpql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送查询，并封装结果集</span>        List list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>统计总数</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 统计总数 *  sql：select count(cust_id) from cst_customer *  jqpl: select count(custId) from Customer */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em  <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建query对象，query对象才是执行jpql的对象</span>        String jpql <span class="token operator">=</span> <span class="token string">"select count(custId) from Customer"</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>jpql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getResultList：直接将查询结果封装为list集合</span>        <span class="token comment" spellcheck="true">//getSingleResult：得到唯一的结果集</span>        Object result <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>分页查询</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 分页查询 *  sql：select * from cst_customer limit ?,? *  jqpl: from Customer */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Paged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em  <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建query对象，query对象才是执行jpql的对象</span>        String jpql <span class="token operator">=</span> <span class="token string">"from Customer"</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>jpql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对参数赋值</span>        <span class="token comment" spellcheck="true">/**         * 分页参数：         *  -起始索引         *  -每页查询的条数         */</span>        <span class="token comment" spellcheck="true">//起始索引</span>        query<span class="token punctuation">.</span><span class="token function">setFirstResult</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每页查询的条数</span>        query<span class="token punctuation">.</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getResultList：直接将查询结果封装为list集合</span>        <span class="token comment" spellcheck="true">//getSingleResult：得到唯一的结果集</span>        List list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>条件查询</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 条件查询 *  sql：select * from cst_customer where cust_name like ? *  jqpl: from Customer where custName like ? */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    EntityManager em <span class="token operator">=</span> null<span class="token punctuation">;</span>    EntityTransaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取实体管理对象</span>        em  <span class="token operator">=</span> JpaUtils<span class="token punctuation">.</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        tx <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建query对象，query对象才是执行jpql的对象</span>        String jpql <span class="token operator">=</span> <span class="token string">"from Customer where custName like ?"</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>jpql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对参数赋值-占位符参数</span>        <span class="token comment" spellcheck="true">//第一个参数：占位符的索引位置（从1开始），第二个参数：取值</span>        query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"t%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getResultList：直接将查询结果封装为list集合</span>        <span class="token comment" spellcheck="true">//getSingleResult：得到唯一的结果集</span>        List list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        em<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、SpringData-JPA概述"><a href="#三、SpringData-JPA概述" class="headerlink" title="三、SpringData JPA概述"></a>三、SpringData JPA概述</h1><p>Spring Data JPA是Spring基于ORM框架、JPA规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展。</p><p>SpringData Jpa 极大简化了数据库访问层代码。 如何简化的呢？ 使用了SpringDataJpa，dao层中只需要写接口，就自动具有了增删改查、分页查询等方法。</p><blockquote><p>SpringData JPA与JPA、hibernate之间的关系</p></blockquote><p>JPA是一套规范，内部是有接口和抽象类组成的。hibernate是一套成熟的ORM框架，而且Hibernate实现了JPA规范，所以也可以称hibernate为JPA的一种实现方式，我们使用JPA的API编程，意味着站在更高的角度上看待问题（面向接口编程）</p><p>Spring Data JPA是Spring提供的一套对JPA操作更加高级的封装，是在JPA规范下的专门用来进行数据持久化的解决方案。</p><h1 id="四、SpringData-JPA的基本操作"><a href="#四、SpringData-JPA的基本操作" class="headerlink" title="四、SpringData JPA的基本操作"></a>四、SpringData JPA的基本操作</h1><h2 id="4-1、第一个SpringData-Jpa程序"><a href="#4-1、第一个SpringData-Jpa程序" class="headerlink" title="4-1、第一个SpringData Jpa程序"></a>4-1、第一个SpringData Jpa程序</h2><p><strong>1、创建项目，导入jar包。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate.version</span><span class="token punctuation">></span></span>5.0.7.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0.version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- junit单元测试 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring beg --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring end --></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate beg --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-entitymanager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- hibernate end --></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0 beg --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${c3p0.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0 end --></span>        <span class="token comment" spellcheck="true">&lt;!-- log end --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log end --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- el beg 使用spring data jpa 必须引入 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.el-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- el end --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><strong>2、配置spring的配置文件（配置spring data jpa的整合）。</strong></p><p>applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>jpa</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/data/jpa<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>task</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/task<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/data/jpa        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring和spring data jpa的配置--></span>    <span class="token comment" spellcheck="true">&lt;!--1、创建entityManagerFactory对象交给spring容器管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSoruce<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置的扫描的包（实体类所在的包）--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>packagesToScan<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--jpa的实现方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>persistenceProvider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jpa的供应商适配器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jpaVendorAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置是否自动创建数据库表--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>generateDdl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--指定数据库类型--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>database<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MYSQL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--数据库方言，支持的特有语法--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>databasePlatform<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.dialect.MySQL5Dialect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--是否显示sql--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showSql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jpa的方言：高级的特性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jpaDialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.vendor.HibernateJpaDialect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--创建数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSoruce<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///jpa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--整合spring data jpa--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jpa:</span>repositories</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>                      <span class="token attr-name">entity-manager-factory-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jpa:</span>repositories</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.JpaTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entityManagerFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明式事务--></span>    <span class="token comment" spellcheck="true">&lt;!--配置包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><strong>3、编写实体类（Customer），使用jpa注解配置映射关系。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 1、实体类和表的映射关系 * @Entity * @Table * 2、类中属性和表中字段的映射关系 * @Id * @GenerateValue * @Column */</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cst_customer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long custId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_address"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custAddress<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_industry"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custIndustry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_level"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custLevel<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_phone"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custPhone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cust_source"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String custSource<span class="token punctuation">;</span>    <span class="token keyword">public</span> Long <span class="token function">getCustId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustId</span><span class="token punctuation">(</span>Long custId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custId <span class="token operator">=</span> custId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustAddress</span><span class="token punctuation">(</span>String custAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custAddress <span class="token operator">=</span> custAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustIndustry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custIndustry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustIndustry</span><span class="token punctuation">(</span>String custIndustry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custIndustry <span class="token operator">=</span> custIndustry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custLevel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustLevel</span><span class="token punctuation">(</span>String custLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custLevel <span class="token operator">=</span> custLevel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustName</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custName <span class="token operator">=</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustPhone</span><span class="token punctuation">(</span>String custPhone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custPhone <span class="token operator">=</span> custPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCustSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustSource</span><span class="token punctuation">(</span>String custSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custSource <span class="token operator">=</span> custSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"custId="</span> <span class="token operator">+</span> custId <span class="token operator">+</span>                <span class="token string">", custAddress='"</span> <span class="token operator">+</span> custAddress <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custIndusry='"</span> <span class="token operator">+</span> custIndustry <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custLevel='"</span> <span class="token operator">+</span> custLevel <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custName='"</span> <span class="token operator">+</span> custName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custPhone='"</span> <span class="token operator">+</span> custPhone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custSource='"</span> <span class="token operator">+</span> custSource <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、编写一个符合spring data jpa的dao层接口。</strong></p><ul><li>只需要编写dao层接口，不需要编写dao层接口的实现类</li><li>dao层接口规范<ul><li>需要继承两个接口（<code>JpaRepositoty</code>，<code>JpaSpecificationExecutor</code>）</li><li>需要提供相应的泛型</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaSpecificationExecutor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 符合SpringData Jpa的dao层接口规范 *  JpaRepository&lt;操作的实体类类型，实体类中主键属性的类型> *      封装了基本的CRUD操作 *  JpaSpecificationExecutor&lt;操作的实体类类型> *      封装了复杂查询（分页） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Customer<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>5、测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>CustomerDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//声明spring提供的单元测试环境</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定spring容器的配置信息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDaoTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerDao customerDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>2l<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * save：保存或更新     *  根据传递的对象是否存在主键id，若不存在id主键属性：保存，反之，根据id查询数据，更新数据     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustId</span><span class="token punctuation">(</span>3l<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustIndustry</span><span class="token punctuation">(</span><span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//customer.setCustLevel("Lv2");</span>        customer<span class="token punctuation">.</span><span class="token function">setCustLevel</span><span class="token punctuation">(</span><span class="token string">"Lv3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        customerDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询所有     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Customer customer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-2、SpringData-Jpa的运行过程和原理"><a href="#4-2、SpringData-Jpa的运行过程和原理" class="headerlink" title="4-2、SpringData Jpa的运行过程和原理"></a>4-2、SpringData Jpa的运行过程和原理</h2><ul><li>通过JdkDynamicAopProxy的invoke方法创建一个动态代理对象</li><li>SimpleJpaRepository当中封装了JPA的操作（借助JPA的api完成数据库的CRUD）</li><li>通过hibernate完成数据库操作（封装了JDBC）</li></ul><h2 id="4-3、复杂查询"><a href="#4-3、复杂查询" class="headerlink" title="4-3、复杂查询"></a>4-3、复杂查询</h2><ul><li><p>借助接口中定义好的方法完成查询</p></li><li><p>jpql的查询方式</p><p>需要将JPQL语句配置到接口方法上</p><ul><li>特有的查询：需要在dao接口上配置方法</li><li>在新添加的方法上，使用注解的形式配置jpql查询语句</li><li>注解：@Query</li></ul></li><li><p>sql语句的查询</p><ul><li><p>特有的查询：需要在dao接口上配置方法</p></li><li><p>在新添加的方法上，使用注解的形式配置sql查询语句</p></li><li><p>注解：@Query</p><p>value：jpql语句 | sql语句</p><p>nativeQuery：false | true（使用本地查询：sql查询）</p></li></ul></li><li><p>方法名称规则查询</p><ul><li>是对jpql查询，更加深入的一层封装</li><li>只需按照SpringData Jpa提供的方法名称定义方法，不需要再配置jpql语句，完成查询</li></ul><p>findBy开头：代笔查询，对象中属性的名称（首字符大写），含义：根据属性名称进行查询</p></li></ul><p>具体的关键字，使用方法和生产成SQL如下：</p><table><thead><tr><th align="center">关键字</th><th align="center">举例</th><th align="center">JPQL</th></tr></thead><tbody><tr><td align="center">And</td><td align="center">findByLastnameAndFirstname</td><td align="center">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td align="center">Or</td><td align="center">findByLastnameOrFirstname</td><td align="center">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td align="center">Is,Equals</td><td align="center">findByFirstnameIs,findByFirstnameEquals</td><td align="center">… where x.firstname = ?1</td></tr><tr><td align="center">Between</td><td align="center">findByStartDateBetween</td><td align="center">… where x.startDate between ?1 and ?2</td></tr><tr><td align="center">LessThan</td><td align="center">findByAgeLessThan</td><td align="center">… where x.age &lt; ?1</td></tr><tr><td align="center">LessThanEqual</td><td align="center">findByAgeLessThanEqual</td><td align="center">… where x.age ⇐ ?1</td></tr><tr><td align="center">GreaterThan</td><td align="center">findByAgeGreaterThan</td><td align="center">… where x.age &gt; ?1</td></tr><tr><td align="center">GreaterThanEqual</td><td align="center">findByAgeGreaterThanEqual</td><td align="center">… where x.age &gt;= ?1</td></tr><tr><td align="center">After</td><td align="center">findByStartDateAfter</td><td align="center">… where x.startDate &gt; ?1</td></tr><tr><td align="center">Before</td><td align="center">findByStartDateBefore</td><td align="center">… where x.startDate &lt; ?1</td></tr><tr><td align="center">IsNull</td><td align="center">findByAgeIsNull</td><td align="center">… where x.age is null</td></tr><tr><td align="center">IsNotNull,NotNull</td><td align="center">findByAge(Is)NotNull</td><td align="center">… where x.age not null</td></tr><tr><td align="center">Like</td><td align="center">findByFirstnameLike</td><td align="center">… where x.firstname like ?1</td></tr><tr><td align="center">NotLike</td><td align="center">findByFirstnameNotLike</td><td align="center">… where x.firstname not like ?1</td></tr><tr><td align="center">StartingWith</td><td align="center">findByFirstnameStartingWith</td><td align="center">… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td align="center">EndingWith</td><td align="center">findByFirstnameEndingWith</td><td align="center">… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td align="center">Containing</td><td align="center">findByFirstnameContaining</td><td align="center">… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td align="center">OrderBy</td><td align="center">findByAgeOrderByLastnameDesc</td><td align="center">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td align="center">Not</td><td align="center">findByLastnameNot</td><td align="center">… where x.lastname &lt;&gt; ?1</td></tr><tr><td align="center">In</td><td align="center">findByAgeIn(Collection ages)</td><td align="center">… where x.age in ?1</td></tr><tr><td align="center">NotIn</td><td align="center">findByAgeNotIn(Collection age)</td><td align="center">… where x.age not in ?1</td></tr><tr><td align="center">TRUE</td><td align="center">findByActiveTrue()</td><td align="center">… where x.active = true</td></tr><tr><td align="center">FALSE</td><td align="center">findByActiveFalse()</td><td align="center">… where x.active = false</td></tr><tr><td align="center">IgnoreCase</td><td align="center">findByFirstnameIgnoreCase</td><td align="center">… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><p>dao层接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaSpecificationExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Modifying<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Query<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 符合SpringData Jpa的dao层接口规范 *  JpaRepository&lt;操作的实体类类型，实体类中主键属性的类型> *      封装了基本的CRUD操作 *  JpaSpecificationExecutor&lt;操作的实体类类型> *      封装了复杂查询（分页） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Customer<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据客户名称查询客户     * jpql：form Customer where custName = ?     * 配置jpql语句，使用@Query注解     */</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"from Customer where custName = ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Customer <span class="token function">findJpql</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据客户名称和客户id查询客户     * jpql：from Customer where custName = ? and custId = ?     * 对于多个占位符参数     *  赋值时，默认情况下，占位符的位置需要和方法参数中的位置保持一致     *     *  可以指定占位符参数的位置     *      ? 索引的方式，指定占位的取值的来源     */</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"from Customer where custName = ? and custId = ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Customer <span class="token function">findCustomerByNameAndId</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"from Customer where custName = ?2 and custId = ?1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Customer <span class="token function">findCustomerByNameAndId</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用jpql完成更新操作     * jpql：update Customer set custName = ? where custId = ?     *     * @Query：代表的是进行查询     * @Modifying：当前执行的是一个更新操作     */</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update Customer set custName = ?2 where custId = ?1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateCustomer</span><span class="token punctuation">(</span>Long custId<span class="token punctuation">,</span>String custName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用sql的形式查询     * 查询全部的客户     * sql：select * from cst_customer     */</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select * from cst_customer"</span><span class="token punctuation">,</span>nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">findSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select * from cst_customer where cust_name like ?1"</span><span class="token punctuation">,</span>nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">findSql</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 方法名的约定：     *  findBy：查询     *      对象中的属性名（首字母大写）：查询的条件     *      默认情况下，使用等于的方式查询     *  findByCustName 根据客户名称查询     *  在SpringData Jpa的运行阶段，会根据方法名称进行解析，findBy属性名称 from xxx（实体类） where custName =     *     *  1、findBy +属性名称（根据属性名称进行完成匹配的查询=）     *  2、findBy + 属性名称 +"查询方式（Like | isnull）"     *     findByCustNameLike     *  3、多条件查询     *      findBy + 属性名 + “查询方式” + “多条件的连接符（and | or）” + 属性名 + “查询方式”     */</span>    <span class="token keyword">public</span> Customer <span class="token function">findByCustName</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">findByCustNameLike</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据用户名称模糊匹配以及客户所属行业进行查询</span>    <span class="token keyword">public</span> Customer <span class="token function">findByCustNameLikeAndCustIndustry</span><span class="token punctuation">(</span>String custName<span class="token punctuation">,</span>String custIndustry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>CustomerDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Rollback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//声明spring提供的单元测试环境</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定spring容器的配置信息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpqlTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerDao customerDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindJpql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findJpql</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByNameAndId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Customer customer = customerDao.findCustomerByNameAndId("张三", 2l);</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findCustomerByNameAndId</span><span class="token punctuation">(</span> 2l<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * spring data jpa中使用jpql完成更新/删除操作     *  需要手动添加事务的支持     *  默认会执行结束之后，回滚事务     *     * @Rollback：设置是否自动回滚     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//添加事务支持</span>    <span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        customerDao<span class="token punctuation">.</span><span class="token function">updateCustomer</span><span class="token punctuation">(</span>3l<span class="token punctuation">,</span><span class="token string">"李四1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindSqlByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findSql</span><span class="token punctuation">(</span><span class="token string">"张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试方法命名规则的查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNaming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findByCustName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByCustNameLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findByCustNameLike</span><span class="token punctuation">(</span><span class="token string">"张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Customer customer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByCustNameLikeAndCustIndustry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findByCustNameLikeAndCustIndustry</span><span class="token punctuation">(</span><span class="token string">"%三"</span><span class="token punctuation">,</span> <span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-4、Specifications动态查询"><a href="#4-4、Specifications动态查询" class="headerlink" title="4-4、Specifications动态查询"></a>4-4、Specifications动态查询</h2><p>在Spring Data Jpa中可以通过JpaSpecificationExecutor接口查询。相比JPQL，其优势是类型安装，更加的面向对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Pageable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Specification<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *    JpaSpecificationExecutor中定义的方法 **/</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//根据条件查询一个对象</span>     T <span class="token function">findOne</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//根据条件查询集合</span>     List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//根据条件分页查询</span>     Page<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span> spec<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//排序查询查询</span>     List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span> spec<span class="token punctuation">,</span> Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//统计查询</span>     <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span>Specification<span class="token operator">&lt;</span>T<span class="token operator">></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于JpaSpecificationExecutor，这个接口基本是围绕着Specification接口来定义的。可以简单的理解为，Specification构造的就是查询条件。</p><p>Specification接口中只定义了一个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造查询条件</span><span class="token comment" spellcheck="true">/***    root    ：Root接口，代表查询的根对象，可以通过root获取实体中的属性*    query    ：代表一个顶层查询对象，用来自定义查询*    cb        ：用来构建查询，此对象里有很多条件方法**/</span><span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>T<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> query<span class="token punctuation">,</span> CriteriaBuilder cb<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法对应关系：</p><table><thead><tr><th align="center">方法名称</th><th align="center">Sql对应关系</th></tr></thead><tbody><tr><td align="center">equle</td><td align="center">filed = value</td></tr><tr><td align="center">gt（greaterThan ）</td><td align="center">filed &gt; value</td></tr><tr><td align="center">lt（lessThan ）</td><td align="center">filed &lt; value</td></tr><tr><td align="center">ge（greaterThanOrEqualTo ）</td><td align="center">filed &gt;= value</td></tr><tr><td align="center">le（ lessThanOrEqualTo）</td><td align="center">filed &lt;= value</td></tr><tr><td align="center">notEqule</td><td align="center">filed != value</td></tr><tr><td align="center">like</td><td align="center">filed like value</td></tr><tr><td align="center">notLike</td><td align="center">filed not like value</td></tr></tbody></table><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>CustomerDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Specification<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>criteria<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpecTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerDao customerDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据条件查询单个对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//匿名内部类</span>        <span class="token comment" spellcheck="true">/**         * 自定义查询条件：         * 1、实现Specification接口（提供泛型：查询的对象类型）         * 2、实现toPredicate方法（构造查询方法）         * 3、需要借助方法参数中的两个参数（root：获取需要查询的对象属性，CriteriaBuilder：构造查询条件的，内部封装了很多的查询条件（模糊匹配，精准查询））         *         * 根据客户名称查询，查询客户名为张三的客户         *  查询条件         *      1、查询方式，criteriaBuilder对象         *      2、比较的属性名称，root对象         */</span>        Specification<span class="token operator">&lt;</span>Customer<span class="token operator">></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Customer<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> criteriaQuery<span class="token punctuation">,</span> CriteriaBuilder criteriaBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1、获取比较的属性</span>                Path<span class="token operator">&lt;</span>Object<span class="token operator">></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2、构造查询条件</span>                Predicate predicate <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custName<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行精准的匹配（比较的属性，比较的属性取值）</span>                <span class="token keyword">return</span> predicate<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>specification<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据客户名称和客户所属行业进行查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Specification<span class="token operator">&lt;</span>Customer<span class="token operator">></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Customer<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> criteriaQuery<span class="token punctuation">,</span> CriteriaBuilder criteriaBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Path<span class="token operator">&lt;</span>Object<span class="token operator">></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Path<span class="token operator">&lt;</span>Object<span class="token operator">></span> custIndustry <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"custIndustry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//构造查询</span>                Predicate p1 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custName<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Predicate p2 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custIndustry<span class="token punctuation">,</span> <span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将多个查询条件组合到一起：组合(满足条件一并且满足条件二：与关系；满足条件二或满足条件二：或关系)</span>                Predicate predicate <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以与的形式拼接多个查询条件</span>                <span class="token keyword">return</span> predicate<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>specification<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据客户名称进行模糊查询，返回客户列表     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Specification<span class="token operator">&lt;</span>Customer<span class="token operator">></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Customer<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> criteriaQuery<span class="token punctuation">,</span> CriteriaBuilder criteriaBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Path<span class="token operator">&lt;</span>Object<span class="token operator">></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Predicate predicate <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>custName<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> predicate<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*List&lt;Customer> list = customerDao.findAll(specification);        for (Customer customer : list) {            System.out.println(customer);        }*/</span>        <span class="token comment" spellcheck="true">//排序</span>        <span class="token comment" spellcheck="true">//第一个参数：排序的顺序（倒序Sort.Direction.DESC、正序Sort.Direction.ASC）；第二个参数：排序的属性名称</span>        Sort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">,</span> <span class="token string">"custId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>specification<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Customer customer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>分页查询</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 分页查询 * findAll(Specification,Pageable)：带有条件的分页 * findAll(Specification)：没有条件的分页 *  Specification：查询条件 *  Pageable：分页参数 * 返回：Page，SpringData JPA封装了pageBean对象，数据列表，总条数 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Specification specification <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PageRequest对象是Pageable接口的实现类</span>    <span class="token comment" spellcheck="true">/**     * 创建PageRequest的过程中，需要调用它的构造方法传入两个参数     *  第一个参数：当前查询的页数（从0开始）     *  第二个参数：每页查询的数量     */</span>    Pageable pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分页查询</span>    Page<span class="token operator">&lt;</span>Customer<span class="token operator">></span> page <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取总条数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据集合列表</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取总页数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="五、多表操作"><a href="#五、多表操作" class="headerlink" title="五、多表操作"></a>五、多表操作</h1><h2 id="5-1、分析步骤"><a href="#5-1、分析步骤" class="headerlink" title="5-1、分析步骤"></a>5-1、分析步骤</h2><ul><li>明确表关系</li><li>确定表关系（描述 外键|中间表）</li><li>编写实体类，在实体类中描述表关系（包含关系）</li><li>配置映射关系</li></ul><h2 id="5-2、映射注解说明"><a href="#5-2、映射注解说明" class="headerlink" title="5-2、映射注解说明"></a>5-2、映射注解说明</h2><p><strong>@OneToMany:</strong></p><p>作用：建立一对多的关系映射</p><p>属性：</p><ul><li>targetEntityClass：指定多的多方的类的字节码</li><li>mappedBy：指定从表实体类中引用主表对象的名称。</li><li>cascade：指定要使用的级联操作</li><li>fetch：指定是否采用延迟加载</li><li>orphanRemoval：是否使用孤儿删除</li></ul><p><strong>@ManyToOne</strong></p><p>作用：建立多对一的关系</p><p>属性：</p><ul><li>targetEntityClass：指定一的一方实体类字节码</li><li>cascade：指定要使用的级联操作</li><li>fetch：指定是否采用延迟加载</li><li>optional：关联是否可选。如果设置为false，则必须始终存在非空关系。</li></ul><p><strong>@JoinColumn</strong></p><p> 作用：用于定义主键字段和外键字段的对应关系。</p><p> 属性：</p><ul><li>name：指定外键字段的名称</li><li>referencedColumnName：指定引用主表的主键字段名称</li><li>unique：是否唯一。默认值不唯一</li><li>nullable：是否允许为空。默认值允许。</li><li>insertable：是否允许插入。默认值允许。</li><li>updatable：是否允许更新。默认值允许。</li><li>columnDefinition：列的定义信息。</li></ul><h2 id="5-3、一对多"><a href="#5-3、一对多" class="headerlink" title="5-3、一对多"></a>5-3、一对多</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>Customer.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 1、实体类和表的映射关系 * @Entity * @Table * 2、类中属性和表中字段的映射关系 * @Id * @GenerateValue * @Column */</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cst_customer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token comment" spellcheck="true">//配置客户和联系人的关系（一对多关系）</span>    <span class="token comment" spellcheck="true">/**     * 使用注解的形式配置多表关系     *  1、声明关系     * @OneToMany：配置一对多关系，targetEntity：对方对象的字节码对象     *  2、配置外键（中间表）     * @JoinColumn：配置外键，name：外键字段名称，referencedColumnName：参照的主表的主键字段名称     *     * 在客户实体类上（一）添加了外键的配置，所以对于客户而言，也具备了维护外键的作用     */</span>    <span class="token comment" spellcheck="true">//@OneToMany(targetEntity = Contacts.class)</span>    <span class="token comment" spellcheck="true">//@JoinColumn(name = "cont_cust_id",referencedColumnName = "cust_id")</span>    <span class="token comment" spellcheck="true">//放弃外键维护，mappedBy：对方配置关系的属性名称</span>    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"customer"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> contacts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> <span class="token function">getContacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contacts<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContacts</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> contacts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contacts <span class="token operator">=</span> contacts<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer{"</span> <span class="token operator">+</span>                <span class="token string">"custId="</span> <span class="token operator">+</span> custId <span class="token operator">+</span>                <span class="token string">", custAddress='"</span> <span class="token operator">+</span> custAddress <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custIndusry='"</span> <span class="token operator">+</span> custIndustry <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custLevel='"</span> <span class="token operator">+</span> custLevel <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custName='"</span> <span class="token operator">+</span> custName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custPhone='"</span> <span class="token operator">+</span> custPhone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", custSource='"</span> <span class="token operator">+</span> custSource <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Contacts.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cst_contacts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contacts</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long contId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_gender"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contGender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_Phone"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contPhone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_email"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contEmail<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_position"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contPosition<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_memo"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String contMemo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 配置联系人到客户的多对一关系     *  使用注解的形式配置多对一关系     *  1、配置表关系     * @ManyToOne：配置多对一关系，targetEntity：对方的实体类字节码     *  2、配置外键（中间表）     * @     *     * 配置外键的过程，配置到多的一方，就会在多的乙方维护外键     */</span>    <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>targetEntity <span class="token operator">=</span> Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cont_cust_id"</span><span class="token punctuation">,</span>referencedColumnName <span class="token operator">=</span> <span class="token string">"cust_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Customer customer<span class="token punctuation">;</span>    <span class="token keyword">public</span> Long <span class="token function">getContId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContId</span><span class="token punctuation">(</span>Long contId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contId <span class="token operator">=</span> contId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContName</span><span class="token punctuation">(</span>String contName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contName <span class="token operator">=</span> contName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contGender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContGender</span><span class="token punctuation">(</span>String contGender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contGender <span class="token operator">=</span> contGender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContPhone</span><span class="token punctuation">(</span>String contPhone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contPhone <span class="token operator">=</span> contPhone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contEmail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContEmail</span><span class="token punctuation">(</span>String contEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contEmail <span class="token operator">=</span> contEmail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContPosition</span><span class="token punctuation">(</span>String contPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contPosition <span class="token operator">=</span> contPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContMemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contMemo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContMemo</span><span class="token punctuation">(</span>String contMemo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contMemo <span class="token operator">=</span> contMemo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Customer <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Contacts{"</span> <span class="token operator">+</span>                <span class="token string">"contId="</span> <span class="token operator">+</span> contId <span class="token operator">+</span>                <span class="token string">", contName='"</span> <span class="token operator">+</span> contName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", contGender='"</span> <span class="token operator">+</span> contGender <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", contPhone='"</span> <span class="token operator">+</span> contPhone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", contEmail='"</span> <span class="token operator">+</span> contEmail <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", contPosition='"</span> <span class="token operator">+</span> contPosition <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", contMemo='"</span> <span class="token operator">+</span> contMemo <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CustomerDao.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaSpecificationExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Modifying<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Query<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 符合SpringData Jpa的dao层接口规范 *  JpaRepository&lt;操作的实体类类型，实体类中主键属性的类型> *      封装了基本的CRUD操作 *  JpaSpecificationExecutor&lt;操作的实体类类型> *      封装了复杂查询（分页） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Customer<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>ContactsDao.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Contacts<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaSpecificationExecutor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ContactsDao</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Contacts<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span>JpaSpecificationExecutor<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>ContactsDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>CustomerDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Contacts<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Rollback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneToManyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerDao customerDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ContactsDao contactsDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存一个客户，保存一个联系人     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//配置事务</span>    <span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不自动回滚</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Contacts contacts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contacts<span class="token punctuation">.</span><span class="token function">setContName</span><span class="token punctuation">(</span><span class="token string">"李五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 配置客户到联系人的关系         *  从客户的角度：发送两天insert语句，发送一条更新语句更新外键         */</span>        customer<span class="token punctuation">.</span><span class="token function">getContacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>        customerDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        contactsDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//配置事务</span>    <span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不自动回滚</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Contacts contacts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contacts<span class="token punctuation">.</span><span class="token function">setContName</span><span class="token punctuation">(</span><span class="token string">"李五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 配置联系人到客户的关系（多对一）         *  只发送了两条insert语句         */</span>        contacts<span class="token punctuation">.</span><span class="token function">setCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        customerDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        contactsDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**会有一条多余的update语句     * 由于一的一方可以维护外键：会发送update语句     * 只需要在一的一方放弃维护即可     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//配置事务</span>    <span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不自动回滚</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Contacts contacts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contacts<span class="token punctuation">.</span><span class="token function">setContName</span><span class="token punctuation">(</span><span class="token string">"李五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contacts<span class="token punctuation">.</span><span class="token function">setCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//由于配置了多的一方到一的一方的关联关系（当保存时，就已经对外键赋值）</span>        customer<span class="token punctuation">.</span><span class="token function">getContacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//由于配置了一的一方到多的一方的关联关系（发送一条update语句）</span>        customerDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        contactsDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p>删除从表数据，可以随时任意删除</p></li><li><p>删除主表数据：</p><ul><li><p>有从表数据：1、在默认情况下，它会把外键字段置为null，然后删除主表数据。如果在数据库的表结构上，外键字段有非空约束，默认情况就会报错了。</p><p>2、如果配置了放弃维护关联关系的权力，则不能删除（与外键字段是否允许为null没有关系）因为删除时，它根本不会去更新从表的外键字段。</p><p>3、如果还需删除，则使用级联删除。</p></li></ul></li><li><p>没有从表的数据引用：随便删</p></li></ul><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><p>级联操作：操作一个对象的同时操作它的关联对象。</p><p>级联操作：</p><ul><li>需要区分操作主体</li><li>需要在操作主体的实体类上，添加级联属性（需要添加到多表映射关系的注解上）</li><li>cascade（配置级联）</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * cascade:配置级联操作 * CascadeType.MERGE    级联更新 * CascadeType.PERSIST    级联保存： * CascadeType.REFRESH 级联刷新： * CascadeType.REMOVE    级联删除： * CascadeType.ALL        包含所有 */</span><span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"customer"</span><span class="token punctuation">,</span> cascade <span class="token operator">=</span> CascadeType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span></code></pre><h2 id="5-4、多对多"><a href="#5-4、多对多" class="headerlink" title="5-4、多对多"></a>5-4、多对多</h2><h3 id="映射注解"><a href="#映射注解" class="headerlink" title="映射注解"></a>映射注解</h3><p><strong>@ManyToMany</strong></p><p>作用：用于映射多对多关系</p><p>属性：</p><ul><li>cascade：配置级联操作。</li><li>fetch：配置是否采用延迟加载。</li><li>targetEntity：配置目标的实体类。映射多对多的时候不用写。</li></ul><p><strong>@JoinTable</strong></p><p> 作用：针对中间表的配置</p><p> 属性：</p><ul><li>nam：配置中间表的名称</li><li>joinColumns：中间表的外键字段关联当前实体类所对应表的主键字段</li><li>inverseJoinColumn：中间表的外键字段关联对方表的主键字段</li></ul><p><strong>@JoinColumn</strong></p><p>作用：用于定义主键字段和外键字段的对应关系。</p><p>属性：</p><ul><li>name：指定外键字段的名称</li><li>referencedColumnName：指定引用主表的主键字段名称</li><li>unique：是否唯一。默认值不唯一</li><li>nullable：是否允许为空。默认值允许。</li><li>insertable：是否允许插入。默认值允许。</li><li>updatable：是否允许更新。默认值允许。</li><li>columnDefinition：列的定义信息。 </li></ul><h2 id="5-5、多表查询"><a href="#5-5、多表查询" class="headerlink" title="5-5、多表查询"></a>5-5、多表查询</h2><blockquote><p>对象导航查询</p></blockquote><p>对象图导航检索方式是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。例如：我们通过ID查询方式查出一个客户，可以调用Customer类中的getLinkMans()方法来获取该客户的所有联系人。对象导航查询的使用要求是：两个对象之间必须存在关联关系。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> CustomerDao customerDao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询一个客户，获取该客户下的所有联系人</span><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//由于是在java代码中测试，为了解决no session问题，将操作配置到同一个事务中</span><span class="token annotation punctuation">@Transactional</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Customer customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>5l<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> contactsSets <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getContacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象导航查询</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Contacts contacts <span class="token operator">:</span> contactsSets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ContactsDao contactsDao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询一个联系人，获取该联系人的所有客户</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Contacts contacts <span class="token operator">=</span> contactsDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>4l<span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer customer <span class="token operator">=</span> contacts<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象导航查询</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>问题1：查询客户时，要不要把联系人查询出来？</strong></p><p>分析：如果不查的话，在用的时候还要自己写代码，调用方法去查询。如果查出来的，不使用时又会白白的浪费了服务器内存。</p><p>解决：采用延迟加载的思想。通过配置的方式来设定当我们在需要使用时，发起真正的查询。</p><p>配置方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 在客户对象的@OneToMany注解中添加fetch属性     *         FetchType.EAGER    ：立即加载     *         FetchType.LAZY    ：延迟加载     */</span><span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy<span class="token operator">=</span><span class="token string">"customer"</span><span class="token punctuation">,</span>fetch<span class="token operator">=</span>FetchType<span class="token punctuation">.</span>EAGER<span class="token punctuation">)</span><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> contacts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>问题2：查询联系人时，要不要把客户查询出来？</strong></p><p>分析：例如：查询联系人详情时，肯定会看看该联系人的所属客户。如果不查的话，在用的时候还要自己写代码，调用方法去查询。如果查出来的话，一个对象不会消耗太多的内存。而且多数情况下都是要使用的。</p><p>解决： 采用立即加载的思想。通过配置的方式来设定，只要查询从表实体，就把主表实体对象同时查出来</p><p>配置方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 在联系人对象的@ManyToOne注解中添加fetch属性     *         FetchType.EAGER    ：立即加载     *         FetchType.LAZY    ：延迟加载     */</span><span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>targetEntity<span class="token operator">=</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>fetch<span class="token operator">=</span>FetchType<span class="token punctuation">.</span>EAGER<span class="token punctuation">)</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cont_cust_id"</span><span class="token punctuation">,</span>referencedColumnName<span class="token operator">=</span><span class="token string">"cust_id"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Customer customer<span class="token punctuation">;</span></code></pre><blockquote><p>使用Specification查询</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Specification的多表查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Specification<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Contacts<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> query<span class="token punctuation">,</span> CriteriaBuilder cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Join代表链接查询，通过root对象获取</span>            <span class="token comment" spellcheck="true">//创建的过程中，第一个参数为关联对象的属性名称，第二个参数为连接查询的方式（left，inner，right）</span>            <span class="token comment" spellcheck="true">//JoinType.LEFT : 左外连接,JoinType.INNER：内连接,JoinType.RIGHT：右外连接</span>            Join<span class="token operator">&lt;</span>Contacts<span class="token punctuation">,</span> Customer<span class="token operator">></span> join <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">,</span> JoinType<span class="token punctuation">.</span>INNER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>join<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"传智播客1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Contacts<span class="token operator">></span> list <span class="token operator">=</span> contactsDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Contacts linkMan <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkMan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;JPA&lt;/em&gt;(Java Persistence API)意即Java持久化API。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JPA" scheme="https://lskjwp.gitee.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://lskjwp.gitee.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/12195400/"/>
    <id>https://lskjwp.gitee.io/archives/12195400/</id>
    <published>2021-10-06T09:25:05.000Z</published>
    <updated>2021-11-14T07:16:13.161Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1gh411U7JD" target="_blank" rel="noopener">黑马程序员</a> </p><a id="more"></a><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1、什么是React"><a href="#1、什么是React" class="headerlink" title="1、什么是React"></a>1、什么是React</h2><blockquote><p>React是一个用于构建用户界面的JavaScript库。</p></blockquote><ul><li>本身只处理 UI</li><li>不关系路由</li><li>不处理 ajax</li></ul><p>React主要用来写HTML页面（主要用于构建UI），或构建Web应用。</p><p>如果从MVC的角度来看，React仅仅是一个视图层（V），也就是只负责视图的渲染，而并非提供了完整的M和C的功能。</p><p>React起源于Facebook的内部项目，后又用来架设Instagram的网站，并于2013年5月开源。</p><h2 id="2、React的特点"><a href="#2、React的特点" class="headerlink" title="2、React的特点"></a>2、React的特点</h2><blockquote><p>声明（配置）式设计</p></blockquote><p>只需要描述UI（HTML）看起来是什么样，就如同写HTML一般。</p><p>React负责渲染UI，并在数据变化时更新UI。</p><blockquote><p>基于组件（组件化）</p></blockquote><ul><li>组件时React最重要的内容</li><li>组件表示页面中的部分内容</li><li>组合、复用多个组件，可以实现完整的页面功能</li></ul><blockquote><p>JSX</p></blockquote><ul><li>一种预编译Javascript语言，允许JavaScript和Html混搭</li><li>模板中就是Javascript逻辑</li></ul><blockquote><p>单向数据流</p></blockquote><ul><li>组件传值</li><li>所有数据都是单向的，组件传递的数据都是单向的</li><li>Vue也是单向数据流</li><li>没有双向数据绑定</li></ul><blockquote><p>学习一次，随处使用</p></blockquote><ul><li>使用React可以开发Web应用</li><li>使用React可以开发移动端原生应用（react-native）</li><li>使用React可以开发VR（虚拟现实）应用（react 360）</li></ul><h2 id="3、React与Vue对比"><a href="#3、React与Vue对比" class="headerlink" title="3、React与Vue对比"></a>3、React与Vue对比</h2><blockquote><p>技术层面</p></blockquote><ul><li><p>Vue生产力更高（更少的代码实现更强劲的功能）</p></li><li><p>两个框架的效率都采用了虚拟DOM</p></li><li><p>Vue与React都支持组件化</p></li><li><p>数据绑定</p><ul><li>都支持数据驱动视图</li><li>Vue支持表单控件双向数据绑定</li><li>React不支持双向数据绑定</li></ul></li><li><p>两者的核心库都很小，都是渐进式JavaScript库</p></li><li><p>React采用JSX语法来编写组件</p></li><li><p>Vue采用单文件组件</p><ul><li><code>template</code></li><li><code>script</code></li><li><code>style</code></li></ul></li></ul><h1 id="二、React的基本使用"><a href="#二、React的基本使用" class="headerlink" title="二、React的基本使用"></a>二、React的基本使用</h1><h2 id="1、React的安装"><a href="#1、React的安装" class="headerlink" title="1、React的安装"></a>1、React的安装</h2><p>安装命令：</p><pre><code>npm i react react-dom</code></pre><ul><li>react包是核心，提供创建元素、组件等功能</li><li>react-dom包提供DOM相关功能等</li></ul><h2 id="2、React的使用"><a href="#2、React的使用" class="headerlink" title="2、React的使用"></a>2、React的使用</h2><blockquote><p>1、引入react和react-dom两个js文件</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>2、创建React元素</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'hello react'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>3、渲染React元素到页面中</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'hello react'</span><span class="token punctuation">)</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="三、JSX"><a href="#三、JSX" class="headerlink" title="三、JSX"></a>三、JSX</h1><blockquote><p><strong>createElement()存在问题</strong></p><ul><li>繁琐不简洁</li><li>不直观，无法一眼看出所描述的结构</li><li>不优雅，用户体验不好</li></ul></blockquote><p>JSX是JavaScript XML的简写，表示在JavaScript中写XML（HTML）格式的代码。</p><ul><li>声明式语法更加直观，与HTML结构相同</li><li>降低了学习成本，提升开发效率</li></ul><p>HTML语言直接写在JavaScript语言中，不加任何引号，这就是JSX语法。它允许HTML与JavaScript混写。</p><p><strong>JSX是React的核心内容</strong>。</p><blockquote><p><strong>为什么脚手架中可以使用JSX语法？</strong></p><p>1、JSX不是标准的ECMAScript语法，它是ECMAScript的语法扩展。</p><p>2、需要使用babel编译处理后，才能在浏览器环境中使用。</p><p>3、create-react-app脚手架中已经默认有该配置，无需手动配置。</p><p>4、编译JSX语法的包为：@babel/preset-react。</p></blockquote><h2 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h2><ul><li><p>非模块化环境</p><ul><li><code>babel-standalone</code></li></ul></li><li><p>模块化环境</p><ul><li><code>babel-perset-react</code></li></ul></li><li><p>Babel REPL赋值查看编译结果</p></li></ul><h2 id="2、基本语法规则"><a href="#2、基本语法规则" class="headerlink" title="2、基本语法规则"></a>2、基本语法规则</h2><ul><li>必须只能有一个根节点</li><li>遇到HTML标签（以<code>&lt;</code>开头）就用HTML规则解析<ul><li>单标签不能省略结束标签</li></ul></li><li>遇到代码块（以<code>{</code>开头），就用JavaScript规则解析</li><li>JSX允许直接在模板中插入一个JavaScript变量<ul><li>如果这个变量是一个数组，则会展开这个数组的所有成员添加到模板中</li></ul></li><li>单标签必须结束<code>/&gt;</code></li></ul><h2 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h2><blockquote><p>使用步骤</p></blockquote><p>1、使用JSX语法创建react元素。</p><pre class=" language-html"><code class="language-html">const title = <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello JSX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>2、使用ReactDOM.render()方法渲染react元素到页面中。</p><pre class=" language-html"><code class="language-html">ReactDOM.render(title,root)</code></pre><blockquote><p><strong>注意</strong></p><ul><li>React元素的属性名使用驼峰命名法</li><li>特殊属性名：class-&gt;className、for-&gt;htmlFor、tabindex-&gt;tabIndex</li><li>没有子节点的React元素可以使用/&gt;结束</li><li>推荐使用小括号<code>()</code>包裹JSX，从而避免JS中的自动插入分号陷阱</li></ul></blockquote><h2 id="3、JSX中嵌入JavaScript"><a href="#3、JSX中嵌入JavaScript" class="headerlink" title="3、JSX中嵌入JavaScript"></a>3、JSX中嵌入JavaScript</h2><p>语法：<code>{JavaScript表达式}</code>，语法中是<strong>单大括号</strong>，不是双大括号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token comment" spellcheck="true">//JSX中使用JavaScript表达式</span><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>hello JSX<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>        <span class="token punctuation">{</span>content<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//渲染react元素</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>注意</strong></p><ul><li>单大括号中可以使用任意的JavaScript表达式</li><li>JSX自身也是js表达式</li><li>js中的对象是一个例外，一般只会出现在style属性中</li><li>不能在<code>{}</code>中出现语句，例如：if/for等</li></ul></blockquote><h2 id="4、JSX的条件渲染"><a href="#4、JSX的条件渲染" class="headerlink" title="4、JSX的条件渲染"></a>4、JSX的条件渲染</h2><p>条件渲染：根据条件渲染特定的JSX结构。</p><p>可以使用<code>if/else</code>或<code>三元运算符</code>或<code>逻辑与运算符</code>来实现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 条件渲染</span><span class="token comment" spellcheck="true">//if else</span><span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> loadData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//三元表达式</span><span class="token keyword">const</span> loadDataTest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> isLoading <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>数据加载完成，此处显示加载后的数据<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//逻辑与运算符</span><span class="token keyword">const</span> loadDataT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> isLoading <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="5、JSX的列表渲染"><a href="#5、JSX的列表渲染" class="headerlink" title="5、JSX的列表渲染"></a>5、JSX的列表渲染</h2><ul><li><p>如果药渲染一组数据，应该使用数组的map()方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>content<span class="token punctuation">:</span><span class="token string">'test1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>content<span class="token punctuation">:</span><span class="token string">'test2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>content<span class="token punctuation">:</span><span class="token string">'test3'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token punctuation">{</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item  <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">)</span></code></pre><blockquote><p>注意</p></blockquote><p>渲染列表时应该添加key属性，key属性的值要保证唯一。<strong>尽量避免使用索引号作为key</strong></p><p>原则：map()遍历谁，就给谁添加key属性。</p></li></ul><h2 id="6、JSX的样式处理"><a href="#6、JSX的样式处理" class="headerlink" title="6、JSX的样式处理"></a>6、JSX的样式处理</h2><h3 id="行内样式-style"><a href="#行内样式-style" class="headerlink" title="行内样式 style"></a>行内样式 style</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span> <span class="token string">'skyblue'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        JSX的样式处理    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span></code></pre><h3 id="类名-className"><a href="#类名-className" class="headerlink" title="类名 className"></a>类名 className</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入css</span><span class="token keyword">import</span> <span class="token string">'css文件的相对路径'</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>        JSX的样式处理    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.title</span></span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="四、React组件"><a href="#四、React组件" class="headerlink" title="四、React组件"></a>四、React组件</h1><ul><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点：可复用、独立、可组合</li></ul><h2 id="1、使用函数创建组件"><a href="#1、使用函数创建组件" class="headerlink" title="1、使用函数创建组件"></a>1、使用函数创建组件</h2><p>函数组件：使用js的函数（或箭头函数）创建的组件</p><ul><li>约定1：<strong>函数名称必须以大写字母开头</strong>，React据此区分组件和普通的React的元素</li><li>约定2：函数组件<strong>必须有返回值</strong>，表示该组件的结构</li><li>如果返回值为null，表示不渲染任何内容</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            这是一个函数组件        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>渲染函数组件：用函数名作为组件标签名</li><li>组件标签可以是单标签也可以是双标签</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            这是一个函数组件        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2、使用类创建组件"><a href="#2、使用类创建组件" class="headerlink" title="2、使用类创建组件"></a>2、使用类创建组件</h2><p>类组件：使用ES6的class创建的组件</p><ul><li>约定1：<strong>类名称必须以大写字母开头</strong></li><li>约定2：类组件应该继承<code>React.Component</code>父类，从而可以使用父类中提供的方法或属性</li><li>约定3：类组件必须提供<code>render()</code>方法</li><li>约定4：<strong>render()方法必须有返回值</strong>，表示该组件的结构</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                这是一个函数组件            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>抽离为独立js文件</p></blockquote><p>组件作为一个独立的个体，一般都会放到一个单独的js文件中。</p><p>1、创建js文件，例Test.js；</p><p>2、在Test.js中导入React；</p><p>3、创建组件（函数 或 类）；</p><p>4、在Test.js中导出该组件；</p><p>5、在index.js中导入Test组件；</p><p>6、渲染组件。</p><blockquote><p>Test.js</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                这是一个函数组件            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出Test组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> Test</code></pre><blockquote><p>index.js</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Test form <span class="token string">'./Test'</span><span class="token comment" spellcheck="true">// 渲染导入的Test组件</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3、React事件处理"><a href="#3、React事件处理" class="headerlink" title="3、React事件处理"></a>3、React事件处理</h2><blockquote><p>事件绑定</p></blockquote><ul><li>React事件绑定语法与DOM事件语法相似</li><li>语法：<code>on+事件名称={事件处理程序}</code>，例：onClick={() =&gt; {}}</li><li>React事件采用驼峰命名法，例：onMouseEnter、onFocus</li><li>在函数组件中绑定事件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'单机事件触发了'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>事件对象</p></blockquote><ul><li>可以通过事件处理程序的参数获取到事件对象</li><li>React中的事件对象叫做合成事件（对象）</li><li>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleClicke</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 阻止浏览器的默认行为</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件对象'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>点击不会跳转页面<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><h2 id="4、有状态组件和无状态组件"><a href="#4、有状态组件和无状态组件" class="headerlink" title="4、有状态组件和无状态组件"></a>4、有状态组件和无状态组件</h2><ul><li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li><li>状态（state）即数据</li><li>函数组件没有自己的状态，只负责数据展示（静）</li><li>类组件有自己的状态，负责更新UI，让页面“动“起来</li></ul><h2 id="5、state和setState"><a href="#5、state和setState" class="headerlink" title="5、state和setState"></a>5、state和setState</h2><blockquote><p>state的基本使用</p></blockquote><ul><li>状态（state）即数据，是组件内部的私有数据，只能在组件内部使用</li><li>state的值是对象，表示一个组件中可以有多个数据</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>有状态组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>简化语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>有状态组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>获取状态：<code>this.state</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>setState()修改状态</p></blockquote><ul><li>状态是可变的</li><li>语法：<code>this.setState({需要修改的数据})</code></li><li>不能直接修改state中的值，这是错误的</li><li>setState()的作用：1、修改state；2、更新UI</li><li>思想：数据驱动视图</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>从JSX中抽离事件处理程序</p></blockquote><ul><li>JSX中参杂过多的js逻辑代码，会显得非常混乱</li><li>将逻辑抽离到单独的方法中，保证JSX结构清晰</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span>    <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件处理程序中的this：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述会报错<code>TypeError: Cannot read property 'setState' of undefined</code></p><ul><li>原因：事件处理程序中this的值为undefined</li><li>希望：this指向组件实例（render方法中的this即为组件实例）</li></ul><h2 id="6、事件绑定this指向"><a href="#6、事件绑定this指向" class="headerlink" title="6、事件绑定this指向"></a>6、事件绑定this指向</h2><blockquote><p>箭头函数</p></blockquote><p>利用箭头函数自身不绑定this的特点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span>    <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件处理程序中的this：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 箭头函数中的this指向外部环境，此处为render()方法</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Function.prototype.bind()</p></blockquote><p>利用ES5中的bind方法，将事件处理程序中的this与组件实例绑定到一起</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span>    <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件处理程序中的this：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>class的实例方法</p></blockquote><p>利用箭头函数形式的class实例方法。</p><ul><li>该语法是实验性语法，但是由于babel的存在可以直接使用</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span>    onIncrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件处理程序中的this：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 箭头函数中的this指向外部环境，此处为render()方法</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>总结</p></blockquote><p>推荐使用class的实例方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    onIncrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>箭头函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>bind方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="7、表单处理"><a href="#7、表单处理" class="headerlink" title="7、表单处理"></a>7、表单处理</h2><blockquote><p>受控组件</p></blockquote><ul><li><p>HTML中的表单元素是可输入的，也就是有自己的可变状态</p></li><li><p>而React中可变状态通常保存在state中，并且只能通过setState()方法来修改</p></li><li><p>React将state与表单元素值value绑定到一起，由state的值来控制表单元素的值</p></li><li><p>受控组件：其值受到React控制的表单元素</p></li></ul><p><strong>步骤</strong>：</p><p>1、在state中添加一个状态，作为表单元素的value值（控制表单元素值的来源）</p><p>2、给表单元素绑定change事件，将表单元素的值设置为state的值（控制表单元素值的变化）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        txt<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            txt<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>txt<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>多表单元素优化步骤</strong></p><p>1、给表单元素添加name属性，名称与state相同。</p><p>2、根据表单元素类型获取对应值。</p><p>3、在change事件处理程序中通过[name]来修改对应的state</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        txt<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        sel<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        isChecked<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    handleForm <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前DOM对象</span>        <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target        <span class="token comment" spellcheck="true">// 根据类型获取值</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> target<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'checkbox'</span>            <span class="token operator">?</span> target<span class="token punctuation">.</span>checked            <span class="token punctuation">:</span> target<span class="token punctuation">.</span>value        <span class="token comment" spellcheck="true">// 获取name</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> target<span class="token punctuation">.</span>name        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 文本框 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"txt"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>txt<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 富文本框 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">"content"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>content<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">}</span>                <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 下拉框 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"sel"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>sel<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>                <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 复选框 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"isChecked"</span> checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isChecked<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>非受控组件</p></blockquote><p>借助于ref，使用原生DOM方式来获取表单元素值。</p><p>ref的作用：获取DOM或组件。</p><p><strong>使用步骤</strong>：</p><p>1、调用React.createRef()方法创建一个ref对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>txtRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>2、将创建好的ref对象添加到文本框中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>3、通过ref对象获取到文本框的值</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Componment</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建ref</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>txtRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取文本框的值</span>    getTxt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文本框值为：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getTxt<span class="token punctuation">}</span><span class="token operator">></span>获取文本框的值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="8、组件通讯"><a href="#8、组件通讯" class="headerlink" title="8、组件通讯"></a>8、组件通讯</h2><p>组件是独立且封闭的单元，默认情况下，只能使用组件自己的数据。在组件化过程中，我们将一个完整的功能拆分成多个组件，以更好的完成整个应用的功能。而在这个过程中，多个组件之间不可避免的要共享某些数据。为了实现这些功能，就需要打破组件的独立封闭性，让其与外界沟通。这个过程就是组件通讯。</p><h2 id="9、组件的props"><a href="#9、组件的props" class="headerlink" title="9、组件的props"></a>9、组件的props</h2><p>组件是封闭的，要接收外部数据应该通过props来实现。</p><p>props的作用：接收传递给组件的数据。</p><ul><li>传递数据：给组件标签添加属性。</li><li>接收数据：函数组件通过参数props接收数据，类组件通过this.props接收数据。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Test id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token string">"test"</span> title<span class="token operator">=</span><span class="token string">"test"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>接收数据：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>接收到的数据：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Test id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token string">"test"</span> title<span class="token operator">=</span><span class="token string">"test"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><blockquote><p>特点</p></blockquote><p>1、可以给组件传递任意类型的数据；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Test <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'props：'</span><span class="token punctuation">,</span>props<span class="token punctuation">)</span>    props<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>props：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>tag<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Test        id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>        title<span class="token operator">=</span><span class="token string">"test"</span>        colors<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        fn<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        tag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>p<span class="token operator">></span>这是一个p标签<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>2、props是只读的对象，只能读取属性的值，无法修改对象；</p><p>3、使用类组件时，如果写了构造函数，应该将props传递给super()，否则，无法在构造函数中获取到props。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 推荐将props传递给父类构造函数</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>接收到的数据：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10、组件通讯的三种方式"><a href="#10、组件通讯的三种方式" class="headerlink" title="10、组件通讯的三种方式"></a>10、组件通讯的三种方式</h2><p>组件之间的通讯分为3钟：</p><ul><li>父组件-&gt;子组件</li><li>子组件-&gt;父组件</li><li>兄弟组件</li></ul><blockquote><p>父组件传递数据给子组件</p></blockquote><p>1、父组件提供传递的state数据；</p><p>2、给子组件标签添加属性，值为state中的数据；</p><p>3、子组件中通过props接收父组件中传递的数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>                父组件：                <span class="token operator">&lt;</span>Child name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>title<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Child <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件：'</span><span class="token punctuation">,</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件，接收到父组件的数据：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>子组件传递数据给父组件</p></blockquote><p>利用回调函数，父组件提供回调，子组件调用，将要传递的数据作为回调函数的参数。</p><p>1、父组件提供一个回调函数（用于接收数据）；</p><p>2、将该函数作为属性的值，传递给子组件；</p><p>3、子组件通过props调用回调函数；</p><p>4、将子组件的数据作为参数传递给回调函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        parentMsg<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    getChildMsg <span class="token operator">=</span> msg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到子组件数据：'</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            parentMsg<span class="token punctuation">:</span> msg        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>                父组件：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>parentMsg<span class="token punctuation">}</span>                <span class="token operator">&lt;</span>Child getMsg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getChildMsg<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'React'</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>            子组件：<span class="token punctuation">{</span><span class="token string">''</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token operator">></span>点击，给父组件传递数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong>回调函数中this指向问题。</p><blockquote><p>兄弟组件</p></blockquote><ul><li>将共享状态提升到最近的公共组件中，由公共父组件来管理这个状态</li><li>公共父组件职责：<ul><li>1、提供共享状态</li><li>2、提供操作共享状态的方法</li></ul></li><li>要通讯的子组件只需通过props接收状态或操作状态的方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提供共享状态</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供修改状态的方法</span>    onIncrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>Child1 count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Child2 onIncrement<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> Child1 <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span>计数器：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> Child2 <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="11、Context"><a href="#11、Context" class="headerlink" title="11、Context"></a>11、Context</h2><p>作用：跨组件传递数据（如主题、语言等）</p><blockquote><p>使用步骤</p></blockquote><p>1、调用React.createContext()创建Provider（提供数据）和Consumer（消费数据）两个组件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>2、使用Provider组件作为父节点。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Provider<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Child1 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span></code></pre><p>3、设置value属性，表示要传递的数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span></code></pre><p>4、调用Consumer组件接收数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Consumer<span class="token operator">></span>    <span class="token punctuation">{</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span>data参数表示接收到的数据 <span class="token operator">--</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建context得到两个组件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Node <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Node <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"node"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>SubNode <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> SubNode <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"subnode"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> Child <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Consumer<span class="token operator">></span><span class="token punctuation">{</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span>子节点 <span class="token operator">--</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>sapn<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="12、props深入"><a href="#12、props深入" class="headerlink" title="12、props深入"></a>12、props深入</h2><h3 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h3><p><code>children</code>属性：表示组件标签的子节点。当组件标签有子节点时，props就会有该属性。</p><ul><li>children属性与普通的props一样，值可以是任意值（文本、React元素、组件，甚至是函数）</li></ul><blockquote><p>children为文本节点：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>组件标签的子节点：<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span>这是子节点<span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>children为React元素：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>组件标签的子节点：<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">rendre</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>这是一个子节点，是一个p标签<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>children为组件：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>button组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>组件标签的子节点：<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">rendre</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App<span class="token operator">></span>        <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>children为函数：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>组件标签的子节点：<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个函数子节点'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="props校验"><a href="#props校验" class="headerlink" title="props校验"></a>props校验</h3><ul><li>对于组件而言，props是外来的，无法保证组件使用者传入什么格式的数据</li><li>如果传入的数据格式不对，可能导致组件内部报错</li></ul><p>关键问题：组件的使用者不知道明确的错误原因。</p><p>props校验：允许在创建时，就指定props的类型、格式等。（作用：捕获使用组件时因为props导致的错误，给出明确的错误提示，增加组件的健壮性。）</p><blockquote><p>使用步骤：</p></blockquote><p>1、安装包<code>prop-types</code>（yarn add prop-types或npm i props-types）；</p><p>2、导入prop-types包；</p><p>3、使用<code>组件名.propTypes = {}</code>来给组件的props添加校验规则；</p><p>4、校验规则通过PropTypes对象来指定。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> PropTypes form <span class="token string">'prop-types'</span><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> props<span class="token punctuation">.</span>colors    <span class="token keyword">const</span> lists <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>lists<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加props校验</span>App<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 约定colors属性为array类型</span>    <span class="token comment" spellcheck="true">// 如果类型不对，则报出明确错误，便于分析错误原因</span>    colors<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App colors<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>约束规则</p></blockquote><p>1、常见类型：<code>array</code>、<code>bool</code>、<code>func</code>、<code>number</code>、<code>object</code>、<code>string</code>。</p><p>2、React元素类型：<code>element</code>。</p><p>3、必填项：<code>isRequired</code>。</p><p>4、特定结构的对象：<code>shape({})</code>。</p><pre><code>// 常见类型optionalFunc: PropTypes.func,// 必选requiredFunc: PropTypes.func.isRequired,// 特定结构的对象optionalObjectWithShape: PropTypes.shape({    color: PropTypes.string,    fontSize: PropTypes.number})</code></pre><h3 id="props的默认值"><a href="#props的默认值" class="headerlink" title="props的默认值"></a>props的默认值</h3><p>作用：给props设置默认值，在未传入props时生效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> App <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>此处展示props的默认值：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加props默认值</span>App<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>    pageSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="13、组件的生命周期"><a href="#13、组件的生命周期" class="headerlink" title="13、组件的生命周期"></a>13、组件的生命周期</h2><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React生命周期图</a></p><blockquote><p>组件的生命周期概述</p></blockquote><ul><li>意义：组件的生命周期有助于理解组件的运行方式、完成更复杂的组件功能、分析组件错误原因等。</li><li>组件的生命周期：组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程。</li><li>生命周期的每个阶段总是伴随着一些方法调用，这些方法就是生命周期的钩子函数。</li><li>钩子函数的作用：为开发人员在不同阶段操作组件提供了时机。</li><li>只有<strong>类组件</strong>才有生命周期。</li></ul><blockquote><p>生命周期的三个阶段</p></blockquote><p><img src="/archives/12195400/upload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg" alt=""></p><ul><li><p>创建时（挂载阶段）</p><ul><li>执行时机：组件创建时（页面加载时）</li><li>执行顺序：constructor()-&gt;render()-&gt;componentDidMount</li></ul><table><thead><tr><th align="center">钩子函数</th><th align="center">触发时机</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">constructor</td><td align="center">创建组件时，最先执行</td><td align="center">1、初始化state<br>2、为事件处理程序绑定this</td></tr><tr><td align="center">render</td><td align="center">每次组件渲染都会触发</td><td align="center">渲染UI  <strong>注意：不能调用setState()</strong></td></tr><tr><td align="center">componentDidMount</td><td align="center">组件挂载（完成DOM渲染）后</td><td align="center">1、发送网络请求<br>2、DOM操作</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：constructor'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：componentDidMount'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>count：<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>更新时（更新阶段）</p><ul><li>执行时机：1、<code>setState()</code>；2、<code>forceUpdate()</code>；3、组件接收到新的props。</li><li>以上三者任意一种变化，组件就会重新渲染。</li><li>执行顺序：render()-&gt;componentDidUpdate()</li></ul><table><thead><tr><th align="center">钩子函数</th><th align="center">触发时机</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">render</td><td align="center">每次组件渲染都会触发</td><td align="center">渲染UI（与　挂载阶段　是同一个render）</td></tr><tr><td align="center">componentDidUpdate</td><td align="center">组件更新（完成DOM渲染）后</td><td align="center">１、发送网络请求<br>2、DOM操作<br>注：如果要setState()必须放在一个if条件中</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：constructor'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//强制更新</span>        <span class="token comment" spellcheck="true">//this.forceUpdate()</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>Child count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Child组件：render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>count：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果要调用 setState() 更新状态，必须要放在一个if条件中</span>    <span class="token comment" spellcheck="true">//如果直接调用 setState() 更新状态，会导致递归更新</span>    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Child组件：componentDidUpdate'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//比较更新前后的props是否相同，来决定是否重新渲染组件</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上一次props：'</span><span class="token punctuation">,</span>prevProps<span class="token punctuation">,</span><span class="token string">'，现在的props：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//发送ajax请求</span>            <span class="token comment" spellcheck="true">//......</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取DOM</span>        <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>卸载时（卸载阶段）</p><ul><li><p>执行时机：组件从页面中消失</p><table><thead><tr><th align="center">钩子函数</th><th align="center">触发时机</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">componentWillUnmount</td><td align="center">组件卸载（从页面中消失）</td><td align="center">执行清理工作（如：清理定时器等）</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期钩子函数：constructor'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span><span class="token punctuation">(</span>                     <span class="token operator">&lt;</span>p<span class="token operator">></span>不能再加了<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                 <span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>Child count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开启定时器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timerId <span class="token operator">=</span> <span class="token function">setIntterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器正在执行'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Child组件：render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>count：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'生命周期函数：componentWillUnmount'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 清理定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerId<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><blockquote><p>不常用的钩子函数</p></blockquote><p><img src="/archives/12195400/image-20210911133614787.png" alt=""></p><ul><li>getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>getSnapshotBeforeUpdate</li></ul><h2 id="14、render-props和高阶组件"><a href="#14、render-props和高阶组件" class="headerlink" title="14、render-props和高阶组件"></a>14、render-props和高阶组件</h2><blockquote><p>render组件复用</p></blockquote><p>如果两个组件中的部分功能相似或相同，可以复用相似或相同的功能。</p><p>复用什么？1、state；2、操作state的方法（组件状态逻辑）。</p><p>组件复用的两种方式：1、render props模式；2、高阶组件（HOC）。</p><blockquote><p>render props模式</p></blockquote><p>思路：将要复用的state和操作state的方法封装到一个组件中。</p><p><strong>那怎样拿到该组件中复用的state？</strong></p><p>在使用组件时，添加一个值为函数的prop，通过函数参数来获取（需要组件内部实现）</p><p><strong>如何渲染任意UI？</strong></p><p>使用该函数的返回值作为要渲染的UI内容（需要组件内部实现）</p><p><strong>使用步骤：</strong></p><p>1、创建组件，在组件中提供复用的状态逻辑代码（1、状态；2、操作状态的方法）；</p><p>2、将要复用的状态作为props.render(state)方法的参数，暴露到组件外部.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入图片资源</span><span class="token keyword">import</span> img form <span class="token string">'./images/test.jpg'</span><span class="token comment" spellcheck="true">// 创建Mouse组件</span><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 鼠标位置</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 鼠标移动事件的事件处理程序</span>    handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听鼠标移动事件</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>render props模式<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>Mouse                    render<span class="token operator">=</span><span class="token punctuation">{</span>mouse <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>                            <span class="token operator">&lt;</span>p<span class="token operator">></span>                                鼠标位置：x<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">}</span> y<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">}</span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*  */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>Mouse                     render<span class="token operator">=</span><span class="token punctuation">{</span>mouse <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>                            <span class="token operator">&lt;</span>img                                 src<span class="token operator">=</span><span class="token punctuation">{</span>img<span class="token punctuation">}</span>                                 alt<span class="token operator">=</span><span class="token string">"test"</span>                                 style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                                  postition<span class="token punctuation">:</span><span class="token string">'absolute'</span><span class="token punctuation">,</span>                                  top<span class="token punctuation">:</span> mouse<span class="token punctuation">.</span>y<span class="token punctuation">,</span>                                  left<span class="token punctuation">:</span> mouse<span class="token punctuation">.</span>x                                <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>                       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Mouse<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>children代替render属性</strong></p><p>注意：并不是该模式教render props就必须使用名为render的prop，实际上可以使用任意名称的prop。</p><p>把prop是一个函数并且到苏组件要渲染什么内容的技术叫做：render props模式。</p><p>推荐使用<code>children</code>代替<code>render</code>属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建Mouse组件</span><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 鼠标位置</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 鼠标移动事件的事件处理程序</span>    handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听鼠标移动事件</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>render props模式<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>Mouse                    <span class="token punctuation">{</span>mouse <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>                            <span class="token operator">&lt;</span>p<span class="token operator">></span>                                鼠标位置：x<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">}</span> y<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">}</span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>代码优化</strong></p><p>1、给render props模式添加props校验；</p><p>2、在组件卸载时接触mousemove事件绑定。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建Mouse组件</span><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 鼠标位置</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 鼠标移动事件的事件处理程序</span>    handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听鼠标移动事件</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 组件卸载时移除事件绑定</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加props校验</span>Mouse<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需导入包 import PropTypes from 'prop-types'</span>    children<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>render props模式<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>Mouse                    <span class="token punctuation">{</span>mouse <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>                            <span class="token operator">&lt;</span>p<span class="token operator">></span>                                鼠标位置：x<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">}</span> y<span class="token operator">=</span><span class="token punctuation">{</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">}</span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>高阶组件</p></blockquote><p>采用包装（装饰）模式，实现状态逻辑复用。</p><p>高阶组件（HOC，Higher-Order Component）是一个函数，接收要包装的组件，返回增强后的组件。</p><p>高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过prop将复用的状态传递给被包装组件WrappedComponent。</p><p><strong>使用步骤</strong></p><p>1、创建一个函数，名称约定以<code>with</code>开头；</p><p>2、指定函数参数，参数应该以大写字母开头（作为要渲染的组件）；</p><p>3、在函数内部创建一个类组件，提供复用的状态逻辑代码，并返回；</p><p>4、在该组件中，渲染参数组件，同时将状态通过prop传递给参数组件；</p><p>5、调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其渲染到页面中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建高阶组件</span><span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该组件提供复用的状态逻辑</span>    <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 鼠标状态</span>        state <span class="token operator">=</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            y<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>                y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 控制鼠标状态的逻辑</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Mouse<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试高阶组件</span><span class="token keyword">const</span> Position <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token function">鼠标当前位置：</span><span class="token punctuation">(</span>x：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>x<span class="token punctuation">}</span>，y<span class="token punctuation">:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取增强后的组件</span><span class="token keyword">const</span> MousePosition <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 渲染增强后的组件 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>MousePosition <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>设置displayName</strong></p><p>使用高阶组件存在的问题：默认情况下，React使用组件名称作为displayName，这样会导致得到的组件名称相同。</p><p>解决方式：为高阶组件设置displayName，便于调试时区分不同的组件。</p><p>displayName的作用：用于设置调试信息（React Developer Tools信息）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入图片资源</span><span class="token keyword">import</span> img form <span class="token string">'./images/test.jpg'</span><span class="token comment" spellcheck="true">// 创建高阶组件</span><span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该组件提供复用的状态逻辑</span>    <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 鼠标状态</span>        state <span class="token operator">=</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            y<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>                y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 控制鼠标状态的逻辑</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置displayName</span>    Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`WithMouse</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">return</span> Mouse<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> WrappedComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> WrappedComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'Component'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试高阶组件</span><span class="token keyword">const</span> Position <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token function">鼠标当前位置：</span><span class="token punctuation">(</span>x：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>x<span class="token punctuation">}</span>，y<span class="token punctuation">:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">const</span> Test <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>img         src<span class="token operator">=</span><span class="token punctuation">{</span>img<span class="token punctuation">}</span>         alt<span class="token operator">=</span><span class="token string">"test"</span>         style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>               postition<span class="token punctuation">:</span><span class="token string">'absolute'</span><span class="token punctuation">,</span>               top<span class="token punctuation">:</span> mouse<span class="token punctuation">.</span>y<span class="token punctuation">,</span>               left<span class="token punctuation">:</span> mouse<span class="token punctuation">.</span>x              <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取增强后的组件</span><span class="token keyword">const</span> MousePosition <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token keyword">const</span> MouseTest <span class="token operator">=</span> <span class="token function">withMose</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 渲染增强后的组件 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>MousePosition <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>MouseTest <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>传递props</strong></p><p>问题：props丢失，因为高阶组件没有往下传递props。</p><p>解决方式：渲染WrappedComponent时，将state和this.props一起传递给组件。</p><p>传递方式：<code>&lt;WrappedComponent {...this.state} {...this.props} /&gt;</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建高阶组件</span><span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该组件提供复用的状态逻辑</span>    <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 鼠标状态</span>        state <span class="token operator">=</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            y<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        handleMouseMove <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>                y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 控制鼠标状态的逻辑</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置displayName</span>    Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`WithMouse</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">return</span> Mouse<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> WrappedComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> WrappedComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'Component'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试高阶组件</span><span class="token keyword">const</span> Position <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token function">鼠标当前位置：</span><span class="token punctuation">(</span>x：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>x<span class="token punctuation">}</span>，y<span class="token punctuation">:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取增强后的组件</span><span class="token keyword">const</span> MousePosition <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 渲染增强后的组件 */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>MousePosition title<span class="token operator">=</span><span class="token string">"position"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="五、React原理"><a href="#五、React原理" class="headerlink" title="五、React原理"></a>五、React原理</h1><h2 id="1、setState-的说明"><a href="#1、setState-的说明" class="headerlink" title="1、setState()的说明"></a>1、setState()的说明</h2><blockquote><p>更新数据</p></blockquote><ul><li>setState()是异步更新数据的</li><li>可以多次调用setState()，只会触发一次更新渲染</li></ul><p>使用该语法时，后面的setState()不要依赖于前面的setState()。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//0</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//0+1</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><blockquote><p>推荐语法</p></blockquote><p>使用<code>setState((state,props) =&gt; {})</code>语法</p><ul><li>参数state：表示最新的state</li><li>参数props：表示最新的props</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//0+1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count：'</span><span class="token punctuation">,</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1 后输出</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//1+1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0 先输出</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><blockquote><p>第二个参数</p></blockquote><p>场景：在状态更新（页面完成重新渲染）后立即执行某个参数。</p><p>语法：<code>setState(updater[, callback])</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//0+1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 状态更新后并且重新渲染后，立即执行</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'状态更新完成：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'更新state后的标题：'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、JSX语法的转换过程"><a href="#2、JSX语法的转换过程" class="headerlink" title="2、JSX语法的转换过程"></a>2、JSX语法的转换过程</h2><ul><li>JSX仅仅是createElement() 方法的语法糖（简化语法）</li><li>JSX语法被@babel/preset-react插件编译为createElement()方法</li><li>React元素：是一个对象，用来描述你希望在屏幕上看到的内容</li></ul><h2 id="3、组件更新机制"><a href="#3、组件更新机制" class="headerlink" title="3、组件更新机制"></a>3、组件更新机制</h2><p>setState()的两个作用：</p><ul><li>修改state</li><li>更新组件（UI）</li></ul><p>过程：父组件重新渲染时，也会重新渲染子组件。但只会渲染当前组件子树（当前组件及其所有子组件）。</p><h2 id="4、组件性能优化"><a href="#4、组件性能优化" class="headerlink" title="4、组件性能优化"></a>4、组件性能优化</h2><blockquote><p>减轻state</p></blockquote><p>只存储跟组件渲染相关的数据（比如：count/列表数据/loading等）</p><ul><li>不用做渲染的数据不要放在state中，比如定时器id等</li><li>对于需要在多个方法中用到的数据，应该放在this中</li></ul><blockquote><p>避免不必要的重新渲染</p></blockquote><p>组件更新机制：父组件更新会引起子组件也被更新。子组件没有任何变化时也会重新渲染，那如何避免不必要的重新渲染呢？</p><p>解决方式：使用钩子函数<code>shouldComponentUpdate(nextProps,nextState)</code>，通过返回值决定该组件是否重新渲染，返回true表示重新渲染，false表示不重新渲染。</p><p>触发时机：更新阶段的钩子函数，组件重新渲染前执行（shouldComponentUpdate-&gt;render）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//0+1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 钩子函数 nextProps,nextState表示最新的参数和状态</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新前的状态</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'更新前的状态：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 返回false，阻止组件重新渲染</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件更新了'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>计数器：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>生成随机数：</strong></p><p>nextState</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        number<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                number<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 因为两次生成的随机数可能相同，如果相同，此时，不需要重新渲染</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最新状态：'</span><span class="token punctuation">,</span>nextState<span class="token punctuation">,</span><span class="token string">'，当前状态：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>        <span class="token keyword">return</span> nextState<span class="token punctuation">.</span>number <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>随机数：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>statte<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>重新生成<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nextProps</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        number<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                number<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父组件中的render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>NumberBox number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>重新生成<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NumberBox</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为两次生成的随机数可能相同，如果相同，此时，不需要重新渲染</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最新props：'</span><span class="token punctuation">,</span>nextProps<span class="token punctuation">,</span><span class="token string">'，当前props：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>        <span class="token keyword">return</span> nextProps<span class="token punctuation">.</span>number <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>number    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件中的render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>h2<span class="token operator">></span>随机数：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>statte<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>纯组件</p></blockquote><p>纯组件：PureComponent与React.Component功能相似。但PureComponent内部自动实现了shouldComponentUpdate钩子，不需要手动比较。</p><p>原理：纯组件内部通过分别对比前后两次props和state的值，来决定是否重新渲染组件。</p><p>说明：纯组件内部的对比是shallow compare（浅层对比）。</p><ul><li>对于值类型来说：比较两个值是否相同（直接赋值即可）</li><li>对于引用类型来说：只比较对象的引用（地址）是否相同</li></ul><p>state或props中属性值为引用类型时，应该创建新数据，不要直接修改原数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            number<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 正确做法</span>        <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">,</span>number<span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                obj<span class="token punctuation">:</span> newObj            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 错误做法</span>        <span class="token comment" spellcheck="true">/* const newObj = this.state.obj        newObj.number = Math.floor(Math.random()*3)        this.setState(() => {            return (                obj: newObj            )        }) */</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父组件中的render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>NumberBox number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>number<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>重新生成<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NumberBox</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为两次生成的随机数可能相同，如果相同，此时，不需要重新渲染</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最新props：'</span><span class="token punctuation">,</span>nextProps<span class="token punctuation">,</span><span class="token string">'，当前props：'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>        <span class="token keyword">return</span> nextProps<span class="token punctuation">.</span>number <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>number    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件中的render'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>h2<span class="token operator">></span>随机数：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>statte<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、虚拟DOM和Diff算法"><a href="#5、虚拟DOM和Diff算法" class="headerlink" title="5、虚拟DOM和Diff算法"></a>5、虚拟DOM和Diff算法</h2><p>React更新视图的思想：只要state变化就重新渲染视图。</p><p>问题：组件中只有一个DOM元素需要更新时，也得把整个组件的内容重新渲染到页面中？</p><p>理想状态：部分更新，只更新变化的地方。</p><p>虚拟DOM：本质上就是一个JS对象，用来描述你希望在屏幕上看到的内容（UI）。</p><blockquote><p>执行过程</p></blockquote><p>1、初次渲染时，React会根据初始state（Model），创建一个虚拟DOM对象（树）。</p><p>2、根据虚拟DOM生成真正的DOM，渲染到页面中。</p><p>3、当数据变化后（setState()），重新根据新的数据，创建新的虚拟DOM对象（树）。</p><p>４、与上一次得到的虚拟DOM对象，使用Diff算法对比（找不同），得到需要更新的内容。</p><p>5、最终，React只将变化的内容更新（patch）到DOM中，重新渲染到页面。</p><p>组件render()调用之后，根据状态和JSX结构生成虚拟DOM对象。</p><ul><li>render方法的调用并不意味着浏览器中的重新渲染</li><li>render方法调用仅仅说明要进行diff算法</li></ul><h1 id="六、React路由"><a href="#六、React路由" class="headerlink" title="六、React路由"></a>六、React路由</h1><h2 id="1、使用步骤"><a href="#1、使用步骤" class="headerlink" title="1、使用步骤"></a>1、使用步骤</h2><p>1、安装：</p><pre class=" language-bash"><code class="language-bash">yarn add react-router-dom</code></pre><p>2、导入路由的三个核心组件：<code>Router/Route/Link</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>Route<span class="token punctuation">,</span>Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span></code></pre><p>3、<strong>使用<code>Router</code>组件包裹整个应用</strong></p><p>4、使用<code>Link</code>组件作为导航菜单（路由入口）</p><p>5、使用<code>Route</code>组件配置路由规则和展示的组件（路由出口）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Test页面的内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>React路由基础<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 指定路由入口 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/test"</span><span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 指定路由出口 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/test"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2、常用组件说明"><a href="#2、常用组件说明" class="headerlink" title="2、常用组件说明"></a>2、常用组件说明</h2><ul><li><p>Router组件：包裹整个应用，一个React应用只需要<strong>使用一次</strong></p></li><li><p>两种常用Router：HashRouter和BrowserRouter</p></li><li><p>HashRouter：使用URL的哈希值实现(localhost:8080/#/test)</p></li><li><p>BorwserRouter：使用H5的history API实现(localhost:8080/test)</p></li><li><p>Link组件：用于指定导航链接（标签）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// to属性：浏览器地址栏总的pathname（localhost.pathname）</span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/test"</span><span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre></li><li><p>Route组件：指定路由展示组件相关信息</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// path属性：路由规则</span><span class="token comment" spellcheck="true">// component属性：展示的组件</span><span class="token comment" spellcheck="true">// Route组件写在哪，渲染出来的组件就在哪显示</span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/test"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span></code></pre></li></ul><h2 id="3、路由的执行过程"><a href="#3、路由的执行过程" class="headerlink" title="3、路由的执行过程"></a>3、路由的执行过程</h2><p>1、点击Link组件（a标签），修改了浏览器地址栏中的url。</p><p>2、React路由监听到地址栏url的变化。</p><p>3、React路由内部遍历所有Route组件，使用路由规则（path）与pathname进行匹配。</p><p>4、当路由规则（path）能够匹配地址栏中的pathname时，就显示该Route组件的内容。</p><h2 id="4、编程式导航"><a href="#4、编程式导航" class="headerlink" title="4、编程式导航"></a>4、编程式导航</h2><p>通过JS代码来实现页面的跳转。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">)</span></code></pre><ul><li>history是React路由提供的，用于获取浏览器历史记录的相关信息。</li><li><code>push(path)</code>：跳转到某个页面，参数path表示要跳转的路径。</li><li><code>go(n)</code>：前进或后退到某个页面，参数n表示前进或后退页面数量（比如：-1表示后退到上一页）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    handleLogin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用编程式导航实现路由跳转</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>登录界面：<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogin<span class="token punctuation">}</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Home <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handleBack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// go(-1)表示返回上一个页面</span>        props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>首页界面<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleBack<span class="token punctuation">}</span><span class="token operator">></span>返回登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>跳转到登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5、默认路由"><a href="#5、默认路由" class="headerlink" title="5、默认路由"></a>5、默认路由</h2><p>表示进入页面时就会匹配的路由。</p><p>默认路由path为<code>/</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="6、匹配模式"><a href="#6、匹配模式" class="headerlink" title="6、匹配模式"></a>6、匹配模式</h2><blockquote><p>模糊匹配</p></blockquote><p>当Link组件的to属性值为“/login”时，为什么默认路由也被匹配成功？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>首页，进入页面就可以看到<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Login登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>跳转到登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>默认情况下，React路由时模糊匹配模式。</p><p>模糊匹配规则：只要pathname以path开头就会匹配成功。</p><table><thead><tr><th align="center">path</th><th align="center">能够匹配的pathname</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">所有pathname</td></tr><tr><td align="center">/test</td><td align="center">/test或/test/a或/test/a/b</td></tr></tbody></table><blockquote><p>精确匹配</p></blockquote><p>给Route组件添加<code>exact</code>属性，让其变为精确匹配模式。</p><p>精确匹配：只有当path和pathname完全匹配时才会展示该路由。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>首页，进入页面就可以看到<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Login登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>跳转到登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>推荐：给默认路由添加<code>exact</code>属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1gh411U7JD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://lskjwp.gitee.io/categories/React/"/>
    
    
      <category term="React" scheme="https://lskjwp.gitee.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>PE制作</title>
    <link href="https://lskjwp.gitee.io/archives/df0861b3/"/>
    <id>https://lskjwp.gitee.io/archives/df0861b3/</id>
    <published>2021-09-05T04:48:31.000Z</published>
    <updated>2021-11-14T07:16:13.093Z</updated>
    
    <content type="html"><![CDATA[<p>视频推荐：<a href="https://www.bilibili.com/video/BV1BU4y1j7Dk" target="_blank" rel="noopener">打造自己的PE和万能启动U盘</a></p><a id="more"></a><h1 id="一、工具下载"><a href="#一、工具下载" class="headerlink" title="一、工具下载"></a>一、工具下载</h1><blockquote><p>PE生成工具：WimBuilder2</p></blockquote><p>官网：<a href="http://hello.wimbuilder.world/" target="_blank" rel="noopener">http://hello.wimbuilder.world/</a></p><p>下载地址：<a href="http://hello.wimbuilder.world/hello/download#latest" target="_blank" rel="noopener">http://hello.wimbuilder.world/hello/download#latest</a></p><blockquote><p>系统镜像下载</p></blockquote><p>MSDN：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><p>系统下载地址：<a href="https://next.itellyou.cn/Original/Index" target="_blank" rel="noopener">https://next.itellyou.cn/Original/Index</a></p><blockquote><p>万能U盘制作工具：Ventoy</p></blockquote><p>官网：<a href="https://www.ventoy.net/cn/index.html" target="_blank" rel="noopener">https://www.ventoy.net/cn/index.html</a></p><p>下载地址：<a href="https://www.ventoy.net/cn/download.html" target="_blank" rel="noopener">https://www.ventoy.net/cn/download.html</a></p><h1 id="二、PE制作"><a href="#二、PE制作" class="headerlink" title="二、PE制作"></a>二、PE制作</h1><p><strong>1、解压下载的<code>WimBuilder2</code>的压缩包</strong>。例如解压压缩包<code>WimBuilder2-Full.v2021-08-08.7z</code>得到<strong>WimBuilder2-Full.v2021-08-08</strong>文件夹；</p><p><strong>2、双击运行上面解压得到的文件夹下的<code>WimBuilder.cmd</code></strong>；</p><p><img src="/archives/df0861b3/image-20210905114541425.png" alt=""></p><p><img src="/archives/df0861b3/image-20210905114503340.png" alt=""></p><p><strong>3、挂载系统镜像</strong>；</p><p>找到下载的系统镜像（本文下载的系统镜像是win10 21H1），右击鼠标，点击装载即可。</p><p>挂载后会出现类似以下图片所示的驱动器：</p><p><img src="/archives/df0861b3/image-20210905120243041.png" alt=""></p><p><strong>4、选择镜像所加载的驱动器</strong>；</p><p><img src="/archives/df0861b3/image-20210905120135373.png" alt=""></p><p><strong>5、直接点击<code>Next</code></strong>；</p><p><img src="/archives/df0861b3/image-20210905120510028.png" alt=""></p><p><strong>6、根据需求，选择功能</strong>；</p><p><img src="/archives/df0861b3/image-20210905120658005.png" alt=""></p><p>如需添加其它功能可自行进行添加。</p><p>确定功能后，点击<code>next</code>。</p><p><strong>7、清理；</strong></p><p><img src="/archives/df0861b3/image-20210905120944363.png" alt=""></p><p><strong>8、构建；</strong></p><p><img src="/archives/df0861b3/image-20210905121115508.png" alt=""></p><p>点击<code>构建</code>后等待构建完成。（时间可能稍长）</p><p>出现<strong>正在导出影像……操作成功完成</strong>字样，说明构建成功。</p><p><strong>9、创建镜像</strong>。</p><p><img src="/archives/df0861b3/image-20210905122013609.png" alt=""></p><p>出现<strong>按任意键继续</strong>，即创建镜像成功。</p><p>到这里PE就制作完成了。</p><blockquote><p>PE文件位置</p></blockquote><p>制作得到的PE文件保存在<code>...\WimBuilder2-Full.v2021-08-08\_Factory_</code>文件夹下。</p><p><img src="/archives/df0861b3/image-20210905123833724.png" alt=""></p><h1 id="三、启动盘制作"><a href="#三、启动盘制作" class="headerlink" title="三、启动盘制作"></a>三、启动盘制作</h1><p><strong>1、插入U盘</strong>；（建议该U盘大于8G，并且已清空或没有重要文件）</p><p><strong>2、解压下载得到的<code>Ventoy</code>压缩包</strong>，例如解压压缩包<code>ventoy-1.0.51-windows.zip</code>得到<strong>ventoy-1.0.51</strong>文件夹；</p><p><strong>3、运行解压得到的<code>ventoy-1.0.51</code>文件夹中的<code>Ventoy2Disk.exe</code>程序</strong>；</p><p><img src="/archives/df0861b3/image-20210905123349045.png" alt=""></p><p>弹窗提醒<strong>恭喜你 Ventoy 已经成功安装到此设备中</strong>，即制作成功。</p><p><strong>4、将制作得到的PE以及需要的系统镜像拷贝到U盘，</strong>启动盘制作完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频推荐：&lt;a href=&quot;https://www.bilibili.com/video/BV1BU4y1j7Dk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;打造自己的PE和万能启动U盘&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PE" scheme="https://lskjwp.gitee.io/categories/PE/"/>
    
    
      <category term="PE" scheme="https://lskjwp.gitee.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>Golang学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/af4eacf0/"/>
    <id>https://lskjwp.gitee.io/archives/af4eacf0/</id>
    <published>2021-06-17T07:41:57.000Z</published>
    <updated>2021-11-14T07:16:12.629Z</updated>
    
    <content type="html"><![CDATA[<p>学习文档链接：<a href="http://c.biancheng.net/golang/" target="_blank" rel="noopener">Go入门学习</a></p><a id="more"></a><h1 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h1><p>Go官网下载地址：<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p><p>Go官方镜像站：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p><p>Windows下运行下载好的可执行文件即可完成安装。</p><h2 id="1、GOROOT和GOPATH"><a href="#1、GOROOT和GOPATH" class="headerlink" title="1、GOROOT和GOPATH"></a>1、GOROOT和GOPATH</h2><p><code>GOROOT</code>和<code>GOPATH</code>都是环境变量，其中<code>GOROOT</code>是安装go开发包的路径，而从Go 1.8版本开始，Go开发包在安装完成后会为<code>GOPATH</code>设置一个默认目录，并且在Go1.14及之后的版本中启用了Go Module模式之后，不一定非要将代码写到GOPATH目录下，所以也就<strong>不需要自己配置GOPATH</strong>了，使用默认的即可。</p><h2 id="2、GOPROXY"><a href="#2、GOPROXY" class="headerlink" title="2、GOPROXY"></a>2、GOPROXY</h2><p>Go1.14版本之后，都推荐使用<code>go mod</code>模式来管理依赖环境了，也不再强制把代码必须写在<code>GOPATH</code>下面的src目录。</p><p>默认的配置：</p><pre class=" language-bash"><code class="language-bash">GOPROXY<span class="token operator">=</span>https://proxy.golang.org,direct</code></pre><p>修改GOPROXY：</p><pre class=" language-bash"><code class="language-bash">go <span class="token function">env</span> -w GOPROXY<span class="token operator">=</span>https://goproxy.cn,direct</code></pre><h2 id="3、命令"><a href="#3、命令" class="headerlink" title="3、命令"></a>3、命令</h2><ul><li><p><code>go env</code>用于打印Go语言的环境信息。</p></li><li><p><code>go run</code>命令可以编译并运行命令源码文件。</p></li><li><p><code>go get</code>可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。</p></li><li><p><code>go build</code>命令用于编译我们指定的源码文件或代码包以及它们的依赖包。</p></li><li><p><code>go install</code>用于编译并安装指定的代码包及它们的依赖包。</p></li><li><p><code>go clean</code>命令会删除掉执行其它命令时产生的一些文件和目录。</p></li><li><p><code>go doc</code>命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p></li><li><p><code>go test</code>命令用于对Go语言编写的程序进行测试。</p></li><li><p><code>go list</code>命令的作用是列出指定的代码包的信息。</p></li><li><p><code>go fix</code>会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。</p></li><li><p><code>go vet</code>是一个用于检查Go语言源码中静态错误的简单工具。</p></li><li><p><code>go tool pprof</code>命令来交互式的访问概要文件的内容。</p></li></ul><h1 id="二、Hello-Go"><a href="#二、Hello-Go" class="headerlink" title="二、Hello Go"></a>二、Hello Go</h1><p><strong>1、创建一个名为hello的文件夹</strong>；</p><p><strong>2、进入命令行，对项目进行初始化</strong>；</p><p>使用go module模式新建项目时，通过<code>go mod init 项目名</code>命令对项目进行初始化，该命令会在项目的根目录下生成<code>go.mod</code>文件。</p><pre class=" language-bash"><code class="language-bash">go mod init hello</code></pre><p><strong>3、在hello目录下新建main.go文件</strong>；</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment" spellcheck="true">//声明main包，表明当前是一个可执行程序</span><span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token comment" spellcheck="true">//导入内置fmt包</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//main函数，是程序执行的入口</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello Go"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在终端打印Hello Go</span><span class="token punctuation">}</span></code></pre><p><strong>4、编译</strong>；</p><p>在hello目录下的命令行中执行以下命令：</p><pre class=" language-bash"><code class="language-bash">go build</code></pre><p><code>go build</code>：表示将源代码编译成可执行文件。</p><pre class=" language-bash"><code class="language-bash">go build hello</code></pre><p>上述这种写法go编译器会去<code>GOPATH</code>的src目录下查找需要编译的<code>hello</code>项目。</p><p>编译得到的可执行文件保存在执行编译命令的当前目录下。可以通过<code>- o</code>参数指定编译后得到的可执行文件的名字。</p><pre class=" language-bash"><code class="language-bash">go build -o first.exe</code></pre><blockquote><p>go run</p></blockquote><p><code>go run main.go</code>也可以执行程序，该命令本质上也是先编译后执行。</p><blockquote><p>go install</p></blockquote><p><code>go install</code>表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到<code>GOPATH</code>的bin目录下。因为境变量中配置了<code>GOPATH</code>下的bin目录，所以可以在任意地方直接执行可执行文件。</p><blockquote><p>跨平台编译</p></blockquote><p>默认<code>go build</code>的可执行文件都是当前操作系统可执行的文件，Go语言支持跨平台编译——在当前平台（例如Windows）下编译其他平台（例如Linux）的可执行文件。</p><h1 id="三、go-module"><a href="#三、go-module" class="headerlink" title="三、go module"></a>三、go module</h1><p><code>go module</code>是Go1.11版本之后官方推出的版本管理工具，并且从Go1.13版本开始，<code>go module</code>将是Go语言默认的依赖管理工具。</p><h2 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h2><p>要启用<code>go module</code>支持首先要设置环境变量<code>GO111MODULE</code>，通过它可以开启或关闭模块支持，它有三个可选值：<code>off</code>、<code>on</code>、<code>auto</code>，默认值是<code>auto</code>。</p><ol><li><code>GO111MODULE=off</code>禁用模块支持，编译时会从<code>GOPATH</code>和<code>vendor</code>文件夹中查找包。</li><li><code>GO111MODULE=on</code>启用模块支持，编译时会忽略<code>GOPATH</code>和<code>vendor</code>文件夹，只根据 <code>go.mod</code>下载依赖。</li><li><code>GO111MODULE=auto</code>，当项目在<code>$GOPATH/src</code>外且项目根目录有<code>go.mod</code>文件时，开启模块支持。</li></ol><p>简单来说，设置<code>GO111MODULE=on</code>之后就可以使用<code>go module</code>了，以后就没有必要在GOPATH中创建项目了，并且还能够很好的管理项目依赖的第三方包信息。</p><p>使用 go module 管理依赖后会在项目根目录下生成两个文件<code>go.mod</code>和<code>go.sum</code>。</p><h2 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h2><p>Go1.11之后设置GOPROXY命令为：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> GOPROXY<span class="token operator">=</span>https://goproxy.cn</code></pre><p>Go1.13之后<code>GOPROXY</code>默认值为<code>https://proxy.golang.org</code>。</p><pre class=" language-bash"><code class="language-bash">go <span class="token function">env</span> -w GOPROXY<span class="token operator">=</span>https://goproxy.cn,direct</code></pre><h2 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a>go mod命令</h2><p>常用的<code>go mod</code>命令如下：</p><pre><code>go mod download    下载依赖的module到本地cache（默认为$GOPATH/pkg/mod目录）go mod edit        编辑go.mod文件go mod graph       打印模块依赖图go mod init        初始化当前文件夹, 创建go.mod文件go mod tidy        增加缺少的module，删除无用的modulego mod vendor      将依赖复制到vendor下go mod verify      校验依赖go mod why         解释为什么需要依赖</code></pre><h2 id="go-mod文件"><a href="#go-mod文件" class="headerlink" title="go.mod文件"></a>go.mod文件</h2><p>go.mod文件记录了项目所有的依赖信息，其结构大致如下：</p><pre class=" language-sh"><code class="language-sh">module github.com/Q1mi/studygo/bloggergo 1.16require (    github.com/DeanThompson/ginpprof v0.0.0-20190408063150-3be636683586    github.com/gin-gonic/gin v1.4.0    github.com/go-sql-driver/mysql v1.4.1    github.com/jmoiron/sqlx v1.2.0    github.com/satori/go.uuid v1.2.0    google.golang.org/appengine v1.6.1 // indirect)</code></pre><p>其中，</p><ul><li><code>module</code>用来定义包名</li><li><code>require</code>用来定义依赖包及版本</li><li><code>indirect</code>表示间接引用</li></ul><p>依赖的版本</p><p>go mod支持语义化版本号，比如<code>go get foo@v1.2.3</code>，也可以跟git的分支或tag，比如<code>go get foo@master</code>，当然也可以跟git提交哈希，比如<code>go get foo@e3702bed2</code>。关于依赖的版本支持以下几种格式：</p><pre class=" language-go"><code class="language-go">gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>tomb<span class="token punctuation">.</span>v1 v1<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20141024135613</span><span class="token operator">-</span>dd632973f1e7gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>vmihailenco<span class="token operator">/</span>msgpack<span class="token punctuation">.</span>v2 v2<span class="token number">.9</span><span class="token punctuation">.</span><span class="token number">1</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>yaml<span class="token punctuation">.</span>v2 <span class="token operator">&lt;=</span>v2<span class="token number">.2</span><span class="token punctuation">.</span><span class="token number">1</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>tatsushid<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>fastping v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20160109021039</span><span class="token operator">-</span>d7bb493dee3elatest</code></pre><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>在国内访问golang.org/x的各个包都需要翻墙，你可以在go.mod中使用replace替换成github上对应的库。</p><pre class=" language-go"><code class="language-go"><span class="token function">replace</span> <span class="token punctuation">(</span>    golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>crypto v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20180820150726</span><span class="token operator">-</span>614d502a4dac <span class="token operator">=</span><span class="token operator">></span> github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>crypto v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20180820150726</span><span class="token operator">-</span>614d502a4dac    golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>net v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20180821023952</span><span class="token operator">-</span>922f4815f713 <span class="token operator">=</span><span class="token operator">></span> github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>net v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20180826012351</span><span class="token operator">-</span>8a410e7b638d    golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>text v0<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">=</span><span class="token operator">></span> github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>text v0<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h2><p>在项目中执行<code>go get</code>命令可以下载依赖包，并且还可以指定下载的版本。</p><ol><li>运行<code>go get -u</code>将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li><li>运行<code>go get -u=patch</code>将会升级到最新的修订版本</li><li>运行<code>go get package@version</code>将会升级到指定的版本号version</li></ol><p>如果下载所有依赖可以使用<code>go mod download</code>命令。</p><h2 id="整理依赖"><a href="#整理依赖" class="headerlink" title="整理依赖"></a>整理依赖</h2><p>在代码中删除依赖代码后，相关的依赖库并不会在<code>go.mod</code>文件中自动移除。这种情况下可以使用<code>go mod tidy</code>命令更新<code>go.mod</code>中的依赖关系。</p><h2 id="go-mod-edit"><a href="#go-mod-edit" class="headerlink" title="go mod edit"></a>go mod edit</h2><blockquote><p>格式化</p></blockquote><p>因为可以手动修改go.mod文件，所以有些时候需要格式化该文件。Go提供了一下命令：</p><pre class=" language-bash"><code class="language-bash">go mod edit -fmt</code></pre><blockquote><p>添加依赖项</p></blockquote><pre class=" language-bash"><code class="language-bash">go mod edit -require<span class="token operator">=</span>golang.org/x/text</code></pre><blockquote><p>移除依赖项</p></blockquote><p>如果只是想修改<code>go.mod</code>文件中的内容，那么可以运行<code>go mod edit -droprequire=package path</code>，比如要在<code>go.mod</code>中移除<code>golang.org/x/text</code>包，可以使用如下命令：</p><pre class=" language-bash"><code class="language-bash">go mod edit -droprequire<span class="token operator">=</span>golang.org/x/text</code></pre><p>关于<code>go mod edit</code>的更多用法可以通过<code>go help mod edit</code>查看。</p><h2 id="项目中使用go-module"><a href="#项目中使用go-module" class="headerlink" title="项目中使用go module"></a>项目中使用go module</h2><blockquote><p>已有项目</p></blockquote><p>如果需要对一个已经存在的项目启用<code>go module</code>，可以按照以下步骤操作：</p><ol><li>在项目目录下执行<code>go mod init</code>，生成一个<code>go.mod</code>文件。</li><li>执行<code>go get</code>，查找并记录当前项目的依赖，同时生成一个<code>go.sum</code>记录每个依赖库的版本和哈希值。</li></ol><blockquote><p>新项目</p></blockquote><p>对于一个新创建的项目，可以在项目文件夹下按照以下步骤操作：</p><ol><li>执行<code>go mod init 项目名</code>命令，在当前项目文件夹下创建一个<code>go.mod</code>文件。</li><li>手动编辑<code>go.mod</code>中的require依赖项或执行<code>go get</code>自动发现、维护依赖。</li></ol><h2 id="使用go-module导入本地包"><a href="#使用go-module导入本地包" class="headerlink" title="使用go module导入本地包"></a>使用go module导入本地包</h2><p>假设存在两个包：demo和test，其中demo包中会导入test包并使用其方法。</p><p><strong>test/test.go</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> test<span class="token keyword">import</span> <span class="token string">"fmt"</span>fun <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test.Test()"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>在同一个项目下</p></blockquote><p><strong>目录结构</strong>：</p><pre class=" language-bash"><code class="language-bash">demo├── go.mod├── main.go└── <span class="token function">test</span>    └── test.go</code></pre><p><strong>1、导入包</strong>；</p><p>在<code>demo/go.mod</code>中按如下定义：</p><pre class=" language-go"><code class="language-go">module demo<span class="token keyword">go</span> <span class="token number">1.16</span></code></pre><p>然后再<code>demo/main.go</code>中按如下方式导入test：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"demo/test"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"main.main()"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>不在同一个项目下</p></blockquote><pre class=" language-bash"><code class="language-bash">├── demo│   ├── go.mod│   └── main.go└── <span class="token function">test</span>    ├── go.mod    └── test.go</code></pre><p><strong>1、导入包</strong>；</p><p>对demo和test进行module初始化（也就是对这两个项目分别进行<code>go mod init</code>），然后在<code>demo/main.go</code>中按如下方式导入：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    test<span class="token punctuation">.</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"main.main()"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>2、指定test包的路径</strong></p><p>因为这两个包不在同一个项目路径下，想要导入本地包，并且这些包也没有发布到远程的github或其他代码仓库地址。这个时候就需要在<code>go.mod</code>文件中使用<code>replace</code>指令。</p><p>在调用方<code>demo/go.mod</code>中按如下方式指定使用相对路径来寻找<code>test</code>包：</p><pre class=" language-go"><code class="language-go">module demo<span class="token keyword">go</span> <span class="token number">1.16</span>require <span class="token string">"test"</span> v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span>replace <span class="token string">"test"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"../test"</span></code></pre><h1 id="四、Go基础"><a href="#四、Go基础" class="headerlink" title="四、Go基础"></a>四、Go基础</h1><h2 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h2><h3 id="1、Go语言的主要特征"><a href="#1、Go语言的主要特征" class="headerlink" title="1、Go语言的主要特征"></a>1、Go语言的主要特征</h3><ul><li>自动立即回收</li><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理</li><li>匿名函数和闭包</li><li>类型和接口</li><li>并发编程</li><li>反射</li><li>语言交互性</li></ul><h3 id="2、Go语言命名"><a href="#2、Go语言命名" class="headerlink" title="2、Go语言命名"></a>2、Go语言命名</h3><p><strong>1、Go的函数、变量、常量、自定义类型、包<code>(package)</code>的命名方式遵循以下规则：</strong></p><ul><li>首字符可以是任意的Unicode字符或者下划线</li><li>剩余字符可以是Unicode字符、下划线、数字</li><li>字符长度不限</li></ul><p><strong>2、Go只有25个关键字</strong></p><pre><code>break        default      func         interface    selectcase         defer        go           map          structchan         else         goto         package      switchconst        fallthrough  if           range        typecontinue     for          import       return       var</code></pre><p><strong>3、Go还有37个保留字</strong></p><pre><code>Constants:    true  false  iota  nilTypes:    int  int8  int16  int32  int64  uint  uint8  uint16  uint32  uint64  uintptrfloat32  float64  complex128  complex64bool  byte  rune  string  errorFunctions:   make  len  cap  new  append  copy  close  deletecomplex  real  imagpanic  recover</code></pre><p><strong>4、可见性</strong></p><ul><li>声明在函数内部，是函数的本地值，类似<code>private</code></li><li>声明在函数外部，是对当前包可见(包内所有<code>.go</code>文件都可见)的全局值，类似<code>protect</code></li><li>声明在函数外部且首字母大写是所有包可见的全局值,类似<code>public</code></li></ul><h3 id="3、Go语言声明"><a href="#3、Go语言声明" class="headerlink" title="3、Go语言声明"></a>3、Go语言声明</h3><p>有四种主要声明方式：</p><ul><li><code>var</code>声明变量</li><li><code>onst</code>声明常量）</li><li><code>type</code>声明类型</li><li><code>func</code>声明函数</li></ul><p>Go的程序是保存在多个.go文件中，文件的第一行就是package XXX声明，用来说明该文件属于哪个包(package)，package声明下来就是import声明，再下来是类型，变量，常量，函数的声明。‘</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p><code>_</code>是特殊标识符，用来忽略结果。</p><h3 id="1、在import中"><a href="#1、在import中" class="headerlink" title="1、在import中"></a>1、在import中</h3><p>当导入一个包时，该包下的文件里所有<code>init()</code>函数都会被执行，然而，有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行<code>init()</code>函数而已。这个时候就可以使用<code>import</code>引用该包。即使用<code>import _ 包路径</code>只是引用该包，仅仅是为了调用<code>init()</code>函数，所以无法通过包名来调用包中的其他函数。</p><h3 id="2、在代码中"><a href="#2、在代码中" class="headerlink" title="2、在代码中"></a>2、在代码中</h3><blockquote><p>解释一</p></blockquote><p>下划线意思是忽略这个变量。比如os.Open，返回值为<code>*os.File，error</code>    </p><p>普通写法：</p><pre class=" language-go"><code class="language-go">f<span class="token punctuation">,</span>err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"xxxxxxx"</span><span class="token punctuation">)</span></code></pre><p>如果此时不需要知道返回的错误值，就可以用</p><pre class=" language-go"><code class="language-go">f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"xxxxxx"</span><span class="token punctuation">)</span> </code></pre><p>如此则忽略了<code>error</code>变量。</p><blockquote><p>解释二</p></blockquote><p>   占位符，意思是那个位置本应赋给某个值，但是咱们不需要这个值。所以就把该值赋给下划线，意思是丢掉不要。这样编译器可以更好的优化，任何类型的单个值都可以丢给下划线。这种情况是占位用的，方法返回两个结果，而你只想要一个结果。那另一个就用<code>_</code> 占位，而如果用变量的话，不使用，编译器是会报错的。</p><blockquote><p>补充</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"database/sql"</span><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span></code></pre><p>第二个import就是不直接使用mysql包，只是执行一下这个包的init函数，把mysql的驱动注册到sql包里，然后程序里就可以使用sql包来访问mysql数据库了。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。</p><h3 id="1、整型"><a href="#1、整型" class="headerlink" title="1、整型"></a>1、整型</h3><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">uint8</td><td align="center">无符号 8位整型 (0 到 255)</td></tr><tr><td align="center">uint16</td><td align="center">无符号 16位整型 (0 到 65535)</td></tr><tr><td align="center">uint32</td><td align="center">无符号 32位整型 (0 到 4294967295)</td></tr><tr><td align="center">uint64</td><td align="center">无符号 64位整型 (0 到 18446744073709551615)</td></tr><tr><td align="center">int8</td><td align="center">有符号 8位整型 (-128 到 127)</td></tr><tr><td align="center">int16</td><td align="center">有符号 16位整型 (-32768 到 32767)</td></tr><tr><td align="center">int32</td><td align="center">有符号 32位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="center">int64</td><td align="center">有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><blockquote><p>特殊整型</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">uint</td><td align="center">32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td></tr><tr><td align="center">int</td><td align="center">32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td></tr><tr><td align="center">uintptr</td><td align="center">无符号整型，用于存放一个指针</td></tr></tbody></table><p><strong>注意：</strong> 在使用<code>int</code>和 <code>uint</code>类型时，不能假定它是32位或64位的整型，而是考虑<code>int</code>和<code>uint</code>可能在不同平台上的差异。</p><p><strong>注意事项</strong>：获取对象的长度的内建<code>len()</code>函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用<code>int</code>来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code>int</code>和 <code>uint</code>。</p><h3 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h3><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">float32</td><td align="center">遵循<code>IEEE 754</code>标准，最大范围约为 <code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code></td></tr><tr><td align="center">float64</td><td align="center">遵循<code>IEEE 754</code>标准，最大范围约为<code>1.8e308</code>，可以使用常量定义：<code>math.MaxFloat64</code></td></tr></tbody></table><p>打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>。</p><h3 id="3、复数"><a href="#3、复数" class="headerlink" title="3、复数"></a>3、复数</h3><p>在计算机中，复数是由两个浮点数表示的，其中一个表示实部（real），一个表示虚部（imag）</p><p><code>complex64</code>的实部和虚部为<code>32位</code>，<code>complex128</code>的实部和虚部为<code>64位</code>，其中 complex128 为复数的默认类型。</p><p>复数的值由三部分组成 RE + IMi，其中 RE 是实数部分，IM 是虚数部分，RE 和 IM 均为 float 类型，而最后的 i 是虚数单位。</p><p><strong>声明复数的语法格式如下所示：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>其中<code>name</code>为复数的变量名，<code>complex128</code>为复数的类型，<code>=</code>后面的<code>complex</code>为Go语言的内置函数用于为复数赋值，<code>x</code>、<code>y</code>分别表示构成该复数的两个<code>float64</code>类型的数值，<code>x</code>为实部，<code>y</code>为虚部。</p><p>上面的声明语句也可以简写为下面的形式：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><p>对于一个复数<code>z := complex(x, y)</code>，可以通过Go语言的内置函数<code>real(z)</code>来获得该复数的实部，也就是 <code>x</code>；通过<code>imag(z)</code>获得该复数的虚部，也就是<code>y</code>。</p><h3 id="4、布尔型"><a href="#4、布尔型" class="headerlink" title="4、布尔型"></a>4、布尔型</h3><p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true</code>和<code>false</code>两个值。</p><p>布尔值可以和<code>&amp;&amp;</code>（AND）和<code>||</code>（OR）操作符结合，并且有短路行为，如果运算符左边的值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，因此下面的表达式总是安全的：</p><pre class=" language-go"><code class="language-go">s <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'x'</span></code></pre><p>其中<code>s[0]</code>操作如果应用于空字符串将会导致<code>panic</code>异常。</p><p>因为<code>&amp;&amp;</code>的优先级比<code>||</code>高（&amp;&amp; 对应逻辑乘法，|| 对应逻辑加法，乘法比加法优先级要高），所以下面的布尔表达式可以不加小括号：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> <span class="token string">'a'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span> <span class="token operator">||</span>    <span class="token string">'A'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span> <span class="token operator">||</span>    <span class="token string">'0'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...ASCII字母或数字...</span><span class="token punctuation">}</span></code></pre><p>布尔值并不会隐式转换为数字值 0 或 1，反之亦然，必须使用 if 语句显式的进行转换：</p><pre class=" language-go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">if</span> b <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>如果需要经常做类似的转换，可以将转换的代码封装成一个函数，如下所示：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 如果b为真，btoi返回1；如果为假，btoi返回0</span><span class="token keyword">func</span> <span class="token function">btoi</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> b <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>数字到布尔型的逆转换非常简单，不过为了保持对称，我们也可以封装一个函数：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// itob报告是否为非零。</span><span class="token keyword">func</span> <span class="token function">itob</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">}</span></code></pre><p><strong>注意：</strong></p><ol><li>布尔类型变量的默认值为<code>false</code>。</li><li>Go 语言中不允许将整型强制转换为布尔型。</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ol><h3 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a>5、字符串</h3><p> Go 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 字符串的值为双引号<code>"</code>中的内容，可以在Go语言的源码中直接添加非<code>ASCII</code>码字符，例如：</p><pre class=" language-go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">"hello"</span>s2 <span class="token operator">:=</span> <span class="token string">"Go,你好"</span></code></pre><blockquote><p>字符串转义符</p></blockquote><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><table><thead><tr><th align="center">转义符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>\r</code></td><td align="center">回车符（返回行首）</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行符（直接跳到下一行的同列位置）</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\'</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\"</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr></tbody></table><p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str := \"C:\\Users\\lskj\\Desktop\""</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>多行字符串</p></blockquote><p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p><pre class=" language-go"><code class="language-go">s1 <span class="token operator">:=</span> <span class="token string">`第一行第二行第三行`</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p><blockquote><p>字符串的常用操作</p></blockquote><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">len(str)</td><td align="center">求长度</td></tr><tr><td align="center">+或fmt.Sprintf</td><td align="center">拼接字符串</td></tr><tr><td align="center">strings.Split</td><td align="center">分割</td></tr><tr><td align="center">strings.contains</td><td align="center">判断是否包含</td></tr><tr><td align="center">strings.HasPrefix,strings.HasSuffix</td><td align="center">前缀/后缀判断</td></tr><tr><td align="center">strings.Index(),strings.LastIndex()</td><td align="center">子串出现的位置</td></tr><tr><td align="center">strings.Join(a[]string, sep string)</td><td align="center">join操作</td></tr></tbody></table><h3 id="6、byte与rune类型"><a href="#6、byte与rune类型" class="headerlink" title="6、byte与rune类型"></a>6、byte与rune类型</h3><ul><li><p><code>byte</code>类似<code>uint8</code>，一般用于强调数值是一个原始的数据而不是一个小的整数，代表了<code>ASCII码</code>的一个字符。</p></li><li><p><code>rune</code>通常用于表示一个Unicode码点，代表一个<code>UTF-8</code>字符。当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p></li></ul><p>组成每个字符串的元素叫做<strong>字符</strong>，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号<code>'</code>包裹起来。 </p><p>字符串底层是一个<code>byte</code>数组，所以可以和<code>[]byte</code>类型相互转换。字符串是不能修改的字符串是由<code>byte</code>字节组成，所以字符串的长度是<code>byte</code>字节的长度。 <code>rune</code>类型用来表示<code>utf8</code>字符，一个<code>rune</code>字符由一个或多个byte组成。</p><h3 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h3><p>要修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">changeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token string">"hello"</span>    <span class="token comment" spellcheck="true">// 强制类型转换</span>    byteS1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    byteS1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteS1<span class="token punctuation">)</span><span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> <span class="token string">"男生"</span>    runeS2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    runeS2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'女'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>runeS2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p><p>强制类型转换的基本语法如下：</p><pre class=" language-go"><code class="language-go"><span class="token function">T</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span></code></pre><p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等。</p><pre class=" language-go"><code class="language-go">类型B的值 <span class="token operator">=</span> 类型<span class="token function">B</span><span class="token punctuation">(</span>类型A的值<span class="token punctuation">)</span></code></pre><ul><li>类型转换只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（将 int16 转换为 int32）。当从一个取值范围较大的类型转换到取值范围较小的类型时（将 int32 转换为 int16 或将 float32 转换为 int），会发生精度丢失（截断）的情况。</li><li>浮点数在转换为整型时，会将小数部分去掉，只保留整数部分。</li></ul><h3 id="数字字面量语法"><a href="#数字字面量语法" class="headerlink" title="数字字面量语法"></a>数字字面量语法</h3><p>数字字面量语法（Number literals syntax）。Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：</p><p><code>v := 0b00101101</code>， 代表二进制的 101101，相当于十进制的 45。 <code>v := 0o377</code>，代表八进制的 377，相当于十进制的 255。 <code>v := 0x1p-2</code>，代表十六进制的 1 除以 2²，也就是 0.25。</p><p>而且还允许我们用 <code>_</code> 来分隔数字，比如说： <code>v := 123_456</code> 表示 v 的值等于 123456。</p><p>我们可以借助fmt函数来将一个整数以不同进制形式展示。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 十进制</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1010  占位符%b表示二进制</span>    <span class="token comment" spellcheck="true">// 八进制  以0开头</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">077</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%o \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 77</span>    <span class="token comment" spellcheck="true">// 十六进制  以0x开头</span>    <span class="token keyword">var</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0xff</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ff</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%X \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// FF</span><span class="token punctuation">}</span></code></pre><h2 id="内置类型和函数"><a href="#内置类型和函数" class="headerlink" title="内置类型和函数"></a>内置类型和函数</h2><h3 id="1、内置类型"><a href="#1、内置类型" class="headerlink" title="1、内置类型"></a>1、内置类型</h3><blockquote><p>值类型</p></blockquote><pre><code>boolint(32 or 64), int8, int16, int32, int64uint(32 or 64), uint8(byte), uint16, uint32, uint64float32, float64stringcomplex64, complex128array    -- 固定长度的数组</code></pre><blockquote><p>引用类型（指针类型）</p></blockquote><pre><code>slice   -- 序列数组(最常用)map     -- 映射chan    -- 管道</code></pre><h3 id="2、内置函数"><a href="#2、内置函数" class="headerlink" title="2、内置函数"></a>2、内置函数</h3><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p><pre><code>append          -- 用来追加元素到数组、slice中,返回修改后的数组、sliceclose           -- 主要用来关闭channeldelete            -- 从map中删除key对应的valuepanic            -- 停止常规的goroutine  （panic和recover：用来做错误处理）recover         -- 允许程序定义goroutine的panic动作real            -- 返回complex的实部   （complex、real imag：用于创建和操作复数）imag            -- 返回complex的虚部make            -- 用来分配内存，返回Type本身(只能应用于slice, map, channel)new                -- 用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针cap                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）copy            -- 用于复制和连接slice，返回复制的数目len                -- 来求长度，比如string、array、slice、map、channel ，返回长度print、println     -- 底层打印函数，在部署环境中建议使用 fmt 包</code></pre><blockquote><p>内置接口error</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//只要实现了Error()函数，返回值为String的都实现了err接口</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    String<span class="token punctuation">}</span></code></pre><h2 id="init函数与main函数"><a href="#init函数与main函数" class="headerlink" title="init函数与main函数"></a>init函数与main函数</h2><h3 id="1、init函数"><a href="#1、init函数" class="headerlink" title="1、init函数"></a>1、init函数</h3><p>go语言中<code>init</code>函数用于包<code>(package)</code>的初始化，该函数是go语言的一个重要特性。</p><ul><li>init函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等</li><li>每个包可以拥有多个init函数</li><li>包的每个源文件也可以拥有多个init函数 </li><li>同一个包中多个init函数的执行顺序go语言没有明确的定义(说明)</li><li>不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序</li><li>init函数不能被其他函数调用，而是在main函数执行之前，自动被调用</li></ul><h3 id="2、main函数"><a href="#2、main函数" class="headerlink" title="2、main函数"></a>2、main函数</h3><p>Go语言程序的默认入口函数(主函数)：<code>func main()</code>，函数体用<code>{}</code>一对括号包裹。</p><blockquote><p>init函数与main函数的异同</p></blockquote><p><strong>相同点</strong>：两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。</p><p><strong>不同点</strong>：</p><ul><li>init可以应用于任意包中，且可以重复定义多个。</li><li>main函数只能用于main包中，且只能定义一个。</li></ul><p><strong>执行顺序</strong>：</p><ul><li><p>对同一个go文件的<code>init()</code>调用顺序是从上到下的。</p></li><li><p>对同一个package中不同文件是按文件名字符串比较<strong>从小到大</strong>顺序调用各文件中的<code>init()</code>函数。</p></li><li><p>对于不同的<code>package</code>，如果不相互依赖的话，按照main包中”先<code>import</code>的后调用”的顺序调用其包中的<code>init()</code>，如果<code>package</code>存在依赖，则先调用最早被依赖的<code>package</code>中的<code>init()</code>，最后调用<code>main</code>函数。</p></li></ul><p>如果<code>init</code>函数中使用了<code>println()</code>或者<code>print()</code>，在执行过程中这两个不会按照想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。</p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><blockquote><p>标准格式</p></blockquote><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。声明变量的一般形式是使用<code>var</code>关键字，<strong>行尾无需分号</strong>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 变量名 变量类型</code></pre><p>变量初始化：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 变量名 类型 <span class="token operator">=</span> 表达式</code></pre><blockquote><p>批量格式</p></blockquote><p>变量声明时可以声明多个变量：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    a <span class="token builtin">string</span>    b <span class="token builtin">int</span>    c <span class="token builtin">bool</span>    d <span class="token builtin">float32</span><span class="token punctuation">)</span></code></pre><blockquote><p>简短格式</p></blockquote><p>除 var 关键字外，还可使用更加简短的变量定义和初始化语法。</p><pre class=" language-go"><code class="language-go">名字 <span class="token operator">:=</span> 表达式</code></pre><p>需要注意的是，简短格式有以下限制：</p><ul><li>定义变量，同时显式初始化。</li><li>不能提供数据类型。</li><li>只能用在函数内部。</li></ul><p>和<code>var</code>形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量。</p><p><strong>注</strong>：</p><ul><li>指定变量类型，如果没有初始化，则变量默认为零值。</li><li>将变量的类型省略时，编译器会根据值自行判定变量类型。</li><li>如果变量已经使用 var 声明过了，再使用 <code>:=</code>声明变量，就产生编译错误。</li></ul><blockquote><p>匿名变量</p></blockquote><p>在使用多重赋值时，如果想要忽略某个值，可以使用<code>匿名变量（anonymous variable）</code>。 匿名变量用一个下划线<code>_</code>表示（<code>_</code>本身就是一个特殊的标识符，被称为空白标识符），例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Q1mi"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"y="</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。</p><p><strong>注</strong>：</p><ul><li>函数外的每个语句都必须以关键字开始（<code>var</code>、<code>const</code>、<code>func</code>等）</li><li><code>:=</code>不能使用在函数外</li><li><code>_</code>多用于占位，表示忽略值</li></ul><blockquote><p>变量的作用域</p></blockquote><p>根据变量定义位置的不同，可以分为以下三个类型：</p><ul><li>函数内定义的变量称为局部变量</li><li>函数外定义的变量称为全局变量</li><li>函数定义中的变量称为形式参数</li></ul><h3 id="2、常量"><a href="#2、常量" class="headerlink" title="2、常量"></a>2、常量</h3><p>常量的定义格式和变量的声明语法类似：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> 常量名 常量类型 <span class="token operator">=</span> 值</code></pre><p>常量的值必须是能够在编译时就能够确定的，可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。</p><p>与变量声明一样，也可以批量声明多个常量：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    pi <span class="token operator">=</span> <span class="token number">3.1415926</span>    title <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span></code></pre><p>所有常量的运算都可以在编译期完成，这样不仅可以减少运行时的工作，也方便其他代码的编译优化，当操作数是常量时，一些运行时的错误也可以在编译时被发现，例如整数除零、字符串索引越界、任何导致无效浮点数的操作等。</p><p>常量间的所有算术运算、逻辑运算和比较运算的结果也是常量，对常量的类型转换操作或以下函数调用都是返回常量结果：<code>len</code>、<code>cap</code>、<code>real</code>、<code>imag</code>、<code>complex</code> 和<code>unsafe.Sizeof</code>。</p><blockquote><p>iota</p></blockquote><p><code>iota</code>是go语言的常量计数器，只能在常量的表达式中使用。</p><p>常量声明可以使用<code>iota</code>常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个 const 声明语句中，在第一个声明的常量所在的行，iota 将会被置为 0，然后在每一个有常量声明的行加一。</p><p>定义一个 Weekday 命名类型，然后为一周的每天定义了一个常量，从周日 0 开始:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Weekday <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Sunday Weekday <span class="token operator">=</span> <span class="token boolean">iota</span>    Monday    Tuesday    Wednesday    Thursday    Friday    Saturday<span class="token punctuation">)</span></code></pre><p>在其它编程语言中，这种类型一般被称为枚举类型。</p><p><strong>常见的iota示例</strong>：</p><p>使用<code>_</code>跳过某些值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>    n2        <span class="token comment" spellcheck="true">//1</span>    <span class="token boolean">_</span>    n4        <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">)</span></code></pre><p><code>iota</code>声明中间插队</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>    n2 <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true">//100</span>    n3 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//2</span>    n4        <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">)</span><span class="token keyword">const</span> n5 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span></code></pre><p>定义数量级 （这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将1的二进制表示向左移10位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的1024。同理<code>2&lt;&lt;2</code>表示将2的二进制表示向左移2位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的8。）</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token boolean">_</span>  <span class="token operator">=</span> <span class="token boolean">iota</span>    KB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>    MB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>    GB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>    TB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>    PB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>多个<code>iota</code>定义在一行</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//1,2</span>    c<span class="token punctuation">,</span> d                      <span class="token comment" spellcheck="true">//2,3</span>    e<span class="token punctuation">,</span> f                      <span class="token comment" spellcheck="true">//3,4</span><span class="token punctuation">)</span></code></pre><blockquote><p>无类型常量</p></blockquote><p>Go语言的常量有个不同寻常之处。虽然一个常量可以有任意一个确定的基础类型，例如<code>int</code>或<code>float64</code>，或者是类似<code>time.Duration</code>这样的基础类型，但是许多常量并没有一个明确的基础类型。</p><p>编译器为这些没有明确的基础类型的数字常量提供比基础类型更高精度的算术运算，可以认为至少有<code>256bit</code>的运算精度。这里有六种未明确类型的常量类型，分别是<strong>无类型的布尔型、无类型的整数、无类型的字符、无类型的浮点数、无类型的复数、无类型的字符串</strong>。</p><p>通过延迟明确常量的具体类型，不仅可以提供更高的运算精度，而且可以直接用于更多的表达式而不需要显式的类型转换。</p><p>例：<code>math.Pi</code>无类型的浮点数常量，可以直接用于任意需要浮点数或复数的地方：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">float32</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi<span class="token keyword">var</span> y <span class="token builtin">float64</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi<span class="token keyword">var</span> z <span class="token builtin">complex128</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi</code></pre><p>如果<code>math.Pi</code>被确定为特定类型，比如 <code>float64</code>，那么结果精度可能会不一样，同时对于需要<code>float32</code>或<code>complex128</code>类型值的地方则需要一个明确的强制类型转换：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> Pi64 <span class="token builtin">float64</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi<span class="token keyword">var</span> x <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>Pi64<span class="token punctuation">)</span><span class="token keyword">var</span> y <span class="token builtin">float64</span> <span class="token operator">=</span> Pi64<span class="token keyword">var</span> z <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex128</span><span class="token punctuation">(</span>Pi64<span class="token punctuation">)</span></code></pre><p>对于常量面值，不同的写法可能会对应不同的类型。例如 <code>0</code>、<code>0.0</code>、<code>0i</code> 和 <code>\u0000</code>虽然有着相同的常量值，但是它们分别对应无类型的整数、无类型的浮点数、无类型的复数和无类型的字符等不同的常量类型。同样，<code>true</code>和<code>false</code>也是无类型的布尔类型，字符串面值常量是无类型的字符串类型。</p><h1 id="五、Go容器"><a href="#五、Go容器" class="headerlink" title="五、Go容器"></a>五、Go容器</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，所以在Go语言中很少直接使用数组。</p><p>数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值</p><p>数组的声明语法如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 数组变量名 <span class="token punctuation">[</span>元素数量<span class="token punctuation">]</span>变量类型</code></pre><ul><li>数组变量名：数组声明及使用时的变量名。</li><li>元素数量：数组的元素数量，可以是一个表达式，但最终通过编译期计算的结果必须是整型数值，元素数量不能含有到运行时才能确认大小的数值。</li><li>变量类型：可以是任意基本类型，包括数组本身，类型为数组本身时，可以实现多维数组。</li></ul><p>数组的每个元素都可以通过索引下标来访问，索引下标的范围是从 0 开始到数组长度减1（len-1）的位置，内置函数<code>len()</code>可以返回数组中元素的个数，访问越界（下标在合法范围之外），则触发访问越界，会panic。</p><h3 id="1、数组的遍历"><a href="#1、数组的遍历" class="headerlink" title="1、数组的遍历"></a>1、数组的遍历</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment" spellcheck="true">// for循环遍历</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// for range遍历</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>默认情况下，数组的每个元素都会被初始化为元素类型对应的零值，对于数字类型来说就是 0，同时也可以使用数组字面值语法，用一组值来初始化数组。</li><li>在数组的定义中，如果在数组长度的位置出现“…”省略号，则表示数组的长度是根据初始化值的个数来计算。</li><li>数组的长度是数组类型的一个组成部分，因此 [3]int 和 [4]int 是两种不同的数组类型，数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。</li></ul><h3 id="2、多维数组"><a href="#2、多维数组" class="headerlink" title="2、多维数组"></a>2、多维数组</h3><p>Go 语言支持多维数组，以下为常用的多维数组声明方式：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 数组变量名 <span class="token punctuation">[</span>元素数量<span class="token punctuation">]</span>元素数量<span class="token punctuation">]</span><span class="token operator">...</span>元素数量<span class="token punctuation">]</span> 变量类型</code></pre><p> 多维数组<strong>只有第一层</strong>可以使用<code>...</code>来让编译器推导数组长度。</p><blockquote><p>比较两个数组是否相等</p></blockquote><p>如果两个数组类型相同（包括数组的长度，数组中元素的类型）的情况下，我们可以直接通过较运算符（<code>==</code>和<code>!=</code>）来判断两个数组是否相等，只有当两个数组的所有元素都是相等的时候数组才是相等的，不能比较两个类型不同的数组，否则程序将无法完成编译。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Go 语言切片是对数组的抽象。</p><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p><p>切片（slice）是对数组的一个连续片段的引用，所以切片是一个引用类型，这个片段可以是整个数组，也可以是由起始和终止索引标识的一些项的子集，需要注意的是，终止索引标识的项不包括在切片内。</p><p>切片的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。切片一般用于快速地操作一块数据集合。</p><h3 id="1、定义切片"><a href="#1、定义切片" class="headerlink" title="1、定义切片"></a>1、定义切片</h3><blockquote><p>声明未指定大小的数组来定义切片</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 变量名 <span class="token punctuation">[</span><span class="token punctuation">]</span>T</code></pre><p>T：表示切片中的元素类型。切片不需要说明长度。</p><blockquote><p>使用make()函数来创建切片</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以简写为</span>slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span></code></pre><p>也可以指定容量，其中<code>capacity</code>为可选参数。</p><pre class=" language-go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> length<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span></code></pre><p>这里<code>len</code>是数组的长度并且也是切片的初始长度。</p><p>使<code>make()</code>函数生成的切片一定发生了内存分配操作，但给定开始与结束位置（包括切片复位）的切片只是将新的切片结构指向已经分配好的内存区域，设定开始与结束位置，不会发生内存分配操作。</p><h3 id="2、切片初始化"><a href="#2、切片初始化" class="headerlink" title="2、切片初始化"></a>2、切片初始化</h3><pre class=" language-go"><code class="language-go">s <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span> </code></pre><p>直接初始化切片，<code>[]</code>表示是切片类型，<code>{1,2,3}</code> 初始化值依次是 <strong>1,2,3</strong>，其 <code>cap=len=3</code>。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//生成切片的格式中，当开始和结束位置都被忽略时，生成的切片将表示和原切片一致的切片，并且生成的切片与原切片在数据内容上也是一致的</span>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//表示原有的切片。arr[0:0]，表示重置切片，清空拥有的元素。把切片的开始和结束位置都设为0时，生成的切片将变空</span><span class="token comment" spellcheck="true">//初始化切片 s ，是数组 arr 的引用</span>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片</span><span class="token comment" spellcheck="true">//默认 startIndex 时将表示从 arr 的第一个元素开始</span>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//默认 endIndex 时将表示一直到arr的最后一个元素</span>s <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//通过切片 s 初始化切片 s1</span>s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//通过内置函数make()初始化切片s，[]int标识为其元素类型为int的切片</span>s <span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span></code></pre><h3 id="3、len-和cap"><a href="#3、len-和cap" class="headerlink" title="3、len()和cap()"></a>3、len()和cap()</h3><p>切片是可索引的，可以由<code>len()</code>获取长度。</p><p>切片提供了计算容量的方法<code>cap()</code>可以测量切片最长可以达到多少。</p><h3 id="4、空（nil）切片"><a href="#4、空（nil）切片" class="headerlink" title="4、空（nil）切片"></a>4、空（nil）切片</h3><p>一个切片在未初始化之前默认为<code>nil</code>，长度为<code>0</code>。</p><blockquote><p>切片不能直接比较</p></blockquote><p>切片之间是不能比较的，不能使用<code>==</code>操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和<code>nil</code>比较。 一个<code>nil</code>值的切片并没有底层数组，一个<code>nil</code>值的切片的长度和容量都是0。但是不能说一个长度和容量都是0的切片一定是<code>nil</code>，例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>         <span class="token comment" spellcheck="true">//len(s1)=0;cap(s1)=0;s1==nil</span>s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//len(s2)=0;cap(s2)=0;s2!=nil</span>s3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//len(s3)=0;cap(s3)=0;s3!=nil</span></code></pre><p>所以判断一个切片是否为空，需使用<code>len(s) == 0</code>来判断，而不应该使用<code>s == nil</code>来判断。</p><h3 id="5、切片截取"><a href="#5、切片截取" class="headerlink" title="5、切片截取"></a>5、切片截取</h3><p>可以通过设置下限及上限来设置截取切片 *[lower-bound:upper-bound]*，实例如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 创建切片 */</span>    numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 打印原始切片 */</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numbers =="</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 打印子切片从索引1(包含) 到索引4(不包含)*/</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numbers[1:4] =="</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 默认下限为 0*/</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numbers[:3] =="</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 默认上限为 len(s)*/</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"numbers[4:] =="</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    numbers1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 打印子切片从索引  0(包含) 到索引 2(不包含) */</span>    number2 <span class="token operator">:=</span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 打印子切片从索引 2(包含) 到索引 5(不包含) */</span>    number3 <span class="token operator">:=</span> numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>number3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d slice=%v\n"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行以上代码输出结果为：</p><pre class=" language-bash"><code class="language-bash">len<span class="token operator">=</span>9 cap<span class="token operator">=</span>9 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7 8<span class="token punctuation">]</span>numbers <span class="token operator">==</span> <span class="token punctuation">[</span>0 1 2 3 4 5 6 7 8<span class="token punctuation">]</span>numbers<span class="token punctuation">[</span>1:4<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span>1 2 3<span class="token punctuation">]</span>numbers<span class="token punctuation">[</span>:3<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span>0 1 2<span class="token punctuation">]</span>numbers<span class="token punctuation">[</span>4:<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span>4 5 6 7 8<span class="token punctuation">]</span>len<span class="token operator">=</span>0 cap<span class="token operator">=</span>5 slice<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>len<span class="token operator">=</span>2 cap<span class="token operator">=</span>9 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1<span class="token punctuation">]</span>len<span class="token operator">=</span>3 cap<span class="token operator">=</span>7 slice<span class="token operator">=</span><span class="token punctuation">[</span>2 3 4<span class="token punctuation">]</span></code></pre><h3 id="6、append"><a href="#6、append" class="headerlink" title="6、append()"></a>6、append()</h3><p>Go语言的内建函数<code>append()</code>可以为切片动态添加元素。 可以一次添加一个元素，可以添加多个元素，也可以添加另一个切片中的元素（后面加…）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> numbers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 允许追加空切片 */</span>    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 向切片添加一个元素 */</span>    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 同时添加多个元素 */</span>    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>s<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d slice=%v\n"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码执行输出结果为：</p><pre class=" language-bash"><code class="language-bash">len<span class="token operator">=</span>0 cap<span class="token operator">=</span>0 slice<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>len<span class="token operator">=</span>1 cap<span class="token operator">=</span>1 slice<span class="token operator">=</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>len<span class="token operator">=</span>2 cap<span class="token operator">=</span>2 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1<span class="token punctuation">]</span>len<span class="token operator">=</span>5 cap<span class="token operator">=</span>6 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4<span class="token punctuation">]</span>len<span class="token operator">=</span>3 cap<span class="token operator">=</span>3 slice<span class="token operator">=</span><span class="token punctuation">[</span>5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>8 cap<span class="token operator">=</span>12 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7<span class="token punctuation">]</span></code></pre><p>通过var声明的零值切片可以在<code>append()</code>函数直接使用，无需初始化。</p><p>每个切片会指向一个底层数组，这个数组的容量够用就添加新增元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行<strong>扩容</strong>，此时该切片指向的底层数组就会更换。<strong>扩容</strong>操作往往发生在<code>append()</code>函数调用时，所以我们通常都需要用原变量接收append函数的返回值。</p><ul><li><p><code>append()</code>函数将元素追加到切片的最后并返回该切片。</p></li><li><p>切片的容量按照1，2，4，8，16这样的规则自动进行扩容，<strong>每次扩容后都是扩容前的2倍</strong>。</p></li></ul><h3 id="7、copy"><a href="#7、copy" class="headerlink" title="7、copy()"></a>7、copy()</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 创建切片 s 是之前切片的两倍容量*/</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 拷贝 numbers 的内容到 s */</span>    <span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>numbers<span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    s1 <span class="token operator">:=</span> s    <span class="token function">printSlice</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d slice=%v\n"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码执行结果如下：</p><pre class=" language-bash"><code class="language-bash">len<span class="token operator">=</span>8 cap<span class="token operator">=</span>8 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>8 cap<span class="token operator">=</span>16 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>8 cap<span class="token operator">=</span>16 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>8 cap<span class="token operator">=</span>16 slice<span class="token operator">=</span><span class="token punctuation">[</span>1 1 2 3 4 5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>8 cap<span class="token operator">=</span>16 slice<span class="token operator">=</span><span class="token punctuation">[</span>1 1 2 3 4 5 6 7<span class="token punctuation">]</span></code></pre><p>由于切片是引用类型，所以s和s1其实都指向了同一块内存地址。修改s1的同时s的值也会发生变化。</p><h3 id="8、从切片中删除元素"><a href="#8、从切片中删除元素" class="headerlink" title="8、从切片中删除元素"></a>8、从切片中删除元素</h3><p>Go语言中并没有删除切片元素的专用方法，但是可以使用切片本身的特性来删除元素。</p><blockquote><p>删除指定位置元素</p></blockquote><p> 代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除索引为0的元素</span>    numbers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token function">printSlice</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">printSlice</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d slice=%v\n"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码执行结果如下：</p><pre class=" language-bash"><code class="language-bash">len<span class="token operator">=</span>8 cap<span class="token operator">=</span>8 slice<span class="token operator">=</span><span class="token punctuation">[</span>0 1 2 3 4 5 6 7<span class="token punctuation">]</span>len<span class="token operator">=</span>7 cap<span class="token operator">=</span>8 slice<span class="token operator">=</span><span class="token punctuation">[</span>1 2 3 4 5 6 7<span class="token punctuation">]</span></code></pre><p>要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code>。</p><blockquote><p>从开头位置删除</p></blockquote><p>删除开头的元素可以直接移动数据指针：</p><pre class=" language-go"><code class="language-go">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除开头1个元素</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span>N<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除开头N个元素</span></code></pre><p>也可以不移动数据指针，但是将后面的数据向开头移动，可以用 append 原地完成（所谓原地完成是指在原有的切片数据对应的内存区间内完成，不会导致内存空间结构的变化）：</p><pre class=" language-go"><code class="language-go">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除开头1个元素</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除开头N个元素</span></code></pre><p>还可以用 copy() 函数来删除开头的元素：</p><pre class=" language-go"><code class="language-go">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除开头1个元素</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除开头N个元素</span></code></pre><blockquote><p>从中间位置删除</p></blockquote><p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用 append 或 copy 原地完成。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除中间1个元素</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span>N<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除中间N个元素</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除中间1个元素</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span>N<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除中间N个元素</span></code></pre><blockquote><p>从尾部删除</p></blockquote><pre class=" language-go"><code class="language-go">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除尾部1个元素</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span>N<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 删除尾部N个元素</span></code></pre><p>Go语言中删除切片元素的本质是，以被删除元素为分界点，将前后两个部分的内存重新连接起来。</p><p>连续容器的元素删除无论在任何语言中，都要将删除点前后的元素移动到新的位置，随着元素的增加，这个过程将会变得极为耗时，因此，当业务需要大量、频繁地从一个切片中删除元素时，如果对性能要求较高的话，就需要考虑更换其他的容器了（如双链表等能快速从删除点删除元素）。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map是一种无序的基于key-value的数据结构，Go语言中的map是引用类型，必须初始化才能使用。map是一种无序的键值对的集合。map最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p><p>map是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，map是无序的，我们无法决定它的返回顺序，这是因为map是使用 hash 表来实现的。</p><h3 id="1、定义map"><a href="#1、定义map" class="headerlink" title="1、定义map"></a>1、定义map</h3><p>以使用内建函数 make 也可以使用 map 关键字来定义map：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">/* 声明变量，默认 map 初始值是 nil */</span><span class="token keyword">var</span> 变量名 <span class="token keyword">map</span><span class="token punctuation">[</span>keyType<span class="token punctuation">]</span>valueType<span class="token comment" spellcheck="true">/* 使用 make 函数 */</span>变量名 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>keyType<span class="token punctuation">]</span>valueType<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 因map默认初始值为nil，需使用make()函数来分配内存,如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对 */</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>keyType<span class="token punctuation">]</span>valueType<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">cap</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//其中cap表示map的容量，该参数虽然不是必须的，但是应该在初始化map的时候就为其指定一个合适的容量</span></code></pre><ul><li>keyType：表示键的类型</li><li>valueType：表示键对应的值的类型</li></ul><p><strong>[keyType] 和 valueType 之间允许有空格</strong></p><h3 id="2、判断某个键是否存在"><a href="#2、判断某个键是否存在" class="headerlink" title="2、判断某个键是否存在"></a>2、判断某个键是否存在</h3><p>Go中判断map中键是否存在的写法：</p><pre class=" language-go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre><ul><li>value：map中该key对应的值，不存在该key，则value为其对应类型的默认值</li><li>ok：map中是否存在这个key</li></ul><h3 id="3、map的遍历"><a href="#3、map的遍历" class="headerlink" title="3、map的遍历"></a>3、map的遍历</h3><p>使用<code>for range</code>遍历map。例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    language <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    language<span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    language<span class="token punctuation">[</span><span class="token string">"golang"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    language<span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> language <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如只遍历值，可以使用下面的形式（将不需要的键使用<code>_</code>改为匿名变量形式）：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> language <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>只遍历键时，使用下面的形式（无须将值改为匿名变量形式，忽略值即可）：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> k <span class="token punctuation">:</span><span class="token keyword">range</span> language <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>注：<strong>遍历输出元素的顺序与填充顺序无关</strong>。如果需要特定顺序的遍历结果，正确的做法是先排序。</p><h3 id="4、map元素的删除"><a href="#4、map元素的删除" class="headerlink" title="4、map元素的删除"></a>4、map元素的删除</h3><p>Go语言提供了一个内置函数<code>delete()</code>，用于删除容器内的元素。</p><p>使用<code>delete()</code>内建函数从map中删除一组键值对，delete()函数的格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">,</span>键<span class="token punctuation">)</span></code></pre><ul><li>map为要删除的 map 实例</li><li>键为要删除的 map 中键值对的键</li></ul><blockquote><p>清空map中的所有元素</p></blockquote><p>Go语言中并没有为 map 提供任何清空所有元素的函数、方法。清空 map 的唯一办法就是重新 make 一个新的 map，不用担心垃圾回收的效率，Go语言中的并行垃圾回收效率比写一个清空函数要高效的多。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>列表是一种非连续的存储容器，由多个节点组成，节点通过一些变量记录彼此之间的关系，列表有多种实现方法，如单链表、双链表等。</p><h3 id="1、初始化列表"><a href="#1、初始化列表" class="headerlink" title="1、初始化列表"></a>1、初始化列表</h3><p><code>list</code>的初始化有两种方法：分别是使用 New() 函数和 var 关键字声明，两种方法的初始化效果都是一致的。</p><ul><li><p>通过<code>container/list</code>包的<code>New()</code>函数初始化list</p><pre class=" language-go"><code class="language-go">变量名 <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>通过<code>var</code>关键字声明初始化list</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 变量名 list<span class="token punctuation">.</span>List</code></pre></li></ul><p>列表与切片和ma 不同的是，列表并没有具体元素类型的限制，因此，列表的元素可以是任意类型，这既带来了便利，也引来一些问题，例如给列表中放入了一个<code>interface{}</code>类型的值，取出值后，如果要将<code>interface{}</code>转换为其他类型将会发生宕机。</p><h3 id="2、在列表中插入元素"><a href="#2、在列表中插入元素" class="headerlink" title="2、在列表中插入元素"></a>2、在列表中插入元素</h3><p>双链表支持从队列前方或后方插入元素，分别对应的方法是<code>PushFront</code>和<code>PushBack</code>。</p><p>这两个方法都会返回一个<code>*list.Element</code>结构，如果在以后的使用中需要删除插入的元素，则只能通过<code>*list.Element</code>配合<code>Remove()</code>方法进行删除，这种方法可以让删除更加效率化，同时也是双链表特性之一。</p><p>下面代码展示如何给 list 添加元素：</p><pre class=" language-go"><code class="language-go">l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//创建一个列表实例</span>l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"fist"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将fist字符串插入到列表的尾部，此时列表是空的，插入后只有一个元素</span>l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将数值67放入列表，此时，列表中已经存在fist元素，67这个元素将被放在fist的前面</span></code></pre><p>列表插入元素的方法如下：</p><table><thead><tr><th align="center">方  法</th><th align="center">功  能</th></tr></thead><tbody><tr><td align="center">InsertAfter(v interface {}, mark * Element) * Element</td><td align="center">在 mark 点之后插入元素，mark 点由其他插入函数提供</td></tr><tr><td align="center">InsertBefore(v interface {}, mark * Element) *Element</td><td align="center">在 mark 点之前插入元素，mark 点由其他插入函数提供</td></tr><tr><td align="center">PushBackList(other *List)</td><td align="center">添加 other 列表元素到尾部</td></tr><tr><td align="center">PushFrontList(other *List)</td><td align="center">添加 other 列表元素到头部</td></tr></tbody></table><h3 id="3、从列表中删除元素"><a href="#3、从列表中删除元素" class="headerlink" title="3、从列表中删除元素"></a>3、从列表中删除元素</h3><p>列表插入函数的返回值会提供一个<code>*list.Element</code>结构，这个结构记录着列表元素的值以及与其他节点之间的关系等信息，从列表中删除元素时，需要用到这个结构进行快速删除。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"container/list"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建列表实列</span>    l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尾部添加</span>    l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"canon"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 头部添加</span>    l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将字符串 fist 插入到列表的尾部，并将这个元素的内部结构保存到 element 变量中</span>    element <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"fist"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用 element 变量，在 element 的位置后面插入 high 字符串</span>    l<span class="token punctuation">.</span><span class="token function">InsertAfter</span><span class="token punctuation">(</span><span class="token string">"high"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用 element 变量，在 element 的位置前面插入 noon 字符串</span>    l<span class="token punctuation">.</span><span class="token function">InsertBefore</span><span class="token punctuation">(</span><span class="token string">"noon"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 移除 element 变量对应的元素</span>    l<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>列表元素操作的过程:</p><table><thead><tr><th align="center">操作内容</th><th align="center">列表元素</th></tr></thead><tbody><tr><td align="center">l.PushBack(“canon”)</td><td align="center">canon</td></tr><tr><td align="center">l.PushFront(67)</td><td align="center">67, canon</td></tr><tr><td align="center">element := l.PushBack(“fist”)</td><td align="center">67, canon, fist</td></tr><tr><td align="center">l.InsertAfter(“high”, element)</td><td align="center">67, canon, fist, high</td></tr><tr><td align="center">l.InsertBefore(“noon”, element)</td><td align="center">67, canon, noon, fist, high</td></tr><tr><td align="center">l.Remove(element)</td><td align="center">67, canon, noon, high</td></tr></tbody></table><h3 id="4、遍历列表"><a href="#4、遍历列表" class="headerlink" title="4、遍历列表"></a>4、遍历列表</h3><p>遍历双链表需要配合<code>Front()</code>函数获取头元素，遍历时只要元素不为空就可以继续进行，每一次遍历都会调用元素的<code>Next()</code>函数，代码如下所示：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"container/list"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建列表实列</span>    l <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尾部添加</span>    l<span class="token punctuation">.</span><span class="token function">PushBack</span><span class="token punctuation">(</span><span class="token string">"canon"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 头部添加</span>    l<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// i:=l.Front() 表示初始赋值，只会在一开始执行一次，每次循环会进行一次 i != nil 语句判断，如果返回 false，表示退出循环，反之则会执行 i = i.Next()</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p>在Go语言中，布尔类型的零值（初始值）为 false，数值类型的零值为 0，字符串类型的零值为空字符串<code>""</code>，而指针、切片、映射、通道、函数和接口的零值则是<code>nil</code>。</p><p><code>nil</code>是Go语言中一个预定义好的标识符，开发者也许会把<code>nil</code>看作其他语言中的 null（NULL），其实这并不是完全正确的，因为Go语言中的<code>nil</code>和其他语言中的null有很多不同点。</p><ul><li>nil标识符是不能比较的</li><li>nil不是关键字或保留字</li><li>nil没有默认类型</li><li>不同类型的nil的指针是一样的</li><li>不同类型的nil是不能比较的</li><li>两个相同类型的nil值也可能无法比较（在Go语言中 map、slice 和 function 类型的 nil 值不能比较，比较两个无法比较类型的值是非法的）</li><li>nil是map、slice、pointer、channel、func、interface的零值</li><li>不同类型的nil值占用的内存大小可能是不一样的</li></ul><h1 id="六、流程控制"><a href="#六、流程控制" class="headerlink" title="六、流程控制"></a>六、流程控制</h1><h2 id="1、分支结构if-else"><a href="#1、分支结构if-else" class="headerlink" title="1、分支结构if else"></a>1、分支结构if else</h2><p>在Go语言中，关键字 if 是用于测试某个条件（布尔型或逻辑型）的语句，如果该条件成立，则会执行 if 后由大括号<code>{}</code>括起来的代码块，否则就忽略该代码块继续执行后续的代码。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>如果存在第二个分支，则可以在上面代码的基础上添加 else 关键字以及另一代码块，这个代码块中的代码只有在条件不满足时才会执行，if 和 else 后的两个代码块是相互独立的分支，只能执行其中一个。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>如果存在第三个分支，则可以使用下面这种三个独立分支的形式：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// d...</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>else if 分支的数量是没有限制的，但是为了代码的可读性，还是不要在 if 后面加入太多的 else if 结构，如果必须使用这种形式，则尽可能把先满足的条件放在前面。</p><p>关键字 if 和 else 之后的左大括号<code>{</code>必须和关键字在同一行，如果你使用了 else if 结构，则前段代码块的右大括号<code>}</code>必须和 else if 关键字在同一行，这两条规则都是被编译器强制规定的。</p><p>在有些情况下，条件语句两侧的括号是可以被省略的，当条件比较复杂时，则可以使用括号让代码更易读，在使用<code>&amp;&amp;</code>、<code>||</code>或<code>!</code> 时可以使用括号来提升某个表达式的运算优先级，并提高代码的可读性。</p><blockquote><p>特殊写法</p></blockquote><p>if 还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><p>Connect是一个带有返回值的函数，<code>err:=Connect()</code>是一个语句，执行 Connect 后，将错误保存到 err 变量中。</p><p><code>err != nil</code>才是 if 的判断表达式，当 err 不为空时，打印错误并返回。</p><p>这种写法可以将返回值与判断放在一行进行处理，而且返回值的作用范围被限制在 if、else 语句组合中。</p><p>在编程中，变量的作用范围越小，所造成的问题可能性越小，每一个变量代表一个状态，有状态的地方，状态就会被修改，函数的局部变量只会影响一个函数的执行，但全局变量可能会影响所有代码的执行状态，因此限制变量的作用范围对代码的稳定性有很大的帮助。</p><h2 id="2、循环结构for"><a href="#2、循环结构for" class="headerlink" title="2、循环结构for"></a>2、循环结构for</h2><p>与多数语言不同的是，Go语言中的循环语句只支持 for 关键字，而不支持 while 和 do-while 结构。</p><blockquote><p>初始语句-开始循环时执行的语句</p></blockquote><p>初始语句是在第一次循环前执行的语句，一般使用初始语句执行变量初始化，如果变量在此处被声明，其作用域将被局限在这个 for 的范围内。</p><p>初始语句可以被忽略，但是初始语句之后的分号必须要写，代码如下：</p><pre class=" language-go"><code class="language-go">step <span class="token operator">:=</span> <span class="token number">2</span><span class="token keyword">for</span> <span class="token punctuation">;</span> step <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> step<span class="token operator">--</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这段代码将 step 放在 for 的前面进行初始化，for 中没有初始语句，此时 step 的作用域就比在初始语句中声明 step 要大。</p><blockquote><p>条件表达式-控制是否循环的开关</p></blockquote><p>每次循环开始前都会计算条件表达式，如果表达式为 true，则循环继续，否则结束循环，条件表达式可以被忽略，忽略条件表达式后默认形成无限循环。</p><p><strong>1、结束循环时带可执行语句的无限循环</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">for</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、无线循环</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">for</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    i<span class="token operator">++</span><span class="token punctuation">}</span></code></pre><p><strong>3、只有一个循环条件的循环</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">}</span></code></pre><blockquote><p>结束语句-每次循环结束时执行的语句</p></blockquote><p>在结束每次循环前执行的语句，如果循环被 break、goto、return、panic 等语句强制退出，结束语句不会被执行。</p><h2 id="3、键值循环for-range"><a href="#3、键值循环for-range" class="headerlink" title="3、键值循环for range"></a>3、键值循环for range</h2><p>for range 结构是Go语言特有的一种的迭代结构，在许多情况下都非常有用，for range 可以遍历数组、切片、字符串、map 及通道（channel），for range 语法上类似于其它语言中的 foreach 语句，一般形式为：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> coll <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>注：val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值。一个字符串是 Unicode 编码的字符（或称之为 rune ）集合，因此也可以用它来迭代字符串。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> pos<span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>通过 for range 遍历的返回值有一定的规律：</p><ul><li>数组、切片、字符串返回索引和值。</li><li>map 返回键和值。</li><li>通道（channel）只返回通道内的值。</li></ul><blockquote><p>遍历数组、切片-获得索引和值</p></blockquote><p>在遍历代码中，key 和 value 分别代表切片的下标及下标对应的值，下面的代码展示如何遍历切片，数组也是类似的遍历方法：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key:%d  value:%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>遍历字符串-获得字符</p></blockquote><p>Go语言和其他语言类似，可以通过 for range 的组合，对字符串进行遍历，遍历时，key 和 value 分别代表字符串的索引和字符串中的每一个字符。</p><pre class=" language-go"><code class="language-go">m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token string">"first"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"two"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>注：对 map 遍历时，遍历输出的键值是无序的，如果需要有序的键值对输出，需要对结果进行排序。</p><blockquote><p>遍历通道（channel）-接收通道数据</p></blockquote><p>for range 可以遍历通道（channel），但是通道在遍历时，只输出一个值，即管道内的类型对应的数据。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 创建一个整型类型的通道</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*    往通道中推送数据 1、2、3，然后结束并关闭通道*/</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">&lt;-</span> <span class="token number">1</span>    c <span class="token operator">&lt;-</span> <span class="token number">2</span>    c <span class="token operator">&lt;-</span> <span class="token number">3</span>    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用for range对通道c进行遍历，其实就是不断地从通道中取数据，直到通道被关闭</span><span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="4、switch"><a href="#4、switch" class="headerlink" title="4、switch"></a>4、switch</h2><p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止。 Golang switch 分支表达式可以是任意类型，不限于常量。可省略 break，默认自动终止。</p><blockquote><p>语法：</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> var1 <span class="token punctuation">{</span>    <span class="token keyword">case</span> val1<span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token keyword">case</span> val2<span class="token punctuation">:</span>        <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。 </p><p><strong>1、一分支多值</strong></p><p>当出现多个 case 要放在一起的时：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"mum"</span><span class="token keyword">switch</span> a <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"mum"</span><span class="token punctuation">,</span> <span class="token string">"daddy"</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"family"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不同的 case 表达式使用逗号分隔。</p><p><strong>2、分支表达式</strong></p><p>case 后不仅仅只是常量，还可以和 if 一样添加表达式，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> r <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">switch</span> <span class="token punctuation">{</span><span class="token keyword">case</span> r <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述这种情况的 switch 后面不再需要跟判断变量。</p><h2 id="5、goto"><a href="#5、goto" class="headerlink" title="5、goto"></a>5、goto</h2><p>Go语言中 goto 语句通过标签进行代码间的无条件跳转，同时 goto 语句在快速跳出循环、避免重复退出上也有一定的帮助，使用 goto 语句能简化一些代码的实现过程。</p><blockquote><p>使用goto退出多层循环</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> y<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跳转到标签</span>                <span class="token keyword">goto</span> breakHere            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 手动返回, 避免执行进入标签</span>    <span class="token keyword">return</span>    <span class="token comment" spellcheck="true">// 标签</span>breakHere<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用 goto 语句后，无须额外的变量就可以快速退出所有的循环。</p><blockquote><p>使用goto集中处理错误</p></blockquote><p>例如重复的错误处理代码，如果后期在这些代码中添加更多的判断，就需要在这些雷同的代码中依次修改，极易造成疏忽和错误。</p><pre class=" language-go"><code class="language-go">err <span class="token operator">:=</span> <span class="token function">firstCheckError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">goto</span> onExit<span class="token punctuation">}</span>err <span class="token operator">=</span> <span class="token function">secondCheckError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">goto</span> onExit<span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token keyword">return</span>onExit<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token function">exitProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="6、break"><a href="#6、break" class="headerlink" title="6、break"></a>6、break</h2><p>Go语言中 break 语句可以结束 for、switch 和 select 的代码块，另外 break 语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的 for、switch 和 select 的代码块上。</p><blockquote><p>跳出指定循环</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 外层循环的标签</span>OuterLoop<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> j <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 退出 OuterLoop 对应的循环之外</span>                <span class="token keyword">break</span> OuterLoop            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//退出 OuterLoop 对应的循环之外</span>                <span class="token keyword">break</span> OuterLoop            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7、continue"><a href="#7、continue" class="headerlink" title="7、continue"></a>7、continue</h2><p>Go语言中 continue 语句可以结束当前循环，开始下一次的循环迭代过程，仅限在 for 循环内使用，在 continue 语句后添加标签时，表示开始标签对应的循环。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>OuterLoop<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> j <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//结束当前循环，开启下一次的外层循环</span>                <span class="token keyword">continue</span> OuterLoop            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h1><p>函数是组织好的、可重复使用的、用于执行指定任务的代码块，其可以提高应用的模块性和代码的重复利用率。</p><p>Go 语言支持普通函数、匿名函数和闭包，从设计上对函数进行了优化和改进，让函数使用起来更加方便。</p><h2 id="1、函数定义"><a href="#1、函数定义" class="headerlink" title="1、函数定义"></a>1、函数定义</h2><p>函数声明（定义）包括函数名、形式参数列表、返回值列表（可省略）以及函数体。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> 函数名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">(</span>返回值列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span></code></pre><p>形式参数列表描述了函数的参数名以及参数类型，这些参数作为局部变量，其值由参数调用者提供，返回值列表描述了函数返回值的变量名以及类型，如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。</p><p>如果一个函数声明不包括返回值列表，那么函数体执行完毕后，不会返回任何值。</p><h2 id="2、函数的参数"><a href="#2、函数的参数" class="headerlink" title="2、函数的参数"></a>2、函数的参数</h2><blockquote><p>类型简写</p></blockquote><p>函数的参数中如果相邻变量的类型相同，则可以省略类型，例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">intSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>上面的代码中，<code>intSum</code>函数有两个参数，这两个参数的类型均为<code>int</code>，因此可以省略<code>x</code>的类型，因为<code>y</code>后面有类型说明，<code>x</code>参数也是该类型。</p><blockquote><p>可变参数</p></blockquote><p>可变参数是指函数的参数数量不固定。Go语言中的可变参数通过在参数名后加<code>...</code>来标识。</p><p>注意：可变参数通常要作为函数的最后一个参数。本质上，函数的可变参数是通过切片来实现的</p><h2 id="3、函数的返回值"><a href="#3、函数的返回值" class="headerlink" title="3、函数的返回值"></a>3、函数的返回值</h2><p>Go语言支持多返回值，多返回值能方便地获得函数执行后的多个返回参数，Go语言经常使用多返回值中的最后一个返回参数返回函数执行中可能发生的错误。</p><p>Go语言既支持安全指针，也支持多返回值，因此在使用函数进行逻辑编写时更为方便。</p><p>一个函数返回值类型为slice时，nil可以看做是一个有效的slice，没必要显示返回一个长度为0的切片。</p><blockquote><p>同一种类型返回值</p></blockquote><p>如果返回值是同一种类型，则用括号将多个返回值类型括起来，用逗号分隔每个返回值的类型。</p><p>使用 return 语句返回时，值列表的顺序需要与函数声明的返回值类型一致。</p><p>纯类型的返回值对于代码可读性不是很友好，特别是在同类型的返回值出现时，无法区分每个返回参数的意义。</p><blockquote><p>带有变量名的返回值</p></blockquote><p>Go语言支持对返回值进行命名，这样返回值就和参数一样拥有参数变量名和类型。</p><p>命名的返回值变量的默认值为类型的默认值，即数值为 0，字符串为空字符串，布尔为 false、指针为 nil 等。</p><p><strong>同一种类型返回值和命名返回值两种形式只能二选一，混用时将会发生编译错误。</strong></p><h2 id="4、调用函数"><a href="#4、调用函数" class="headerlink" title="4、调用函数"></a>4、调用函数</h2><p>函数在定义后，可以通过调用的方式，让当前代码跳转到被调用的函数中进行执行，调用前的函数局部变量都会被保存起来不会丢失，被调用的函数运行结束后，恢复到调用函数的下一行继续执行代码，之前的局部变量也能继续访问。</p><p>函数内的局部变量只能在函数体中使用，函数调用结束后，这些局部变量都会被释放并且失效。</p><p>Go语言的函数调用格式如下：</p><pre class=" language-go"><code class="language-go">返回值变量列表 <span class="token operator">=</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span></code></pre><ul><li>函数名：需要调用的函数名。</li><li>参数列表：参数变量以逗号分隔，尾部无须以分号结尾。</li><li>返回值变量列表：多个返回值使用逗号分隔。</li></ul><p><strong>调用有返回值的函数时，可以不接收其返回值。</strong></p><h2 id="5、函数变量"><a href="#5、函数变量" class="headerlink" title="5、函数变量"></a>5、函数变量</h2><blockquote><p>把函数作为值保存到变量中</p></blockquote><p>在Go语言中，函数也是一种类型，可以和其他类型一样保存在变量中，下面的代码定义了一个函数变量 f，并将一个函数名为 fire() 的函数赋给函数变量 f，这样调用函数变量 f 时，实际调用的就是 fire() 函数，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将变量 f 声明为 func() 类型，此时 f 就被俗称为“回调函数”，此时 f 的值为 nil</span>    <span class="token keyword">var</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 test() 函数作为值，赋给函数变量 f，此时 f 的值为 test() 函数</span>    f <span class="token operator">=</span> test    <span class="token comment" spellcheck="true">// 使用函数变量 f 进行函数调用，实际调用的是 test() 函数</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="6、高阶函数"><a href="#6、高阶函数" class="headerlink" title="6、高阶函数"></a>6、高阶函数</h2><p>高阶函数分为函数作为参数和函数作为返回值两部分。</p><blockquote><p>函数作为参数</p></blockquote><p>函数可以作为参数：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> op <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ret2 <span class="token operator">:=</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//30</span><span class="token punctuation">}</span></code></pre><blockquote><p>函数作为返回值</p></blockquote><p>函数也可以作为返回值：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">do</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> s <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sub<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"无法识别的操作符"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7、匿名函数"><a href="#7、匿名函数" class="headerlink" title="7、匿名函数"></a>7、匿名函数</h2><p>Go语言支持匿名函数，即在需要使用函数时再定义函数，匿名函数没有函数名只有函数体，函数可以作为一种类型被赋值给函数类型的变量，匿名函数也往往以变量方式传递，这与C语言的回调函数比较类似，不同的是，Go语言支持随时在代码里定义匿名函数。</p><p>匿名函数是指不需要定义函数名的一种函数实现方式，由一个不带函数名的函数声明和函数体组成。</p><p>匿名函数定义：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">(</span>返回参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span></code></pre><p>匿名函数因为没有函数名，所以没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将匿名函数保存到变量</span>    add <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过变量调用匿名函数</span>    <span class="token comment" spellcheck="true">//自执行函数：匿名函数定义完加()直接执行</span>    <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>匿名函数多用于实现回调函数和闭包。</p><h2 id="8、闭包（Closure）"><a href="#8、闭包（Closure）" class="headerlink" title="8、闭包（Closure）"></a>8、闭包（Closure）</h2><p>Go语言中闭包是引用了自由变量的函数，被引用的自由变量和函数一同存在，即使已经离开了自由变量的环境也不会被释放或者删除，在闭包中可以继续使用这个自由变量，因此，简单的说，<code>函数 + 引用环境 = 闭包</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        x <span class="token operator">+=</span> y        <span class="token keyword">return</span> x    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>变量<code>f</code>是一个函数并且它引用了其外部作用域中的<code>x</code>变量，此时<code>f</code>就是一个闭包。 在<code>f</code>的生命周期内，变量<code>x</code>也一直有效。</p><blockquote><p>在闭包内部修改引用的变量</p></blockquote><p>闭包对它作用域上部的变量可以进行修改，修改引用的变量会对变量进行实际修改。例：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 准备一个字符串</span>str <span class="token operator">:=</span> <span class="token string">"hello Go"</span><span class="token comment" spellcheck="true">// 创建一个匿名函数</span>foo <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名函数中访问str</span>    str <span class="token operator">=</span> <span class="token string">"Hello Golang"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用匿名函数</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在匿名函数中并没有定义 str，str 的定义在匿名函数之前，此时，str 就被引用到了匿名函数中形成了闭包。</p><h2 id="9、defer"><a href="#9、defer" class="headerlink" title="9、defer"></a>9、defer</h2><p>Go语言中的<code>defer</code>语句会将其后面跟随的语句进行延迟处理。在<code>defer</code>归属的函数即将返回时，将延迟处理的语句按<code>defer</code>定义的逆序进行执行，也就是说，先被<code>defer</code>的语句最后被执行，最后被<code>defer</code>的语句，最先被执行。</p><p>关键字 defer 的用法类似于面向对象编程语言 <a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 和 <a href="http://c.biancheng.net/csharp/" target="_blank" rel="noopener">C#</a> 的 finally 语句块，它一般用于释放某些已分配的资源，典型的例子就是对一个互斥解锁，或者关闭一个文件。</p><p>由于<code>defer</code>语句延迟调用的特性，所以<code>defer</code>语句能非常方便的处理资源释放问题。比如：资源清理、文件关闭、解锁及记录时间等。</p><blockquote><p>使用延迟执行语句在函数退出时释放资源</p></blockquote><p>处理业务或逻辑中涉及成对的操作是一件比较烦琐的事情，比如打开和关闭文件、接收请求和回复请求、加锁和解锁等。在这些操作中，最容易忽略的就是在每个函数退出处正确地释放和关闭资源。</p><p>defer 语句正好是在函数退出时执行的语句，所以使用 defer 能非常方便地处理资源释放问题。</p><h2 id="10、处理运行时错误"><a href="#10、处理运行时错误" class="headerlink" title="10、处理运行时错误"></a>10、处理运行时错误</h2><p>Go语言的错误处理思想及设计包含以下特征：</p><ul><li>一个可能造成错误的函数，需要返回值中返回一个错误接口（error），如果调用是成功的，错误接口将返回 nil，否则返回错误。</li><li>在函数调用后需要检查错误，如果发生错误，则进行必要的错误处理。</li></ul><p>Go语言没有类似 <a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 中的异常处理机制，虽然可以使用 defer、panic、recover 模拟，但官方并不主张这样做，Go语言的设计者认为其他语言的异常机制已被过度使用，上层逻辑需要为函数发生的异常付出太多的资源，同时，如果函数使用者觉得错误处理很麻烦而忽略错误，那么程序将在不可预知的时刻崩溃。</p><p>Go语言希望开发者将错误处理视为正常开发必须实现的环节，正确地处理每一个可能发生错误的函数，同时，Go语言使用返回值返回错误的机制，也能大幅降低编译器、运行时处理错误的复杂度，让开发者真正地掌握错误的处理。</p><blockquote><p>错误接口定义的格式</p></blockquote><p>error 是 Go 系统声明的接口类型，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p>所有符合 Error()string 格式的方法，都能实现错误接口，Error() 方法返回错误的具体描述，使用者可以通过这个字符串知道发生了什么错误。</p><blockquote><p>自定义错误</p></blockquote><p>返回错误前，需要定义会产生哪些可能的错误，在Go语言中，使用 errors 包进行错误的定义，格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"this is an error"</span><span class="token punctuation">)</span></code></pre><p>错误字符串由于相对固定，一般在包作用域声明，应尽量减少在使用时直接使用 errors.New 返回。</p><p><strong>1、errors包</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 创建错误对象</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>errorString<span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误字符串</span><span class="token keyword">type</span> errorString <span class="token keyword">struct</span> <span class="token punctuation">{</span>    s <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回发生何种错误</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>errorString<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>s<span class="token punctuation">}</span></code></pre><p><strong>2、在代码中使用错误定义</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义除数为0的错误</span><span class="token keyword">var</span> errDivisionByZero <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"division by zero"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span> divisor <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断除数为0的情况并返回</span>    <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errDivisionByZero    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 正常计算，返回空错误</span>    <span class="token keyword">return</span> dividend <span class="token operator">/</span> divisor<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="11、panic"><a href="#11、panic" class="headerlink" title="11、panic"></a>11、panic</h2><p>Go语言的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等，这些运行时错误会引起宕机。</p><p>一般而言，当宕机发生时，程序会中断运行，并立即执行在该 goroutine（可以先理解成线程）中被延迟的函数（defer 机制），随后，程序崩溃并输出日志信息，日志信息包括 panic value 和函数调用的堆栈跟踪信息，panic value 通常是某种错误信息。</p><p>对于每个 goroutine，日志信息中都会有与之相对的，发生 panic 时的函数调用堆栈跟踪信息，通常，我们不需要再次运行程序去定位问题，日志信息已经提供了足够的诊断依据，因此，在我们填写问题报告时，一般会将宕机和日志信息一并记录。</p><p>虽然Go语言的 panic 机制类似于其他语言的异常，但 panic 的适用场景有一些不同，由于 panic 会引起程序的崩溃，因此 panic 一般用于严重错误，如程序内部的逻辑不一致。任何崩溃都表明了我们的代码中可能存在漏洞，所以对于大部分漏洞，应该使用Go语言提供的错误机制，而不是 panic。</p><p>panic()的声明：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">panic</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//panic() 的参数可以是任意类型的。</span></code></pre><blockquote><p>手动触发宕机</p></blockquote><p>Go语言可以在程序中手动触发宕机，让程序崩溃，这样开发者可以及时地发现错误，同时减少可能的损失。</p><p>Go语言程序在宕机时，会将堆栈和 goroutine 信息输出到控制台，所以宕机也可以方便地知晓发生错误的位置，那么我们要如何触发宕机呢，示例代码如下所示：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>代码运行崩溃，输出如下：</p><pre class=" language-bash"><code class="language-bash">panic: <span class="token function">test</span>goroutine 1 <span class="token punctuation">[</span>running<span class="token punctuation">]</span>:main.main<span class="token punctuation">(</span><span class="token punctuation">)</span>        C:/<span class="token punctuation">..</span>./main.go:4 +0x45</code></pre><blockquote><p>在运行的依赖的必备资源缺失时主动触发宕机</p></blockquote><p>regexp 是Go语言的正则表达式包，正则表达式需要编译后才能使用，而且编译必须是成功的，表示正则表达式可用。</p><p>编译正则表达式函数有两种，具体如下：</p><p><strong>func Compile(expr string) (*Regexp, error)</strong></p><p>编译正则表达式，发生错误时返回编译错误同时返回 Regexp 为 nil，该函数适用于在编译错误时获得编译错误进行处理，同时继续后续执行的环境。</p><p><strong>func MustCompile(str string) *Regexp</strong></p><p>当编译正则表达式发生错误时，使用 panic 触发宕机，该函数适用于直接使用正则表达式而无须处理正则表达式错误的情况。</p><p>手动宕机进行报错的方式不是一种偷懒的方式，反而能迅速报错，终止程序继续运行，防止更大的错误产生，不过，如果任何错误都使用宕机处理，也不是一种良好的设计习惯，因此应根据需要来决定是否使用宕机进行报错。</p><blockquote><p>在宕机时触发延迟执行语句</p></blockquote><p>当 panic() 触发的宕机发生时，panic() 后面的代码将不会被运行，但是在 panic() 函数前面已经运行过的 defer 语句依然会在宕机发生时发生作用。</p><h2 id="12、recover"><a href="#12、recover" class="headerlink" title="12、recover"></a>12、recover</h2><p>Recover 是一个Go语言的内建函数，可以让进入宕机流程中的 goroutine 恢复过来，recover 仅在延迟函数 defer 中有效，在正常的执行过程中，调用 recover 会返回 nil 并且没有其他任何效果，如果当前的 goroutine 陷入恐慌，调用 recover 可以捕获到 panic 的输入值，并且恢复正常的执行。</p><p>通常来说，不应该对进入 panic 宕机的程序做任何处理，但有时，需要我们可以从宕机中恢复，至少我们可以在程序崩溃前，做一些操作，举个例子，当 web 服务器遇到不可预料的严重问题时，在崩溃前应该将所有的连接关闭，如果不做任何处理，会使得客户端一直处于等待状态，如果 web 服务器还在开发阶段，服务器甚至可以将异常信息反馈到客户端，帮助调试。</p><p>在其他语言里，宕机往往以异常的形式存在，底层抛出异常，上层逻辑通过 try/catch 机制捕获异常，没有被捕获的严重异常会导致宕机，捕获的异常可以被忽略，让代码继续运行。</p><p>Go语言没有异常系统，其使用 panic 触发宕机类似于其他语言的抛出异常，recover 的宕机恢复机制就对应其他语言中的 try/catch 机制。</p><blockquote><p>panic与recover </p></blockquote><p>panic 和 recover 的组合有如下特性：</p><ul><li>有 panic 没 recover，程序宕机。</li><li>有 panic 也有 recover，程序不会宕机，执行完对应的 defer 后，从宕机点退出当前函数后继续执行。</li></ul><p>虽然 panic/recover 能模拟其他语言的异常机制，但并不建议在编写普通函数时也经常性使用这种特性。</p><p>在 panic 触发的 defer 函数内，可以继续调用 panic，进一步将错误外抛，直到程序整体崩溃。</p><p>如果想在捕获错误时设置当前函数的返回值，可以对返回值使用命名返回值方式直接进行设置。</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><table><thead><tr><th align="center">内置函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">close</td><td align="center">主要用来关闭channel</td></tr><tr><td align="center">len</td><td align="center">用来求长度，比如string、array、slice、map、channel</td></tr><tr><td align="center">new</td><td align="center">用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针</td></tr><tr><td align="center">make</td><td align="center">用来分配内存，主要用来分配引用类型，比如chan、map、slice</td></tr><tr><td align="center">append</td><td align="center">用来追加元素到数组、slice中</td></tr><tr><td align="center">panic和recover</td><td align="center">用来做错误处理</td></tr></tbody></table><h1 id="八、结构体"><a href="#八、结构体" class="headerlink" title="八、结构体"></a>八、结构体</h1><h2 id="1、类型别名与自定义类型"><a href="#1、类型别名与自定义类型" class="headerlink" title="1、类型别名与自定义类型"></a>1、类型别名与自定义类型</h2><blockquote><p>自定义类型</p></blockquote><p>在Go语言中有一些基本的数据类型，如<code>string</code>、<code>整型</code>、<code>浮点型</code>、<code>布尔</code>等数据类型， Go语言中可以使用<code>type</code>关键字来定义自定义类型。</p><p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//将MyInt定义为int类型</span><span class="token keyword">type</span> MyInt <span class="token builtin">int</span></code></pre><p>通过<code>type</code>关键字的定义，<code>MyInt</code>就是一种新的类型，它具有<code>int</code>的特性。</p><blockquote><p>类型别名</p></blockquote><p>类型别名是<code>Go1.9</code>版本添加的新功能。</p><p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> TypeAlias <span class="token operator">=</span> Type</code></pre><p>之前见过的<code>rune</code>和<code>byte</code>就是类型别名，它们的定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token keyword">type</span> <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token builtin">int32</span></code></pre><h2 id="2、结构体的定义"><a href="#2、结构体的定义" class="headerlink" title="2、结构体的定义"></a>2、结构体的定义</h2><p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p><p>Go 语言通过用自定义的方式形成新的类型，结构体是类型中带有成员的复合类型。Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。</p><p>Go 语言中的类型可以被实例化，使用<code>new</code>或<code>&amp;</code>构造的类型实例的类型是类型的指针。</p><p>结构体成员是由一系列的成员变量构成，这些成员变量也被称为“字段”。字段有以下特性：</p><ul><li>字段拥有自己的类型和值。</li><li>字段名必须唯一。</li><li>字段的类型也可以是结构体，甚至是字段所在结构体的类型。</li></ul><p>使用关键字 <strong>type</strong> 可以将各种基本类型定义为自定义类型，基本类型包括整型、字符串、布尔等。结构体是一种复合的基本类型，通过 type 定义为自定义类型后，使结构体更便于使用。</p><p>结构体的定义格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 类型名 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    字段<span class="token number">1</span> 字段<span class="token number">1</span>类型    字段<span class="token number">2</span> 字段<span class="token number">2</span>类型    …<span class="token punctuation">}</span></code></pre><ul><li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li><li>struct{}：表示结构体类型，<code>type 类型名 struct{}</code>可以理解为将 struct{} 结构体定义为类型名的类型。</li><li>字段1、字段2……：表示结构体字段名，结构体中的字段名必须唯一。</li><li>字段1类型、字段2类型……：表示结构体各个字段的类型。</li></ul><p>构体的定义只是一种内存布局的描述，只有当结构体实例化时，才会真正地分配内存。</p><h2 id="3、结构体实例化"><a href="#3、结构体实例化" class="headerlink" title="3、结构体实例化"></a>3、结构体实例化</h2><p>结构体的定义只是一种内存布局的描述，只有当结构体实例化时，才会真正地分配内存，因此必须在定义结构体并实例化后才能使用结构体的字段。</p><p>实例化就是根据结构体定义的格式创建一份与格式一致的内存区域，结构体实例与实例间的内存是完全独立的。</p><p>Go语言可以通过多种方式实例化结构体，根据实际需要可以选用不同的写法。</p><h3 id="基本实例化"><a href="#基本实例化" class="headerlink" title="基本实例化"></a>基本实例化</h3><p>结构体本身是一种类型，可以像整型、字符串等类型一样，以 var 的方式声明结构体即可完成实例化。</p><p>基本实例化格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 结构体实例 结构体类型</code></pre><p>用结构体表示的点结构（Point）的实例化过程请参见下面的代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">{</span>    X <span class="token builtin">int</span>    Y <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> p Pointp<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">10</span>p<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">20</span></code></pre><p>在例子中，使用<code>.</code>来访问结构体的成员变量，如<code>p.X</code>和<code>p.Y</code>等，结构体成员变量的赋值方法与普通变量一致。</p><h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> user <span class="token keyword">struct</span><span class="token punctuation">{</span>Name <span class="token builtin">string</span><span class="token punctuation">;</span> Age <span class="token builtin">int</span><span class="token punctuation">}</span>    user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"pprof.cn"</span>    user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="创建指针类型结构体"><a href="#创建指针类型结构体" class="headerlink" title="创建指针类型结构体"></a>创建指针类型结构体</h3><p>Go语言中，还可以使用 new 关键字对类型（包括结构体、整型、浮点数、字符串等）进行实例化，结构体在实例化后会形成指针类型的结构体。</p><pre class=" language-go"><code class="language-go">结构体实例 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>结构体类型<span class="token punctuation">)</span></code></pre><p>也可以像访问普通结构体一样使用<code>.</code>来访问结构体指针的成员。</p><h3 id="取结构体的地址实例化"><a href="#取结构体的地址实例化" class="headerlink" title="取结构体的地址实例化"></a>取结构体的地址实例化</h3><p>在Go语言中，对结构体进行<code>&amp;</code>取地址操作时，视为对该类型进行一次 new 的实例化操作，取地址格式如下：</p><pre class=" language-go"><code class="language-go">结构体实例 <span class="token operator">:=</span> <span class="token operator">&amp;</span>结构体类型<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="4、初始化结构体"><a href="#4、初始化结构体" class="headerlink" title="4、初始化结构体"></a>4、初始化结构体</h2><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p><h3 id="使用键值对初始化结构体"><a href="#使用键值对初始化结构体" class="headerlink" title="使用键值对初始化结构体"></a>使用键值对初始化结构体</h3><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p><p>键值对初始化结构体的书写格式：</p><pre class=" language-go"><code class="language-go">结构体实例 <span class="token operator">:=</span> 结构体类型<span class="token punctuation">{</span>    字段<span class="token number">1</span><span class="token punctuation">:</span> 字段<span class="token number">1</span>的值<span class="token punctuation">,</span>    字段<span class="token number">2</span><span class="token punctuation">:</span> 字段<span class="token number">2</span>的值<span class="token punctuation">,</span>    …<span class="token punctuation">}</span></code></pre><p>键值之间以<code>:</code>分隔，键值对之间以<code>,</code>分隔。</p><h3 id="使用多个值的列表初始化结构体"><a href="#使用多个值的列表初始化结构体" class="headerlink" title="使用多个值的列表初始化结构体"></a>使用多个值的列表初始化结构体</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p><pre class=" language-go"><code class="language-go">结构体实例 <span class="token operator">:=</span> 结构体类型<span class="token punctuation">{</span>    字段<span class="token number">1</span>的值<span class="token punctuation">,</span>    字段<span class="token number">2</span>的值<span class="token punctuation">,</span>    …<span class="token punctuation">}</span></code></pre><ul><li>必须初始化结构体的所有字段。</li><li>每一个初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>键值对与值列表的初始化形式不能混用。</li></ul><h3 id="初始化匿名结构体"><a href="#初始化匿名结构体" class="headerlink" title="初始化匿名结构体"></a>初始化匿名结构体</h3><p>匿名结构体没有类型名称，无须通过 type 关键字定义就可以直接使用。</p><p>匿名结构体的初始化写法由结构体定义和键值对初始化两部分组成，结构体定义时没有结构体类型名，只有字段和类型定义，键值对初始化部分由可选的多个键值对组成，如下格式所示：</p><pre class=" language-go"><code class="language-go">ins <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名结构体字段定义</span>    字段<span class="token number">1</span> 字段类型<span class="token number">1</span>    字段<span class="token number">2</span> 字段类型<span class="token number">2</span>    …<span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段值初始化</span>    初始化字段<span class="token number">1</span><span class="token punctuation">:</span> 字段<span class="token number">1</span>的值<span class="token punctuation">,</span>    初始化字段<span class="token number">2</span><span class="token punctuation">:</span> 字段<span class="token number">2</span>的值<span class="token punctuation">,</span>    …<span class="token punctuation">}</span></code></pre><p>键值对初始化部分是可选的，不初始化成员时，匿名结构体的格式变为：</p><pre class=" language-go"><code class="language-go">ins <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    字段<span class="token number">1</span> 字段类型<span class="token number">1</span>    字段<span class="token number">2</span> 字段类型<span class="token number">2</span>    …<span class="token punctuation">}</span></code></pre><h2 id="5、构造函数"><a href="#5、构造函数" class="headerlink" title="5、构造函数"></a>5、构造函数</h2><p>Go语言的类型或结构体没有构造函数的功能，但是我们可以使用结构体初始化的过程来模拟实现构造函数。</p><p>例如，实现一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">newPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token operator">*</span>person <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>person<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用构造函数：</p><pre class=" language-go"><code class="language-go">p <span class="token operator">:=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span></code></pre><h2 id="6、方法和接收者"><a href="#6、方法和接收者" class="headerlink" title="6、方法和接收者"></a>6、方法和接收者</h2><p>Go语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。接收者的概念就类似于其他语言中的this或者 self。</p><p>方法的定义格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>接收者变量 接收者类型<span class="token punctuation">)</span> 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span></code></pre><ul><li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li><li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回参数：具体格式与函数定义相同</li></ul><p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p><blockquote><p>指针类型的接收者</p></blockquote><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。</p><p>例如为Person添加一个SetAge方法，来修改实例变量的年龄。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Person 结构体</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int8</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// SetAge 设置p的年龄</span><span class="token comment" spellcheck="true">// 使用指针接收者</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">SetAge</span><span class="token punctuation">(</span>newAge <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> newAge<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p1 <span class="token operator">:=</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span>    p1<span class="token punctuation">.</span><span class="token function">SetAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">}</span></code></pre><p><strong>什么时候使用指针类型的接收者</strong></p><ul><li>需要修改接收者中的值</li><li>接收者是拷贝代价比较大的大对象</li><li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li></ul><blockquote><p>值类型的接收者</p></blockquote><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p><h2 id="7、任意类型添加方法"><a href="#7、任意类型添加方法" class="headerlink" title="7、任意类型添加方法"></a>7、任意类型添加方法</h2><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 </p><p>例如，基于内置的int类型使用type关键字可以定义新的自定义类型，然后为自定义类型添加方法。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//MyInt 将int定义为自定义MyInt类型</span><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment" spellcheck="true">//SayHello 为MyInt添加一个SayHello的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MyInt<span class="token punctuation">)</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, 我是一个int。"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m1 MyInt    m1<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Hello, 我是一个int。</span>    m1 <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v  %T\n"</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//100  main.MyInt</span><span class="token punctuation">}</span></code></pre><p><strong>非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</strong></p><h2 id="8、结构体的匿名字段"><a href="#8、结构体的匿名字段" class="headerlink" title="8、结构体的匿名字段"></a>8、结构体的匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Person 结构体Person类型</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span>    <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p1 <span class="token operator">:=</span> Person<span class="token punctuation">{</span>        <span class="token string">"test"</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//main.Person{string:"test", int:18}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//test 18</span><span class="token punctuation">}</span></code></pre><p>匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p><h2 id="9、嵌套结构体"><a href="#9、嵌套结构体" class="headerlink" title="9、嵌套结构体"></a>9、嵌套结构体</h2><p>一个结构体中可以嵌套包含另一个结构体或结构体指针。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ax<span class="token punctuation">,</span> ay <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span>    A    bx<span class="token punctuation">,</span> by <span class="token builtin">float32</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> B<span class="token punctuation">{</span>A<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>ax<span class="token punctuation">,</span> b<span class="token punctuation">.</span>ay<span class="token punctuation">,</span> b<span class="token punctuation">.</span>bx<span class="token punctuation">,</span> b<span class="token punctuation">.</span>by<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>A<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>结构体嵌套有如下特性：</p><ul><li><p>内嵌的结构体可以直接访问其成员变量</p><p>嵌入结构体的成员，可以通过外部结构体的实例直接访问。如果结构体有多层嵌入结构体，结构体实例访问任意一级的嵌入结构体成员时都只用给出字段名，而无须像传统结构体字段一样，通过一层层的结构体字段访问到最终的字段。例如，ins.a.b.c的访问可以简化为ins.c。</p></li><li><p>内嵌结构体的字段名是它的类型名</p><p>内嵌结构体字段仍然可以使用详细的字段进行一层层访问，内嵌结构体的字段名就是它的类型名。</p></li></ul><p>一个结构体只能嵌入一个同类型的成员，无须担心结构体重名和错误赋值的情况，编译器在发现可能的赋值歧义时会报错。</p><h3 id="嵌套匿名字段"><a href="#嵌套匿名字段" class="headerlink" title="嵌套匿名字段"></a>嵌套匿名字段</h3><p>结构体可以包含一个或多个匿名（或内嵌）字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型也就是字段的名字。匿名字段本身可以是一个结构体类型，即结构体可以包含内嵌结构体。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Address 地址结构体</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Province <span class="token builtin">string</span>    City     <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//User 用户结构体</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name    <span class="token builtin">string</span>    Gender  <span class="token builtin">string</span>    Address <span class="token comment" spellcheck="true">//匿名结构体</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> user2 User    user2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"test"</span>    user2<span class="token punctuation">.</span>Gender <span class="token operator">=</span> <span class="token string">"男"</span>    user2<span class="token punctuation">.</span>Address<span class="token punctuation">.</span>Province <span class="token operator">=</span> <span class="token string">"贵州"</span>    <span class="token comment" spellcheck="true">//通过匿名结构体.字段名访问</span>    user2<span class="token punctuation">.</span>City <span class="token operator">=</span> <span class="token string">"贵阳"</span>                <span class="token comment" spellcheck="true">//直接访问匿名结构体的字段名</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user2=%#v\n"</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//user2=main.User{Name:"test", Gender:"男", Address:main.Address{Province:"贵州", City:"贵阳"}}</span><span class="token punctuation">}</span></code></pre><p>当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。</p><h3 id="嵌套结构体的字段名冲突"><a href="#嵌套结构体的字段名冲突" class="headerlink" title="嵌套结构体的字段名冲突"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</p><h2 id="10、结构体的继承"><a href="#10、结构体的继承" class="headerlink" title="10、结构体的继承"></a>10、结构体的继承</h2><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Animal 动物</span><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s会动！\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Dog 狗</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Feet    <span class="token builtin">int8</span>    <span class="token operator">*</span>Animal <span class="token comment" spellcheck="true">//通过嵌套匿名结构体实现继承</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s会汪汪汪~\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    d1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span>        Feet<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        Animal<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意嵌套的是结构体指针</span>            name<span class="token punctuation">:</span> <span class="token string">"小黑"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    d1<span class="token punctuation">.</span><span class="token function">wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//小黑会汪汪汪~</span>    d1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//小黑会动！</span><span class="token punctuation">}</span></code></pre><h2 id="11、结构体字段的可见性"><a href="#11、结构体字段的可见性" class="headerlink" title="11、结构体字段的可见性"></a>11、结构体字段的可见性</h2><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p><h2 id="12、结构体与JSON序列化"><a href="#12、结构体与JSON序列化" class="headerlink" title="12、结构体与JSON序列化"></a>12、结构体与JSON序列化</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号””包裹，使用冒号:分隔，然后紧接着值；多个键值之间使用英文,分隔。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Student 学生</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID     <span class="token builtin">int</span>    Gender <span class="token builtin">string</span>    Name   <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Class 班级</span><span class="token keyword">type</span> Class <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Title    <span class="token builtin">string</span>    Students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">{</span>        Title<span class="token punctuation">:</span>    <span class="token string">"101"</span><span class="token punctuation">,</span>        Students<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        stu <span class="token operator">:=</span> <span class="token operator">&amp;</span>Student<span class="token punctuation">{</span>            Name<span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>            Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            ID<span class="token punctuation">:</span>     i<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span>Students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Students<span class="token punctuation">,</span> stu<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//JSON序列化：结构体-->JSON格式的字符串</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json marshal failed"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"json:%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//JSON反序列化：JSON格式的字符串-->结构体</span>    str <span class="token operator">:=</span> <span class="token string">`{"Title":"101","Students":[{"ID":0,"Gender":"男","Name":"stu00"},{"ID":1,"Gender":"男","Name":"stu01"},{"ID":2,"Gender":"男","Name":"stu02"},{"ID":3,"Gender":"男","Name":"stu03"},{"ID":4,"Gender":"男","Name":"stu04"},{"ID":5,"Gender":"男","Name":"stu05"},{"ID":6,"Gender":"男","Name":"stu06"},{"ID":7,"Gender":"男","Name":"stu07"},{"ID":8,"Gender":"男","Name":"stu08"},{"ID":9,"Gender":"男","Name":"stu09"}]}`</span>    c1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">{</span><span class="token punctuation">}</span>    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json unmarshal failed!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="13、结构体标签（Tag）"><a href="#13、结构体标签（Tag）" class="headerlink" title="13、结构体标签（Tag）"></a>13、结构体标签（Tag）</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p><pre class=" language-bash"><code class="language-bash">`key1:<span class="token string">"value1"</span> key2:<span class="token string">"value2"</span>`</code></pre><p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p><p><strong>注：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p><p>例如为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"encoding/json"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Student 学生</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID     <span class="token builtin">int</span>    <span class="token string">`json:"id"`</span> <span class="token comment" spellcheck="true">//通过指定tag实现json序列化该字段时的key</span>    Gender <span class="token builtin">string</span> <span class="token comment" spellcheck="true">//json序列化是默认使用字段名作为key</span>    name   <span class="token builtin">string</span> <span class="token comment" spellcheck="true">//私有不能被json包访问</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> Student<span class="token punctuation">{</span>        ID<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>        Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span>   <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json marshal failed!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"json str:%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//json str:{"id":1,"Gender":"男"}</span><span class="token punctuation">}</span></code></pre><h2 id="14、垃圾回收和SetFinalizer"><a href="#14、垃圾回收和SetFinalizer" class="headerlink" title="14、垃圾回收和SetFinalizer"></a>14、垃圾回收和SetFinalizer</h2><p>Go语言自带垃圾回收机制（GC）。GC 通过独立的进程执行，它会搜索不再使用的变量，并将其释放。需要注意的是，GC 在运行时会占用机器资源。</p><p>GC 是自动进行的，如果要手动进行 GC，可以使用 runtime.GC() 函数，显式的执行 GC。显式的进行 GC 只在某些特殊的情况下才有用，比如当内存资源不足时调用 runtime.GC() ，这样会立即释放一大片内存，但是会造成程序短时间的性能下降。</p><p>finalizer（终止器）是与对象关联的一个函数，通过 runtime.SetFinalizer 来设置，如果某个对象定义了 finalizer，当它被 GC 时候，这个 finalizer 就会被调用，以完成一些特定的任务，例如发信号或者写日志等。</p><p>在Go语言中 SetFinalizer 函数是这样定义的：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">SetFinalizer</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> f <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>参数 x 必须是一个指向通过 new 申请的对象的指针，或者通过对复合字面值取址得到的指针。</li><li>参数 f 必须是一个函数，它接受单个可以直接用 x 类型值赋值的参数，也可以有任意个被忽略的返回值。</li></ul><p>SetFinalizer 函数可以将 x 的终止器设置为 f，当垃圾收集器发现 x 不能再直接或间接访问时，它会清理 x 并调用 f(x)。</p><p>另外，x 的终止器会在 x 不能直接或间接访问后的任意时间被调用执行，不保证终止器会在程序退出前执行，因此一般终止器只用于在长期运行的程序中释放关联到某对象的非内存资源。例如，当一个程序丢弃一个 os.File 对象时没有调用其 Close 方法，该 os.File 对象可以使用终止器去关闭对应的操作系统文件描述符。</p><p>终止器会按依赖顺序执行：如果 A 指向 B，两者都有终止器，且 A 和 B 没有其它关联，那么只有 A 的终止器执行完成，并且 A 被释放后，B 的终止器才可以执行。</p><p>如果 *x 的大小为 0 字节，也不保证终止器会执行。</p><p>此外，我们也可以使用<code>SetFinalizer(x, nil)</code>来清理绑定到 x 上的终止器。</p><p>终止器只有在对象被 GC 时，才会被执行。其他情况下，都不会被执行，即使程序正常结束或者发生错误。</p><h1 id="九、接口"><a href="#九、接口" class="headerlink" title="九、接口"></a>九、接口</h1><p>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p><p>在Go语言中接口（interface）是一种类型，一种抽象的类型。</p><p><code>interface</code>是一组<code>method</code>的集合，是<code>duck-type programming</code>的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）</p><h2 id="1、接口声明"><a href="#1、接口声明" class="headerlink" title="1、接口声明"></a>1、接口声明</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 接口类型名 <span class="token keyword">interface</span><span class="token punctuation">{</span>    方法名<span class="token function">1</span><span class="token punctuation">(</span> 参数列表<span class="token number">1</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">1</span>    方法名<span class="token function">2</span><span class="token punctuation">(</span> 参数列表<span class="token number">2</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">2</span>    …<span class="token punctuation">}</span></code></pre><ul><li>接口类型名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li><li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li><li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li></ul><h2 id="2、实现接口的条件"><a href="#2、实现接口的条件" class="headerlink" title="2、实现接口的条件"></a>2、实现接口的条件</h2><p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个需要实现的方法列表。</p><ul><li>接口的方法与实现接口的类型方法格式一致。</li><li>接口中所有方法均被实现。</li></ul><h2 id="3、类型与接口的关系"><a href="#3、类型与接口的关系" class="headerlink" title="3、类型与接口的关系"></a>3、类型与接口的关系</h2><blockquote><p>一个类型实现多个接口</p></blockquote><p>个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。</p><blockquote><p>多个类型实现同一接口</p></blockquote><p>一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。也就是说，使用者并不关心某个接口的方法是通过一个类型完全实现的，还是通过多个结构嵌入到一个结构体中拼凑起来共同实现的。</p><h2 id="4、空接口"><a href="#4、空接口" class="headerlink" title="4、空接口"></a>4、空接口</h2><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。</p><p>空接口类型的变量可以存储任意类型的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习文档链接：&lt;a href=&quot;http://c.biancheng.net/golang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go入门学习&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://lskjwp.gitee.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://lskjwp.gitee.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/4b0e1d36/"/>
    <id>https://lskjwp.gitee.io/archives/4b0e1d36/</id>
    <published>2021-05-27T12:19:22.000Z</published>
    <updated>2021-11-14T07:16:13.083Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1kx411s71n" target="_blank" rel="noopener">B站 动力节点</a></p><a id="more"></a><p><img src="/archives/4b0e1d36/SQL%EF%BC%88%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%EF%BC%89.png" alt="SQL分类"></p><h1 id="简单的SQL语句"><a href="#简单的SQL语句" class="headerlink" title="简单的SQL语句"></a>简单的SQL语句</h1><blockquote><p>表的创建</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> EMP<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> DEPT<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> BONUS<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> SALGRADE<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> DEPT       <span class="token punctuation">(</span>DEPTNO NUMBER<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">CONSTRAINT</span> PK_DEPT <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    DNAME VARCHAR2<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    LOC VARCHAR2<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> EMP       <span class="token punctuation">(</span>EMPNO NUMBER<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">CONSTRAINT</span> PK_EMP <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    ENAME VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    JOB VARCHAR2<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MGR NUMBER<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    HIREDATE <span class="token keyword">DATE</span><span class="token punctuation">,</span>    SAL NUMBER<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    COMM NUMBER<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    DEPTNO NUMBER<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">CONSTRAINT</span> FK_DEPTNO <span class="token keyword">REFERENCES</span> DEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BONUS    <span class="token punctuation">(</span>    ENAME VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span>    JOB VARCHAR2<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span>    SAL NUMBER<span class="token punctuation">,</span>    COMM NUMBER    <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SALGRADE      <span class="token punctuation">(</span> GRADE NUMBER<span class="token punctuation">,</span>    LOSAL NUMBER<span class="token punctuation">,</span>    HISAL NUMBER <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>数据</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DEPT <span class="token punctuation">(</span> DEPTNO<span class="token punctuation">,</span> DNAME<span class="token punctuation">,</span> LOC <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'ACCOUNTING'</span><span class="token punctuation">,</span> <span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DEPT <span class="token punctuation">(</span> DEPTNO<span class="token punctuation">,</span> DNAME<span class="token punctuation">,</span> LOC <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'RESEARCH'</span><span class="token punctuation">,</span> <span class="token string">'DALLAS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DEPT <span class="token punctuation">(</span> DEPTNO<span class="token punctuation">,</span> DNAME<span class="token punctuation">,</span> LOC <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'SALES'</span><span class="token punctuation">,</span> <span class="token string">'CHICAGO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DEPT <span class="token punctuation">(</span> DEPTNO<span class="token punctuation">,</span> DNAME<span class="token punctuation">,</span> LOC <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'OPERATIONS'</span><span class="token punctuation">,</span> <span class="token string">'BOSTON'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7369</span><span class="token punctuation">,</span> <span class="token string">'SMITH'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token number">7902</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'12/17/1980 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7499</span><span class="token punctuation">,</span> <span class="token string">'ALLEN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'02/20/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7521</span><span class="token punctuation">,</span> <span class="token string">'WARD'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'02/22/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1250</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7566</span><span class="token punctuation">,</span> <span class="token string">'JONES'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token number">7839</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'04/02/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2975</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7654</span><span class="token punctuation">,</span> <span class="token string">'MARTIN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'09/28/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1250</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7698</span><span class="token punctuation">,</span> <span class="token string">'BLAKE'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token number">7839</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'05/01/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2850</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7782</span><span class="token punctuation">,</span> <span class="token string">'CLARK'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token number">7839</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'06/09/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2450</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7788</span><span class="token punctuation">,</span> <span class="token string">'SCOTT'</span><span class="token punctuation">,</span> <span class="token string">'ANALYST'</span><span class="token punctuation">,</span> <span class="token number">7566</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'04/19/1987 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7839</span><span class="token punctuation">,</span> <span class="token string">'KING'</span><span class="token punctuation">,</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'11/17/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7844</span><span class="token punctuation">,</span> <span class="token string">'TURNER'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'09/08/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7876</span><span class="token punctuation">,</span> <span class="token string">'ADAMS'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token number">7788</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'05/23/1987 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7900</span><span class="token punctuation">,</span> <span class="token string">'JAMES'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'12/03/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">950</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7902</span><span class="token punctuation">,</span> <span class="token string">'FORD'</span><span class="token punctuation">,</span> <span class="token string">'ANALYST'</span><span class="token punctuation">,</span> <span class="token number">7566</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'12/03/1981 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> EMP <span class="token punctuation">(</span> EMPNO<span class="token punctuation">,</span> ENAME<span class="token punctuation">,</span> JOB<span class="token punctuation">,</span> MGR<span class="token punctuation">,</span> HIREDATE<span class="token punctuation">,</span> SAL<span class="token punctuation">,</span> COMM<span class="token punctuation">,</span>DEPTNO <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">7934</span><span class="token punctuation">,</span> <span class="token string">'MILLER'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token number">7782</span><span class="token punctuation">,</span>  TO_Date<span class="token punctuation">(</span> <span class="token string">'01/23/1982 12:00:00 上午'</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY HH:MI:SS AM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1300</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SALGRADE <span class="token punctuation">(</span> GRADE<span class="token punctuation">,</span> LOSAL<span class="token punctuation">,</span> HISAL <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SALGRADE <span class="token punctuation">(</span> GRADE<span class="token punctuation">,</span> LOSAL<span class="token punctuation">,</span> HISAL <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1201</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SALGRADE <span class="token punctuation">(</span> GRADE<span class="token punctuation">,</span> LOSAL<span class="token punctuation">,</span> HISAL <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1401</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SALGRADE <span class="token punctuation">(</span> GRADE<span class="token punctuation">,</span> LOSAL<span class="token punctuation">,</span> HISAL <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> SALGRADE <span class="token punctuation">(</span> GRADE<span class="token punctuation">,</span> LOSAL<span class="token punctuation">,</span> HISAL <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3001</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>数据库中所有数据类型的默认值都是NULL</strong></p><p><strong>Oracle中的主要的数据类型：</strong></p><ul><li>字符型<ul><li>固定长度的字符类型，经常被定义成CHAR(N)形式，N表示占用的字节数。最大长度是2000字节。</li><li>变长的字符类型，定义格式是VARCHAR2(N)，N表示最多可占用的字节数，最大长度是4000字节。</li></ul></li><li>数值型，NUMBER</li><li>日期型，用于定义日期时间的数据，长度是7个字节，默认格式是DD-MON-RR，比如11-APR-17</li></ul><blockquote><p><strong>字符型</strong></p><p>VARCHAR(10)定长的字符型数据</p><p>CHAR(2)定长的字符型数据</p><p>VARCHAR2(20)变长的字符型数据</p><p><strong>数值型</strong></p><p>NUMBER(4)不带小数点的数值</p><p>NUMBER(8,2)数据的总长度是8位，小数点后占两位</p></blockquote><h2 id="SQL语句的书写规则"><a href="#SQL语句的书写规则" class="headerlink" title="SQL语句的书写规则"></a>SQL语句的书写规则</h2><p>SQL被称为结构化查询语言（Structured Query Language），SQL是操作和检索关系型数据库的标准语言，使用SQL语句，程序员和数据库管理员可以完成如下任务：</p><ul><li>改变数据库的结构</li><li>更改系统的安全设置</li><li>增加用户对数据库或表的许可权限</li><li>在数据库中检索需要的信息</li><li>对数据库的信息进行更新</li></ul><p><strong>Sql语句的书写规则</strong></p><ul><li>在Oracle数据库中，sql语句大小写不敏感</li><li>sql语句可单行或多行书写</li><li>在sql语句中，关键字不能跨多行或缩写</li><li>为了提高可读性，一般关键字大写，其它小写</li><li>子句通常位于独立行，便于编辑，提高可读性</li><li>空格和缩进是程序易读</li></ul><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>在查询的过程中，对于数值型的数据，可以执行+，-，*，/运算；也可以给查询的字段起别名，有不同的方式，可以不用””，可以用””，可以用as，可以不用as。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> EMPNO 员工编号<span class="token punctuation">,</span>ENAME 员工姓名<span class="token punctuation">,</span>SAL <span class="token string">"月薪"</span><span class="token punctuation">,</span>SAL<span class="token operator">*</span><span class="token number">12</span> <span class="token string">"年薪"</span><span class="token punctuation">,</span>COMM <span class="token string">"奖金"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>SAL<span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> COMM<span class="token punctuation">)</span> <span class="token string">"年收入"</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre><p><strong>select语句中的算数表达式</strong></p><ul><li>对NUMBER型数据可以使用算数操作符创建表达式（+ - * /）</li><li>对DATE型数据可以使用部分算数操作符创建表达式（+ -）</li></ul><p>在算术表达式中出现NULL，得到的结果就是NULL，NULL不等于0.0</p><blockquote><p><strong>对于日期的数据可以使用+ -运算符</strong></p><ul><li><p>一个日期+-一个数值（就是+-一个天数），得到一个新的日期</p><pre class=" language-sq1"><code class="language-sq1">SELECT EMPNO,ENAME,HIREDATE "雇佣日期",(HIREDATE + 90) "转正日期" FROM EMP;</code></pre></li><li><p>两个日期型的数据相减，得到的是两者之间相差的天数</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--SYSDATE取得当前的日期</span><span class="token keyword">SELECT</span> EMPNO<span class="token punctuation">,</span>ENAME<span class="token punctuation">,</span><span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> HIREDATE<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">365</span> <span class="token string">"工作的年限"</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre></li><li><p>两个日期型的数据不能相加，日期型的数据不能进行乘除运算</p></li></ul></blockquote><p><strong>字符串的连接操作符</strong></p><ul><li>将列或字符与其它列连接</li><li>用双竖线表示（||）</li><li>产生的结果列是另一个字符表达式</li></ul><blockquote><p><strong>用||可以把两列或多列查询结果合并到一起</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> EMPNO<span class="token punctuation">,</span>ENAME<span class="token punctuation">,</span>EMPNO<span class="token operator">||</span>ENAME <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre><p><strong>在连接表达式中出现字符数据，字符型的数据必须要使用，在连接表达式中出现null，就是原来的字符型数据</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> EMPNO <span class="token operator">||</span> <span class="token string">'的经理是'</span> <span class="token operator">||</span> MGR <span class="token string">"从属关系"</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre></blockquote><p><strong>空值的使用</strong></p><ul><li>空值是指不可用、未分配的值</li><li>空值不等于零或空格</li><li>任意类型都可以支持空值</li></ul><p><strong>空值的运算表达式</strong></p><ul><li>包括空值的任何算术表达式都等于空</li><li>包括空值的连接表达式等于与空字符串连接，也就是原来的字符串</li></ul><p><strong>定义字段的别名</strong></p><ul><li>改变列的标题头</li><li>用于表示计算结果的含义</li><li>作为列的别名</li><li>如果别名中使用特殊字符，或者是强制大小写敏感，或有空格时，都需要加双引号</li></ul><p><strong>文本字符串</strong></p><ul><li>文本字符串是一个包括在SELECT查询列表中的字符，表达式或数字</li><li>日期和字符型文本字符串必须用单引号括起来</li><li>没返回一条记录文本字符串被显示一次</li></ul><p><strong>去除单列重复的数据</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> DEPTNO <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre><p><strong>去除多列重复的数据</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> JOB<span class="token punctuation">,</span>DEPTNO <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre><p>DISTINCT的作用范围是后面所有字段的组合。</p><p><strong>使用WHERE子句对数据进行过滤</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> DEPTNO <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><ul><li><p>对于字符型的数据和日期型的数据必须要使用<code>''</code>，字符型的数据对大小写是敏感的。</p></li><li><p>对于日期型的数据，格式是敏感的，使用日期型数据的格式是DD-MM-YYYY（日-月-年）</p></li></ul><blockquote><p><strong>Where中的字符串和日期值</strong></p><ul><li>字符串和日期要用单引号括起来</li><li>字符串是大小写敏感的，日期值是格式敏感的</li><li>缺省的日期格式是’DD-MON-YY’</li></ul></blockquote><p><strong>改变当前会话中的日期格式</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">session</span> <span class="token keyword">set</span> nis_date_format<span class="token operator">=</span><span class="token string">"YYYY-MM-DD HH:MI:SS"</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> HIREDATE <span class="token operator">=</span> <span class="token string">'20-2月-1981'</span>；<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> HIREDATE <span class="token operator">=</span> <span class="token string">'1980-12-17'</span><span class="token punctuation">;</span></code></pre><p><strong>LIKE用于字符型数据的查询，可以执行模糊查询</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> ENAME <span class="token operator">LIKE</span> <span class="token string">'%A%'</span><span class="token punctuation">;</span></code></pre><p><code>%</code>表示0个或多个任意的字符。</p><p><code>_</code>下划线表示一个字符。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> ENAMe <span class="token operator">LIKE</span> <span class="token string">'_A%'</span><span class="token punctuation">;</span></code></pre><p>若查询的字符型数据中含有特殊字符，例如%</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> ENAME <span class="token operator">LIKE</span> <span class="token string">'%\%%'</span> <span class="token keyword">ESCAPE</span> <span class="token string">'\'</span><span class="token punctuation">;</span></code></pre><p><code>ESCAPE '\'</code>指定以<code>\</code>为转义符。</p><p><strong>对于空值，要使用IS NULL进行比较</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> COMM <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p><strong>使用NOT运算符</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> SQL <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">2000</span> <span class="token operator">AND</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> JOB <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token string">'MANAGER'</span><span class="token punctuation">,</span><span class="token string">'CLERK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> COMM <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p><strong>优先级规则（括号将跨越所有优先级规则）</strong></p><table><thead><tr><th align="center">次序</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">所有的比较运算</td></tr><tr><td align="center">2</td><td align="center">NOT</td></tr><tr><td align="center">3</td><td align="center">AND</td></tr><tr><td align="center">4</td><td align="center">OR</td></tr></tbody></table><p><strong>对查询后的数据进行排序，使用ORDER BY子句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--默认按照指定的字段升序排列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--指定字段降序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SAL <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--可以按照多个字段进行排列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> DEPTNO<span class="token punctuation">,</span>SAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--使用字段的别名来进行排序</span><span class="token keyword">SELECT</span> EMPNO<span class="token punctuation">,</span>ENAME<span class="token punctuation">,</span><span class="token punctuation">(</span>SAL <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"年薪"</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token string">"年薪"</span><span class="token punctuation">;</span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数适用于执行数据处理和复杂运算的。通过对一组数据进行一系列的运算，得到一个最终的需要输出的结果。函数通常都会有一个或多个输入，被称作函数的参数。在函数的内部对输入的参数进行逻辑计算，最终会得到一个或多个值，但是只有一个值作为函数的计算结果返回给客户。</p><p>函数可以出现在sql语句的各个位置，最常见的是出现在查询列表中。</p><blockquote><p>两种SQL函数</p></blockquote><ul><li>根据函数对多行输入数据的处理方式，函数分为单行函数和多行函数。</li><li>单行函数：每行作为一个输入参数，经过函数的计算得到每行的计算结果。单行函数执行的操作影响表中每一行的显示效果。<strong>每行都会得到相应的计算结果</strong></li><li>多行函数：对多行输入值进行计算，得到多行对应的一个结果。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--单行函数：每次取一条记录，作为函数的参数，得到这条记录对应的单个结果</span><span class="token keyword">SELECT</span> ENAME<span class="token punctuation">,</span>LENGTH<span class="token punctuation">(</span>ENAME<span class="token punctuation">)</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--多行函数：一次性把多条记录当作参数输入给函数，得到多条记录对应的单个结果</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>SAL<span class="token punctuation">)</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span></code></pre><p>单行函数分为五中类型：</p><ul><li>字符函数</li><li>数字函数</li><li>日期函数</li><li>转换函数</li><li>其他函数</li></ul><blockquote><p>字符函数</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--大小写控制函数</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> ENAME <span class="token operator">=</span> UPPER<span class="token punctuation">(</span><span class="token string">'smith'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--lower('Hello World') 转小写</span><span class="token comment" spellcheck="true">--upper('Hello World') 转大写</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span> 转小写<span class="token punctuation">,</span> upper<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span> 转大写 <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--initcap: 首字母大写  </span><span class="token keyword">select</span> initcap<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span> 首字符大写 <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--字符控制函数  </span><span class="token comment" spellcheck="true">-- concat: 字符连接函数, 等同于  ||  </span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token string">' World'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--substr:求母串中的某个子串  </span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--length和lengthb: 字符数和字节数  </span><span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">'China'</span><span class="token punctuation">)</span> 字符数<span class="token punctuation">,</span> lengthb<span class="token punctuation">(</span><span class="token string">'China'</span><span class="token punctuation">)</span> 字节数  <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--instr:在母串中，查找子串的位置  </span><span class="token keyword">select</span> instr<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">,</span><span class="token string">'ll'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--lpad,rpad: 左右填充,将abcd用*填充到10位  </span><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> 左填充<span class="token punctuation">,</span> rpad<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> 右填充 <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--trim: 去掉字符串前后指定的字符  </span><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'H'</span> <span class="token keyword">from</span> <span class="token string">'Hello WorldH'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--replace:字符串替换函数  </span><span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">'Hello Wordl'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><blockquote><p>数字函数</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--数字函数  </span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">45.926</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 四舍五入<span class="token punctuation">,</span> trunc<span class="token punctuation">(</span><span class="token number">45.926</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  截断 <span class="token punctuation">,</span>mod<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span> 求于 <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--ROUND函数  </span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">45.923</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> 整数位<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">45.923</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 十位<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">45.923</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> 百位 <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><blockquote><p>日期函数</p></blockquote><p><strong>日期的运算</strong></p><ul><li>日期类型的数据可以使用算数运算符进行计算</li><li>从日期中加或减一个数值，以得到一个新的日期结果值</li><li>两个日期相减以便得到它们相差多少天</li><li><strong>注意：日期不能加另一个日期，日期也不支持乘除运算</strong></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--日期函数</span><span class="token comment" spellcheck="true">--显示当前日期</span><span class="token keyword">select</span> sysdate <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--显示时间部分</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--显示昨天，今天和明天，加减数字仍未日期</span><span class="token keyword">select</span> sysdate<span class="token number">-1</span> 昨天<span class="token punctuation">,</span> sysdate 今天<span class="token punctuation">,</span> sysdate<span class="token operator">+</span><span class="token number">1</span> 明天 <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--两个日期相减，结果为相差的天数，查询员工信息，显示员工工龄。两个日期不能相加</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sysdate<span class="token operator">-</span>hiredate 天 <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询员工信息，显示员工工龄,分别按照天，星期，月显示</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sysdate<span class="token operator">-</span>hiredate 天<span class="token punctuation">,</span><span class="token punctuation">(</span>sysdate<span class="token operator">-</span>hiredate<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">7</span> 星期<span class="token punctuation">,</span><span class="token punctuation">(</span>sysdate<span class="token operator">-</span>hiredate<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">30</span> 月 <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--months_between:两个日期相差的月数</span><span class="token keyword">select</span> <span class="token punctuation">(</span>sysdate<span class="token operator">-</span>hiredate<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">30</span> 方式一<span class="token punctuation">,</span>months_between<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span>hiredate<span class="token punctuation">)</span> 方式二 <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--add_months:在指定日期上加上若干个月</span><span class="token keyword">select</span> add_months<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> 下个月<span class="token punctuation">,</span>add_months<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token string">"123个月后"</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--last_day: 某个日期当月的最后一天</span><span class="token keyword">select</span> last_day<span class="token punctuation">(</span>sysdate<span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--next_day:下周六</span><span class="token keyword">select</span> next_day<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'星期五'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--对日期进行四舍五入</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'MONTH'</span><span class="token punctuation">)</span> 月<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'YEAR'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--对日期进行截断</span><span class="token keyword">select</span> trunc<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'MONTH'</span><span class="token punctuation">)</span> 月<span class="token punctuation">,</span>trunc<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'YEAR'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--日期格式 </span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> hiredate<span class="token operator">=</span>to_date<span class="token punctuation">(</span><span class="token string">'1982-01-23'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>日期函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">months_between</td><td align="center">两日期相差多少月</td></tr><tr><td align="center">add_months</td><td align="center">在一个日期上加或减若干个月到新的日期</td></tr><tr><td align="center">next_day</td><td align="center">取得从当前日期开始遇到的第一个指定星期几的日期</td></tr><tr><td align="center">last_day</td><td align="center">计算指定日期所在月份的最后一天的日期</td></tr><tr><td align="center">round</td><td align="center">取得按年或月四舍五入得到的新日期</td></tr><tr><td align="center">trunc</td><td align="center">取得按年或月截取得到的新日期</td></tr></tbody></table><blockquote><p>转换函数</p></blockquote><p>转换有两种方式，隐式转换和手动转换。</p><p><strong>使用to_char函数将日期作为字符串显示</strong></p><p><code>to_char(date,'fmt')</code></p><ul><li>对于日期型的数据必须用单引号括起来，并且是大小写敏感</li><li>可包含任何有效的日期格式</li></ul><p>在转换日期位字符串时，日期中年，月，日，时，分，秒都需要相应的格式控制符来控制转换的显示格式。</p><table><thead><tr><th align="center">格式控制符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">YYYY，YYY，YY</td><td align="center">分别代表4位，3位，2位的数字年份</td></tr><tr><td align="center">YEAR</td><td align="center">年的拼写</td></tr><tr><td align="center">MM</td><td align="center">数字月</td></tr><tr><td align="center">MONTH</td><td align="center">月份的全拼名称</td></tr><tr><td align="center">MON</td><td align="center">月份的缩写</td></tr><tr><td align="center">DD</td><td align="center">数字日</td></tr><tr><td align="center">DAY</td><td align="center">星期的全拼</td></tr><tr><td align="center">DY</td><td align="center">星期的缩写</td></tr><tr><td align="center">AM</td><td align="center">表示上午或下午</td></tr><tr><td align="center">HH24，HH12</td><td align="center">24小时制或12小时制</td></tr><tr><td align="center">MI</td><td align="center">分钟</td></tr><tr><td align="center">SS</td><td align="center">秒钟</td></tr><tr><td align="center">SP</td><td align="center">数字的拼写</td></tr><tr><td align="center">TH</td><td align="center">数字的序数词</td></tr><tr><td align="center">”特殊字符“</td><td align="center">在日期时间中加入特殊的字符</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--2021/5/18 1 2021-05-18 17:24:41 下午 星期二</span><span class="token keyword">select</span> sysdate<span class="token punctuation">,</span>to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss am day'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询当前日期：显示:  2021-05-18 17:26:56 今天是 星期二</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss "今天是"day'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span> </code></pre><p><strong>使用to_char函数将数字作为字符显示</strong></p><p><code>to_char(number,'fmt')</code></p><table><thead><tr><th align="center">9</th><th align="center">代表一个数字（有数字就显示，没有就不显示）</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">强制显示0</td></tr><tr><td align="center">$</td><td align="center">放置一个$符</td></tr><tr><td align="center">L</td><td align="center">放置一个本地货币符</td></tr><tr><td align="center">.</td><td align="center">显示小数点</td></tr><tr><td align="center">,</td><td align="center">显示千位指示符</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询员工信息，显示员工的编号，姓名，月薪,要求有货币代码(L)，千位符(,)，小数点(.), </span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>to_char<span class="token punctuation">(</span>sal<span class="token punctuation">,</span><span class="token string">'L9,999.99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>to_number和to_date函数</strong></p><ul><li>使用to_number函数将字符转换为数字，<code>to_number(char[,'fmt'])</code></li><li>使用to_date函数将字符转换为日期，<code>to_date(char[,'fmt'])</code></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--to_number，把字符型的数据转换为数值，字符的格式和模板的模式必须要一致</span><span class="token keyword">select</span> to_number<span class="token punctuation">(</span><span class="token string">'$800.00'</span><span class="token punctuation">,</span><span class="token string">'$999,999.00'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--to_date，把字符型的数据转换为日期型的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> hiredate <span class="token operator">=</span> to_date<span class="token punctuation">(</span><span class="token string">'1981-2-20'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>其他函数</p></blockquote><ul><li>和空值相关的函数</li><li><code>nvl(expr1,expr2)</code></li><li><code>nvl2(expr1,expr2,expr3)</code></li><li><code>nullif(expr1,expr2)</code></li><li><code>coalesce(expr1,expr2,...,exprn)</code></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--在算术表达式中出现null，得到的结果就是null</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span>comm<span class="token punctuation">)</span> <span class="token string">"年收入"</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>nvl函数</strong></p><p>将空值转换为实际的值。</p><p><code>nvl(comm,0)</code>如果comm字段为null，就用0替换该null</p><ul><li>数据格式可以是日期，字符，数字</li><li>数据类型必须匹配，否则出错<ul><li><code>nvl(comm,0)</code></li><li><code>nvl(hiredate,'01-JAN-97')</code></li><li><code>nvl(job,'No Job Yet')</code></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span>nvl<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string">"年收入"</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--将7654的job和hiredate暂时改为null进行测试</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token string">'还没有工作'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7654</span><span class="token punctuation">;</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>hiredate<span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>hiredate<span class="token punctuation">,</span><span class="token string">'1-1月-1987'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7654</span><span class="token punctuation">;</span></code></pre><p><strong>nvl2函数</strong></p><p><code>nvl2(expr,expr1,expr2)</code></p><ul><li>如果expr不为null，返回expr1；若为null，返回expr2</li><li>expr可以为任何数据类型</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>nvl2<span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token string">'有工作'</span><span class="token punctuation">,</span><span class="token string">'没工作'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7654</span><span class="token punctuation">;</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>nvl2<span class="token punctuation">(</span>job<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token string">'没工作'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>nullif</strong></p><p><code>nullif(expr1,expr2)</code>比较两个表达式，如果相等返回空值，如果不等返回第一个表达式。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token keyword">nullif</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">nullif</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>case表达式</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--case实现if...else if...else的功能</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>        <span class="token keyword">case</span> job            <span class="token keyword">when</span> <span class="token string">'CLERK'</span> <span class="token keyword">then</span> <span class="token number">1.10</span> <span class="token operator">*</span> sal            <span class="token keyword">when</span> <span class="token string">'MANAGER'</span> <span class="token keyword">then</span> <span class="token number">1.3</span> <span class="token operator">*</span> sal            <span class="token keyword">when</span> <span class="token string">'SALESMAN'</span> <span class="token keyword">then</span> <span class="token number">1.4</span> <span class="token operator">*</span> sal            <span class="token keyword">else</span> sal        <span class="token keyword">end</span> <span class="token keyword">as</span> <span class="token string">"修订工资数"</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span></code></pre><p><strong>decode函数</strong></p><p>decode函数类似于一系列case或if-then-else语句</p><pre><code>decode(col/expression,search1,result1       [,search2,result2,...,]       [,default])</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>esal<span class="token punctuation">,</span>    decode<span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token string">'CLERK'</span><span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">1.10</span><span class="token punctuation">,</span>           <span class="token string">'MANAGER'</span><span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">1.30</span><span class="token punctuation">,</span>           <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">1.40</span><span class="token punctuation">,</span>           sal<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"修订工资数"</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span></code></pre><p><strong>嵌套函数</strong></p><ul><li>单行函数可被嵌入到任何层</li><li>嵌套函数从最深层到最低层求值</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'还没有工作'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"结果"</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><strong>分组函数</strong></p><p>分组函数就是多行函数。分组函数对多行输入值进行计算，得到多行对应的单行结果。在通常的情况下，会对一个表总的数据进行分组，得到多组数据，每个组中包括一行或多行数据。分组函数对每组记录分别进行计算，每组返回一个结果。最终产生多个组对应的数据集合。分组有多少，最终的结果集就有多少行。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>常用分组函数</p></blockquote><ul><li><code>avg([distinct|all]n)</code></li><li><code>count({*|[distinct|all]expr})</code></li><li><code>max([distinct|all]expr)</code></li><li><code>min([distinct|all]expr)</code></li><li><code>sum([distinct|all]n)</code></li></ul><p>使用avg函数可以求出一组数据的平均值，而sum可以求出一组数的总和。<strong>这两个函数都是针对数值类型的数据的</strong></p><p>使用max函数可以求出一组数据中的最大值，min求出最小值这两个函数可以适用于任何数据类型。对于日期类型，最早的日期被认为是最小的值；对于字符型的数据，采用ASCII码值比较的方式。</p><p>count函数是用于计算符合条件的数据的条数。count有两种用法：<code>count(*)</code>和<code>count(字段)</code>，并且结果可能不同。<code>count(*)</code>求出所有符合条件的记录条数；而<code>count(字符)</code>这是求出所有符合条件并且字段值是非空的记录数。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>所有的组函数都是忽略空值的</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--按照人数计算平均奖金</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>nvl<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>group by子句</strong></p><p>除了对整个表的数据进行统计计算外，更多的需要是根据用户的实际需求对数据进行分组，然后对每个分组进行组函数计算</p><pre><code>select column,group_funtionfrom table[where condition][group by group_by_expression][order by column];</code></pre><ul><li>使用group by子句将表中的数据分成多个小组。分组后的数据执行组函数计算，结果返回给客户。最终的结果自动按照分组子分组进行升序排列</li><li>组函数忽略空值，可以使用nvl，nvl2，coalesce函数处理空值</li><li>结果集隐式按升序排列，如果需要改变排序方式可以使用order by子句</li></ul><blockquote><p>使用group by子句</p></blockquote><ul><li>出现在select列表中的字段，<strong>如果出现的位置不是在组函数中，那么必须出现在group by子句中</strong></li><li><strong>也可以只出现在group by子句中</strong></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--按照多个字段进行分组</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">,</span>job <span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--多分组后的数据进行过滤，过滤大于等于3000的记录，不能使用where子句，而是使用having子句</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3000</span> <span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--先使用where对数据过滤，过滤后用group by分组，分组后的数据用having在过滤</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3000</span><span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><p>组函数也可以嵌套，在组函数嵌套时，必须要使用group by。组函数最多能嵌套两层。</p><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>用单个的select语句从多个表中查询相关的数据。在多表查询时，如果不加入等值条件，会产生笛卡尔乘积。</p><p>多表查询分为不同的标准：</p><ul><li><p>SQL1992标准</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--等值查询，在父子表的关系上，用=来连接两个表的两个字段或多个表的多个字段。</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--非等值查询，两个表之间没有父子关系，用!=来连接两个表</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">,</span>s<span class="token punctuation">.</span>losal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>hisal<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>salgrade s<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal <span class="token operator">and</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--自连接，通过别名，将一个表虚拟成两个表，然后在这两个表上做等值查询</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span>m<span class="token punctuation">.</span>empno<span class="token punctuation">,</span>m<span class="token punctuation">.</span>ename<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>emp m<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> m<span class="token punctuation">.</span>empno <span class="token operator">and</span> <span class="token number">e</span><span class="token punctuation">.</span>empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--外连接：在等值查询的基础之上，可以查询不满足等值条件的数据</span><span class="token comment" spellcheck="true">--左外连接，可以把右边的表中不满足等值条件的数据查询出来</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--右外连接，可以把左边表中不满足等值条件的数据查询出来</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--+号不能出现在=号两边</span></code></pre></li><li><p>SQL1999标准</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--交叉连接，相当于sql92标准等值查询时没有给出正确的等值条件，会产生笛卡尔乘积</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">cross</span> <span class="token keyword">join</span> dept <span class="token number">d</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--自然连接：在父子表关系上，自动的匹配两个表中列名完整相同的字段（参照列），在这些相同名称的字段上做等值查询</span><span class="token comment" spellcheck="true">--参照列上不能使用前缀</span><span class="token comment" spellcheck="true">--自然连接的缺陷：1、会把所有的参照列都作为等值条件；2、如果参照列的类型不同，查询会报错</span><span class="token comment" spellcheck="true">--当两个表中没有参照列时，自然查询会产生笛卡尔乘积</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">natural</span> <span class="token keyword">join</span> dept <span class="token number">d</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--join...using，在自然连接的基础上，加以改进，使用指定的参照列来作为等值条件</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">using</span><span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--join...on，使用on里面指定的条件作为查询条件（on里面的条件可以是任意条件）</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--使用join...on做n个表的等值查询，需要n-1个join...on子句</span><span class="token comment" spellcheck="true">--使用join...on做非等值查询</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">,</span>s<span class="token punctuation">.</span>losal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>hisal<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">)</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--outer join ...on 外连接</span><span class="token comment" spellcheck="true">--left outer join ...on() 可以把左边表种不满足等值条件的数据查询出来</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> dept <span class="token number">d</span><span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> emp <span class="token number">e</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--right outer join ...on()可以把右边表中不满足等值条件的数据查询处理啊</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> dept <span class="token number">d</span><span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> emp <span class="token number">e</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--full outer join ...on()可以把左右两边表中不满足等值条件的数据查询出来</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong>使用union把两个结果集合并成一个结果集</strong>，两个查询语句的结果集必须要一致才能合并。</p><ul><li>结果集一致指的是查询字段的个数、字段的类型，字段的顺序必须要一致。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--使用查询语句来创建表（复制表及其数据，但是并没有复制主外键）</span><span class="token keyword">create</span> <span class="token keyword">table</span> dept_bak<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--union，会去除重复的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept_bak<span class="token keyword">union</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--union all，不会去除重复的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept_bak<span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span></code></pre><blockquote><p>子查询</p></blockquote><p>子查询的分类，就是根据子查询的返回结果来区分的</p><ul><li><p>单行子查询：返回单行，使用单行比较运算符</p></li><li><p>多行子查询：返回多行，使用多行比较运算符</p><p>any和all一般不单独使用，通常是和”&gt;“或”&lt;”搭配使用</p><table><thead><tr><th align="center">运算符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">等于列表中的任何值</td></tr><tr><td align="center">any</td><td align="center">将值与子查询返回的任意一个值进行比较</td></tr><tr><td align="center">all</td><td align="center">比较子查询返回的每一个值</td></tr></tbody></table></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询比7566员工的工资高的人的信息</span><span class="token comment" spellcheck="true">--为了给主查询提供条件，而首先执行的一个查询，被称为子查询（子查询是用来给主查询提供查询条件的）</span><span class="token comment" spellcheck="true">--子查询通常出现在比较运算符的右边，并且用()包围起来，便于理解</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7566</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--单行单列子查询，要使用单行比较运算符</span><span class="token comment" spellcheck="true">--子查询中使用了组函数，但是子查询的结果依旧是单行单列，仍然可以使用单行比较操作符</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token keyword">where</span> sal <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span>  emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--单行多列子查询</span><span class="token keyword">select</span> mgr<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--子查询返回的结果是多行单列，就不能使用单行比较操作符</span><span class="token comment" spellcheck="true">--多行单列子查询，要使用多行比较运算符，in\all\any</span><span class="token comment" spellcheck="true">--使用in运算符</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--使用all运算符</span><span class="token comment" spellcheck="true">--> all，大于子查询的最大值</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token keyword">all</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--&lt; all，小于子查询的最小值</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">&lt;</span> <span class="token keyword">all</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--any</span><span class="token comment" spellcheck="true">--> any，大于子查询的最小值</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token keyword">any</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--&lt; any，小于子查询的最大值</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">&lt;</span> <span class="token keyword">any</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--多行多列子查询</span><span class="token keyword">select</span> mgr<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7566</span> <span class="token operator">or</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--成对的比较</span><span class="token comment" spellcheck="true">--查询和7566，7369同经理同职位的员工的信息</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>mgr<span class="token punctuation">,</span>job<span class="token keyword">from</span> emp<span class="token keyword">where</span> <span class="token punctuation">(</span>mgr<span class="token punctuation">,</span>job<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> mgr<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7566</span> <span class="token operator">or</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">)</span><span class="token operator">and</span> empno <span class="token operator">!=</span> <span class="token number">7566</span> <span class="token operator">and</span> empno <span class="token operator">!=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--非成对的比较，把多行多列的子查询拆分成两个多行单列的子查询，分别使用in运算</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>mgr<span class="token punctuation">,</span>job<span class="token keyword">from</span> emp<span class="token keyword">where</span> mgr <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> mgr <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7566</span> <span class="token operator">or</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">)</span><span class="token operator">and</span> job <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7566</span> <span class="token operator">or</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">)</span><span class="token operator">and</span> empno <span class="token operator">!=</span> <span class="token number">7566</span> <span class="token operator">and</span> empno <span class="token operator">!=</span> <span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--子查询出现在having中</span><span class="token comment" spellcheck="true">--having对分组后的数据进行过滤</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token keyword">from</span> emp<span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--子查询出现在form后面，用来提供数据源的，子查询被虚拟成一个表</span><span class="token keyword">select</span> 部门编号<span class="token punctuation">,</span>maxsal<span class="token punctuation">,</span>avgsal<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno 部门编号<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> maxsal<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> minsal<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> avgsal<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> sumsal      <span class="token keyword">from</span> emp     <span class="token keyword">where</span> deptno <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>     <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span><span class="token keyword">where</span> 部门编号 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></code></pre><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>把多个相关的操作捆绑成一个逻辑单元，要么全都成功，要么全都失败。</p><ul><li><p>事务开始于第一个操作</p></li><li><p>事务结束于</p><ul><li>提交结束，所有的操作都成功；回滚结束，所有的操作都失败，回滚到事务开始之前的状态。</li><li>DDL或DCL语句（隐式的提交事务）</li><li>用户连接异常，或者用户断开连接（隐式回滚）</li><li>系统崩溃（隐式的回滚）</li></ul></li><li><p>事务会在多种情况下结束。通常应该由产生事务的用户回话通过命令显示的控制事务的结束（commit和rollback），这样可以保证事务中数据改变的可控性。</p></li><li><p>除了用户直接控制事务外，其它的情况会隐式的结束事务。由于隐式结束事务的不可预料性，应尽量避免隐式的结束事务。</p></li></ul><p><strong>commit和rollback的优点</strong></p><p>oracle中控制事务的主要命令是commit和rollback命令，还有一个辅助的savepoint命令。</p><p>使用commit和rollback来控制事务，有如下的好处</p><ul><li>保证数据一致性，修改过的数据（不一致的数据）在没有提交之前其它的用户是不能看到的</li><li>在数据永久生效前重新查看修改的数据</li><li>将相关的操作组织在一起。一个事务中的相关数据改变或者全部成功，或者全部失败</li></ul><p><strong>事务的自动处理</strong></p><ul><li><p>使用commit和rollback命令可以显示的控制事务的结束。另外在一些时候，事务也会隐式的结束。隐式结束事务有两种方式：隐式提交和隐式回滚</p></li><li><p>当下列情况发生时，事务自动隐式提交：</p><ul><li>执行一个DDL语句</li><li>执行一个DCL语句</li><li>从SQL*Plus正常退出</li></ul></li><li><p>当从SQL*Plus中强行退出，客户端到服务器端的连接异常中断，或系统失败时，事务自动隐式回滚</p></li></ul><p><strong>回退到指定的标记点上</strong></p><ul><li>通过存储点在当前的事务中创建标记点</li><li>可回退到存储点指定的标记点</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--在事务中使用标记点</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'人事部'</span><span class="token punctuation">,</span><span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">savepoint</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">savepoint</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token keyword">update</span> dept <span class="token keyword">set</span> dname <span class="token operator">=</span> <span class="token string">'销售部'</span> <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">rollback</span> <span class="token keyword">to</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">rollback</span> <span class="token keyword">to</span> <span class="token number">a</span><span class="token punctuation">;</span></code></pre><h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p>DML语句，会引起数据库中发生一个事务。</p><p><strong>插入语句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--第一个执行的DML语句会引起事务</span><span class="token comment" spellcheck="true">--在事务没有结束之前，只有当前用户可以看到对数据库的修改操作，其它用户是看不到的</span><span class="token comment" spellcheck="true">--事务可以以回滚的方式结束，所有的操作被放弃，回滚到事务开始之前的状态</span><span class="token comment" spellcheck="true">--事务也可以以提交的方式结束，对数据库的修改被永久的保存，其它用户可以看到被修改的数据</span><span class="token comment" spellcheck="true">--插入数据时，不指定插入的字段，则表示要插入全部的字段</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept<span class="token punctuation">(</span>deptno<span class="token punctuation">,</span>dname<span class="token punctuation">,</span>loc<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'销售部'</span><span class="token punctuation">,</span><span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--回滚</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--提交</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--一次性插入多条数据（复制表中的数据，把查询结果当作数据插入到表中）</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_bak <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span></code></pre><p><strong>更新语句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--使用update语句时，在事务没有结束之前，该条数据会被锁住，其它的用户无法修改这条数据</span><span class="token comment" spellcheck="true">--事务结束之后，该条数据的锁被放开，其它用户才可以操作这条数据</span><span class="token keyword">update</span> dept <span class="token keyword">set</span> dname <span class="token operator">=</span> <span class="token string">'人事部'</span><span class="token punctuation">,</span>loc <span class="token operator">=</span> <span class="token string">'DALLAS'</span> <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></code></pre><p><strong>删除语句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></code></pre><p><strong>合并语句</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">MERGE</span> <span class="token keyword">INTO</span> table_name alias1 <span class="token keyword">USING</span> <span class="token punctuation">(</span><span class="token keyword">table</span><span class="token operator">|</span><span class="token keyword">view</span><span class="token operator">|</span>sub_query<span class="token punctuation">)</span> alias2<span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token keyword">join</span> condition<span class="token punctuation">)</span> <span class="token keyword">WHEN</span> <span class="token keyword">MATCHED</span> <span class="token keyword">THEN</span>  <span class="token keyword">UPDATE</span> table_name  <span class="token keyword">SET</span> col1 <span class="token operator">=</span> col_val1<span class="token punctuation">,</span>    col2 <span class="token operator">=</span> col_val2 <span class="token keyword">WHEN</span> <span class="token operator">NOT</span> <span class="token keyword">MATCHED</span> <span class="token keyword">THEN</span>  <span class="token keyword">INSERT</span> <span class="token punctuation">(</span>column_list<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>column_values<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>根据条件在表中执行修改或插入数据的功能，如果插入的数据行在目的表中存在就执行update，如果不存在则执行insert。</p><ul><li>避免了单独的修改</li><li>增强性能和应用性</li><li>在数据仓库应用程序中尤为有用</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">merge</span> <span class="token keyword">into</span> dept_back <span class="token number">d</span><span class="token keyword">using</span> dept s<span class="token keyword">on</span><span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> s<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token keyword">when</span> <span class="token keyword">matched</span> <span class="token keyword">then</span>    <span class="token keyword">update</span> <span class="token keyword">set</span>        <span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> s<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>        <span class="token number">d</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>loc<span class="token keyword">when</span> <span class="token operator">not</span> <span class="token keyword">matched</span> <span class="token keyword">then</span>    <span class="token keyword">insert</span> <span class="token keyword">values</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>s<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">)</span></code></pre><h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><p>创建表，必须具有</p><ul><li>创建表的权限</li><li>足够的存储区域</li></ul><blockquote><p>数据类型</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">varchar2(size)</td><td align="center">可变长字符串</td></tr><tr><td align="center">char(size)</td><td align="center">定长字符串</td></tr><tr><td align="center">number(p.s)</td><td align="center">数字值</td></tr><tr><td align="center">date</td><td align="center">日期值</td></tr><tr><td align="center">long</td><td align="center">变长度的字符串，最大字节数可达2GB</td></tr><tr><td align="center">clob</td><td align="center">单位字符串数据最大字节数4G</td></tr><tr><td align="center">raw and long raw</td><td align="center">存储二进制数据的可变长度字符串</td></tr><tr><td align="center">blob</td><td align="center">二进制数据，最大字节数4G</td></tr><tr><td align="center">bfile</td><td align="center">二进制数据外部存储，最大字节数4G</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--建表语句</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    grade <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    birthday <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">,</span><span class="token string">'1班'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token string">'12-8月-1987'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test02'</span><span class="token punctuation">,</span><span class="token string">'2班'</span><span class="token punctuation">,</span>to_date<span class="token punctuation">(</span><span class="token string">'1987-12-8'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><p>在不影响数据的情况下，对表做出修改，对表的修改主要是对字段的修改。</p><p><strong>主要的操作：</strong></p><blockquote><p>1、添加字段。添加字段，总是可以成功，新添加的字段出现在表的最后面。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> tel varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>2、修改字段（修改字段的类型，修改字段的长度）。在该字段没有数据的时候，字段的类型、字段的长度都是可以修改的。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> tel <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于缺省值的修改，不会影响已经存在的数据，只会对以后插入的数据产生影响。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'女'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'test03'</span><span class="token punctuation">,</span><span class="token string">'1班'</span><span class="token punctuation">,</span>to_date<span class="token punctuation">(</span><span class="token string">'1987-12-8'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当该字段有数据时，字段的类型是不能修改的。字段的长度是可以修改的，增大总是可以的，减小时需要看数据的实际长度。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> grade varchar2<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>3、删除字段，将该字段下的所有数据一并删除。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> <span class="token keyword">column</span> tel<span class="token punctuation">;</span></code></pre><p><strong>在建表时使用子查询</strong></p><p>语法：</p><pre><code>create table table_name     [column(,column...)]assubquery;</code></pre><ul><li>新建的字段列表必须与子查询中的字段列表匹配</li><li>字段列表可以省略</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student_bak<span class="token keyword">as</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span>sname <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><p><strong>删除表的数据</strong></p><p>在删除数据的时候，可以使用delete语句，但是效率不高。</p><blockquote><p>truncate table比delete删除速度快，但是该命令需慎用</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span></code></pre><ul><li>清除表中所有的记录</li><li>是DDL语句，不可以回滚，而delete语句可以回滚</li><li>释放表的存储空间，delete命令不释放空间</li></ul><p><strong>删除表</strong></p><ul><li>表中所有的数据将被删除</li><li>没有完成的事务被提交</li><li>所有相关的索引被删除</li><li>不能回退</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span></code></pre><p><strong>改变对象的名称</strong></p><ul><li>在Oracle中，对象的名称可以方便的进行修改。通过一个DDL语句的<code>rename</code>命令可以改变一个数据库对象的名称</li><li>使用<code>rename</code>语句改变对象名称，可以修改表、视图、序列或同义词的名称</li><li>必须是对象的所有者，即使是DBA也不可以</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">rename</span> old_name <span class="token keyword">to</span> new_name<span class="token punctuation">;</span>tename student <span class="token keyword">to</span> student_new<span class="token punctuation">;</span></code></pre><p><strong>约束</strong></p><p>约束是在表上强制执行的数据校验规则，被插入，修改或删除的数据必须符合相关字段上设置的这些校验条件，也就是约束条件。</p><p>约束条件可以时构建在一个表的单个字段上，也可以构建在一个表的多个字段上。</p><p>当表中数据有相互依赖性时，可以保护相关的数据不被删除。</p><p>Oracle支持下面5类完整性约束：</p><ul><li>not null非空</li><li>unique key唯一键</li><li>primary key主键</li><li>foreign key外键</li><li>check 检察</li></ul><p>约束必须要建立在表上，但是约束时一个独立的数据库对象，没有表，也就没有约束。</p><p>创建约束的操作，可以在建表时把约束创建处理，也可以在建好表之后，通过alter table来给表添加约束。</p><p>约束也是一个独立的数据库对象，也需要命名，有两种方式：</p><p>1、给约束取名。</p><p>2、让oracle给约束取名。</p><p>非空约束，是唯一个可以定义在列级的约束（只能看守一个字段），确保该字段的数据不能为空。</p><p>除了主键约束外，一个表中可以同时存在多种相同类型的约束。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    grade <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    birthday <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>唯一约束，保证该字段的数据不能重复，或字段组合不能重复，但是可以为null</strong></p><p>一个表中也可以同时存在多个唯一约束。</p><p>唯一约束可以作用在单个字段上（称为列级约束）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    email varhcar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints email_uni <span class="token keyword">unique</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">,</span><span class="token string">'test@qq.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">,</span><span class="token string">'test2@qq.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>唯一约束也可以同时作用在多个字段上（称为表级约束）</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    first_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    last_name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints name_uni <span class="token keyword">unique</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>主键约束：从功能上说，相当于非空且唯一</strong></p><p>通过主键可以唯一确定一条记录。</p><p>在一个表中只能有一个主键约束。</p><p>一个实体中什么样的数据可以被确定为主键？</p><p>不要使用实体的业务数据来当作主键，因为业务数据是可以编号的，应该用一个和实体无关的流水号来当作表的主键。</p><p>主键约束作用在单个字段上。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints pk_stu <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主键约束同时作用在多个字段上。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    first_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    last_name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    grade varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints pk_stu <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'c++'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>外键约束</strong></p><p>一对多（多对一）用主外键来实现。</p><p>外键约束可以重复，可以为null。</p><p>外键约束关系到两个表的两个字段之间的关系。</p><p>在外键约束下，在建表时，须先建立父表，在建立.子表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept1<span class="token punctuation">(</span>    deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    dname varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> empl1<span class="token punctuation">(</span>    empno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    ename varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    job varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dept_no number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints fk_emp <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>dept_no<span class="token punctuation">)</span> <span class="token keyword">references</span> dept1 <span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在外键约束下，在添加数据时，要先添加父表数据，后添加子表数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'人事部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> empl1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">,</span><span class="token string">'销售员'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> empl1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test02'</span><span class="token punctuation">,</span><span class="token string">'工程师'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> empl1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'test03'</span><span class="token punctuation">,</span><span class="token string">'人事经理'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> empl1 <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'test04'</span><span class="token punctuation">,</span><span class="token string">'销售员'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在外键约束下，删除数据时，要先删除子表数据，后删除父表数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> empl1 <span class="token keyword">where</span> dept_no <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> dept1 <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>在外键约束下，删除表时，要先删除子表，后删除父表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> empl1<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> dept1<span class="token punctuation">;</span></code></pre><p>父表中的什么样的字段可以被其它表引为外键？<br>父表中的主键或唯一键可以被其他表作为外键。</p><p>在建立好表之后，通过alter table给表添加约束。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--一对一，用主外键来实现，在外键上同时设置唯一约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> card<span class="token punctuation">(</span>    cid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    cname varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> person<span class="token punctuation">(</span>    pid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    pname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    constraints fk_per_card <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">references</span> card<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> cid_uni <span class="token keyword">unique</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> card <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'身份证'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> card <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'身份证'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> card <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> card <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test02'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--多对多关系的实现，要引入关系表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span>    cid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    cname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1、关系表中可以用上面两个表中的主键当作外键，同时又把外键当作联合主键</span><span class="token keyword">create</span> <span class="token keyword">table</span> stu_cour<span class="token punctuation">(</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk1 foregin <span class="token keyword">key</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">references</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk2 foregin <span class="token keyword">key</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">references</span> course<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_stu_cour <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>sid<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2、关系表中可以用上面两个表中的主键当作外键，关系表中有自己独立的主键</span><span class="token keyword">create</span> <span class="token keyword">table</span> stu_cour<span class="token punctuation">(</span>    scid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cid number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk1 foregin <span class="token keyword">key</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">references</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk2 foregin <span class="token keyword">key</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">references</span> course<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'test01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'test02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'test03'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_cour <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_cour <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu_cour <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h1><table><thead><tr><th align="center">对象名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">表</td><td align="center">基本的数据存储对象，以行和列的形式存在</td></tr><tr><td align="center">约束</td><td align="center">执行数据校验，保证数据完整性的对象</td></tr><tr><td align="center">视图</td><td align="center">一个或多个表数据的显示</td></tr><tr><td align="center">索引</td><td align="center">用于提高查询的速度</td></tr><tr><td align="center">同义词</td><td align="center">对象的别名</td></tr></tbody></table><p><strong>数据库对象的命名规则</strong></p><ul><li>必须以字母开头</li><li>可包括数字（0-9），字母（a-z）和三个特殊字符（# _ $)</li><li>不要使用oracle的保留字</li><li>同一用户下的对象不能同名，即使是不同的对象类型</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>什么是索引？</p><ul><li>方案（schema）中的一个数据库对象</li><li>在Oracle数据库中用来加速对表的查询</li><li>通过使用快速路径访问方法快速定位数据，减少了磁盘的I/O</li><li>索引是独立的数据库对象，并不与表存储在一起，而是与表独立存放</li><li>索引记录了表的索引字段的值，也就是关键字，关键字始终与表的索引字段值相同，这种同步由Oracle数据库自动维护</li></ul><p><strong>创建索引有两种方式</strong>：</p><ul><li><p>自动创建：Oracle会自动为主键和唯一键创建索引</p><p>自动创建的索引是无法手动删除的，但是在删除主键约束、唯一约束时，对应的索引会被自动的删除。</p></li><li><p>手动创建约束，表中什么样的字段应该添加索引</p><p>查询时，经常被用来作为查询条件的字段，应该添加索引</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> ename_index <span class="token keyword">on</span> emp <span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--删除索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> ename_index<span class="token punctuation">;</span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图也就是虚表，实际上是一个命名的查询，用于改变数据的显示形式，简化查询。访问视图与表的访问方式是一样的。</p><p>任何有效的查询语句，无论是多么复杂，都可以被创建成一个视图。</p><p><strong>视图的好处</strong>：</p><ul><li>可以限制对数据的访问，让用户通过视图可以看到表中的一部分数据</li><li>可以使复杂的查询变得简单</li><li>提供了数据的独立性，用户不用知道数据来源于哪</li><li>提供了对相同数据的不同显示</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> emp_view<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--在子查询中使用别名创建视图</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> emp_v<span class="token punctuation">(</span>empno_v<span class="token punctuation">,</span>ename_v<span class="token punctuation">,</span>job_v<span class="token punctuation">,</span>年薪<span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">select</span>  <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> <span class="token string">"年薪"</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--在视图中的列名使用的是子查询中列的别名</span><span class="token comment" spellcheck="true">--在create view语句中字段与子查询中的字段必须匹配</span><span class="token comment" spellcheck="true">--在create view语句中字段与子查询中的字段必须匹配</span></code></pre><p>删除视图，会影响原来的数据吗？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> emp_view<span class="token punctuation">;</span></code></pre><p>视图是一个（虚）表，对表插入数据，也可以对视图插入数据。</p><p>对视图插入数据，数据会被插入到源表中。</p><p><strong>禁止对视图执行DML操作</strong></p><ul><li><p>通过设置with read only选项可以禁止对视图执行DML操作</p></li><li><p>当用户禁止对视图操作后，任何对视图执行的DML操作都将导致Oracle错误</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> v_empinfo<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2000</span><span class="token keyword">with</span> <span class="token keyword">read</span> only<span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>TON—P分析法</p></blockquote><p>行内视图，就是出现在from后面的子查询，也就是一个视图，但是该视图没有命名，不会在数据库中保存</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询工资最高的前三个人的信息，这种方式被称为TOP-N分析法</span><span class="token keyword">select</span> rownum<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token number">e</span><span class="token keyword">where</span> rownum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p><strong>rownum只能适用于&lt;=的情况，不能适用于&gt;=的情况。</strong></p><p>数据的插入顺序决定了查询数据时的顺序，也就是决定了rownum的顺序。</p><p>（1）rownum对于等于某值的查询条件</p><p>如果希望找到学生表中第一条学生的信息，可以使用rownum=1作为条件。但是想找到学生表中第二条学生的信息，使用rownum=2结果查不到数据。因为rownum都是从1开始，但是1以上的自然数在rownum做等于判断时认为都是false条件，所以无法查到rownum=n（n&gt;1的自然数）。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--可以查到数据</span><span class="token keyword">select</span> rownum<span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student t <span class="token keyword">where</span> rownum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询不到数据</span><span class="token keyword">select</span> rownum<span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student t <span class="token keyword">where</span> rownum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>（2）rownum对于大于某值的查询条件</p><p>如果想找到从第二行记录以后的记录，当使用rownum&gt;2是查询不出记录的，原因是由于rownum是一个总是从1开始的伪列，Oracle认为rownum &gt; n（n&gt;1的自然数）这种条件依旧不成立，所以查询不到记录。</p><p>（3）rownum对于小于某值的查询条件</p><p>如果想找到第三条记录以前的记录，当使用rownum&lt;3是能得到2条记录的。显然rownum对于rownum &lt; n（n&gt;1的自然数）的条件是成立的，所以可以找到记录。</p><p>（4）可能有时需要查询rownum在某区间的数据，从上面可以看出rownum对小于某值的查询条件是认为true的，rownum对于大于某值的查询条件直接认为是false的，但是可以间接的让它转为认为是true的。那就必须使用子查询。例如要查询rownum在第二行到第三行之间的数据，包括第二行和第三行数据，那么先让它返回小于等于3的记录行，然后再主查询中判断新的rownum的别名列大于等于2的记录行。但是这样的操作会在大数据集中影响速度。</p><p>（5）rownum和排序</p><p>Oracle中的rownum是在取数据时产生的序号，所以想对指定排序的数据去指定rownum行数据就必须注意了。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> rownum<span class="token punctuation">,</span>id<span class="token punctuation">,</span>name <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>rownum并不是按照name列来生成的序号，是系统按照记录插入时的顺序给记录排的号，rowid也是顺序分配的。为了解决这个问题，必须使用子查询。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--可以使用rowid来获得数据的修改权限</span><span class="token keyword">select</span> rowid<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">;</span></code></pre><p>对于rownum来说Oracle系统顺序分配为查询返回的行的编号，返回的第一行分配的是1，第二行是2，依次类推，这个伪字段可以用于限制查询返回的总行数，而且rownum不能以任何表的名称作为前缀。</p><p>rowid是物理地址，用于定位Oracle中具体数据的物理存储位置。</p><h2 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a>同义词</h2><p>同义词，就是数据库对象的一个别名，可以简化访问其它用户的数据库对象。</p><p>通过使用同义词，可以：</p><ul><li>简化了引用另一个用户对象的方法（用户名.对象名）</li><li>缩短了对象名称的长度</li><li>同时屏蔽了对象的名称，使用户不知道最终的数据来源于哪个对象</li></ul><p><strong>语法</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> synonym synonym_name <span class="token keyword">for</span> object<span class="token punctuation">;</span></code></pre><p><strong>创建和删除同义词</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建表的别名</span><span class="token keyword">create</span> synonym dual_1 <span class="token keyword">for</span> sys<span class="token punctuation">.</span>dual<span class="token punctuation">;</span><span class="token keyword">select</span> sysdate <span class="token keyword">from</span> dual_1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--删除同义词</span><span class="token keyword">drop</span> synonym dual_1<span class="token punctuation">;</span></code></pre><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>用来维护数据库的主键数据。</p><ul><li>nextval，currval的使用</li><li>select *.currval from sys.dual;</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--</span><span class="token keyword">create</span> sequence seq_stuminvalue <span class="token number">1</span>maxvalue <span class="token number">9999</span><span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1</span>increment <span class="token keyword">by</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--使用序列</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span>seq_stu<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> seq_stu<span class="token punctuation">.</span>currval <span class="token keyword">from</span> sys<span class="token punctuation">.</span>dual<span class="token punctuation">;</span></code></pre><h1 id="数据库设计范式"><a href="#数据库设计范式" class="headerlink" title="数据库设计范式"></a>数据库设计范式</h1><p><strong>第一范式</strong>：一个表中不能包含重复的数据列。</p><p>一个表中不能包含重复的数据列。一个实体不能包含重复的属性（消除重复数据组，没有重复的属性和属性组）。</p><p><strong>第二范式</strong>：所有的非主键字段必须完全依赖于表（实体）的主键。</p><p><strong>第三范式</strong>：非主键字段不能依赖于其它的非主键字段，即非主键字段之间不存在着传递依赖。</p><p>非主键属性不能依赖于其它的非主键属性。换句话说就是非主键属性之间不能存在传递依赖。</p><h1 id="PL-SQL"><a href="#PL-SQL" class="headerlink" title="PL/SQL"></a>PL/SQL</h1><p>PL/SQL也是一种程序语言，被称作支持SQL的程序语言（Program Language），是Oracle数据库对SQL语句的扩展，在普通的SQL语言中增加了编程语言的特点。</p><p>数据操作和查询语句被包含在PL/SQL代码的过程性单元中，经过逻辑判断、循环等操作完成复杂的功能或者计算。</p><p>使用PL/SQL可以编写具有很多高级功能的程序，虽然这些功能可以通过多个SQL语句来完成同样的功能，但是PL/SQL具有以下的优点：</p><ul><li>使一组语句功能形成模块化程序开发</li><li>使用过程性语言控制程序结构</li><li>可以对程序中的错误进行处理</li><li>具有较好的可移植性</li><li>集成在数据库中，调用更快</li><li>减少了网络的交互，有助于提高程序性能</li></ul><p><strong>PL/SQL提供的新特性</strong></p><p>PL/SQL提供了一些新的特性，可以进行复杂的信息处理</p><ul><li>软件包</li><li>触发器</li><li>存储过程</li><li>函数</li><li>异常处理</li></ul><p>PL/SQL可以使用所有的SQL数据操作，游标控制和事务控制命令，以及所有的SQL函数和运算符。PL/SQL完全支持SQL数据类型。</p><blockquote><p>SQL，SQL*Plus，PL/SQL之间的关系</p></blockquote><p>可以把Oracle数据库看作餐馆的厨房，而<code>SQL*Plus</code>是将菜单（脚本，命令或程序）送进厨房（即数据库）的服务员。在厨房中有两个厨师，SQL和PL/SQL。作为服务员的<code>SQL*Plus</code>知道它可以处理哪些命令，哪些命令要交给厨师处理。</p><p>在<code>SQL*Plus</code>提示符下输入的执行命令或程序就像顾客点的蔡，对于每个顾客点的蔡，厨师都知道如何及逆行处理，就像在厨师心中的菜谱一样，PL/SQL也存储常用命令的食谱（这些元素称为触发器，存储函数，存储过程，软件包）。</p><p>有些大菜需要多个厨师共同处理，大多数的程序都是结合了SQL和PL/SQL，并在它们之间来回的传递信息，从而处理脚本或程序。顾客点的菜做好之后，再由作为服务员的<code>SQL*Plus</code>将执行的结果显示给用户。</p><h2 id="PL-SQL块的基本结构"><a href="#PL-SQL块的基本结构" class="headerlink" title="PL/SQL块的基本结构"></a>PL/SQL块的基本结构</h2><p>PL/SQL中起作用的部分都是由基本块组成的。基本块由4个组成部分。</p><ul><li><p>声明部分：<code>declare</code>，可选部分</p><p>变量、常量、游标、用户自定义异常声明</p></li><li><p>执行体开始部分：<code>begin</code>，必要部分</p><ul><li>sql语句</li><li>PL/SQL语句</li></ul></li><li><p>异常处理部分：<code>exception</code>，可选部分</p><p>程序出现异常时，捕捉异常并处理异常</p></li><li><p>执行体结束：<code>end;</code>，必要部分</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">--在declare部分声明变量，常量等</span>    <span class="token comment" spellcheck="true">--声明变量的规范：变量名称 变量类型 [:=缺省值];</span>    v_deptno number<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--在begin部分可以写sql语句，pl/sql语句</span>    <span class="token comment" spellcheck="true">--在begin部分可以使用declare部分声明的变量，常量</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'欢迎使用PL/SQL，执行查询语句之前，v_deptno='</span> <span class="token operator">||</span> v_deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> deptno <span class="token keyword">into</span> v_deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'执行查询语句后，v_deptno='</span> <span class="token operator">||</span> v_deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> v_deptno<span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> v_deptno<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>PL/SQL环境</strong></p><p>在数据库执行PL/SQL程序时，PL/SQL语句和SQL语句被分别解析和执行的。PL/SQL块被数据库内部的PL/SQL引擎提取，将SQL语句取出送给Oracle的SQL引擎。两种语句分别在两种引擎中分析处理，在数据库内部完成数据交互，处理的过程。</p><h2 id="PL-SQL块语法规则"><a href="#PL-SQL块语法规则" class="headerlink" title="PL/SQL块语法规则"></a>PL/SQL块语法规则</h2><ul><li><p>语句可以写在多行，就像SQL语句一样</p></li><li><p>各个关键字，字段名称等，通过空格分隔</p></li><li><p>每条语句必须通过分号结束，包括PL/SQL结束部分的end关键字后面也需要加分号</p></li><li><p>标识符的规定</p><ul><li>最多可以包含30个字符</li><li>不能包含保留字，若有使用双引号括起来</li><li>必须以字母字符开始</li><li>不能与数据库的表或者列名称相同</li></ul></li><li><p>在PL/SQL程序中出现的字符和日期必须用单引号括起来</p></li><li><p>数字可以是简单值或科学计数法表示</p><pre><code>v_Sql number(4) := 2000;v_year number(4) := v_sql *12;</code></pre></li><li><p>在PL/SQL中也需养成添加注释的习惯，注释可以是</p><ul><li><code>/*</code>和<code>*/</code>之间的多行注释</li><li>单行注释，以<code>--</code>开始</li></ul></li></ul><h2 id="PL-SQL中处理变量"><a href="#PL-SQL中处理变量" class="headerlink" title="PL/SQL中处理变量"></a>PL/SQL中处理变量</h2><ul><li>在声明部分声明和初始化变量</li><li>在执行部分为变量赋新值，或在表达式中使用变量</li><li>在异常处理部分也可以使用变量</li><li>通过参数把值传递到PL/SQL块中</li><li>通过输出变量或者参数将值传出PL/SQL块</li></ul><p><strong>声明变量和常量</strong></p><p>语法：</p><pre><code>identifier [constant] datatype [not null]            [:= | default expr];</code></pre><ul><li>定义的标识符名称应遵循命名规则</li><li>在声明常量时可以为其设置初始化值，也可以设置not null</li><li>可以使用赋值运算符（:=）或者default保留字来初始化标识符</li><li>在声明时，每行只能声明一个标识符</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_total_sal number<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--PL/SQL中赋值语句</span>    c_tax_rate constant number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">8.25</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--常量只能被赋值一次</span>    v_gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_valid <span class="token keyword">boolean</span> <span class="token operator">not</span> <span class="token boolean">null</span> :<span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    v_b <span class="token keyword">boolean</span><span class="token punctuation">;</span>    v_num1 number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    v_num2 number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_total_sal='</span> <span class="token operator">||</span> v_total_sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- = 相当于Java中的 == 的功能，执行逻辑比较操作</span>    v_b :<span class="token operator">=</span> <span class="token punctuation">(</span>v_num1 <span class="token operator">=</span> v_num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    if(v_b = true) then        dbms_output.put_line('OK');    else        dbms_output.put_line('NOT OK');    end if;    */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v_b<span class="token punctuation">)</span> <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'NOT OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>简单变量</strong></p><p>简单变量不包括任何组件，只能保存一个值</p><p>基本类型包括三大类：字符，数字，日期</p><ul><li>binary_integer，整形数字</li><li>number[(precision,scale)]，数字类型</li><li>char[(maximum_length)]，定长字符类型</li><li>varchar2(maximum_length)，变长字符类型</li><li>date，日期类型</li><li>long，长字符类型</li><li>long raw，长二进制类型</li><li>clob/blob/bfile，大对象类型（字符大对象，二进制大对象，操作系统文件大对象）</li><li>boolean，布尔类型，有效值为true，false，null</li></ul><p><strong>复合数据类型</strong></p><p>复合变量也叫组合变量。在复合变量中包含多个内部的组件，每个组件都可以单独存放值。一个复合变量可以存放多个值。</p><p>与简单变量类型不同，复合变量不是数据库中已经存在的数据类型，所以复合变量在声明类型之前，首先要创建使用到的复合类型，然后将变量声明为复合变量。</p><p>复合数据类型：</p><ul><li>PL/SQL tables，表类型</li><li>PL/SQL records，记录类型</li></ul><p>复合类型被创建后，可以被使用多次定义多个变量。</p><blockquote><p>table</p></blockquote><pre><code>type type_name = is table of scalar_datatype    [not null] index by binary_integer;identifier type_name;</code></pre><p>表类型类似于其它编程语言中的数组类型</p><p>由两个组件组成：</p><ul><li>数据类型为binary_integer（整形数字）的主键</li><li>数据类型为一个确定的简单类型的列</li></ul><p>table类型没有长度限制，可以动态增长。表类型中的第二部分类似于数组中的值，这个部分必须是一个已经确定的简单类型，不能是其它的复合类型。</p><p>表类型的结构很像数组。第一部分是一个按1递增的整形数字，起到数字索引的作用，第二部分是一种确定的简单类型，用来存放每个索引号对应的具体的数值。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">--在声明部分声明表类型</span>    <span class="token keyword">type</span> nameed_table_type <span class="token operator">is</span> <span class="token keyword">table</span> <span class="token keyword">of</span> varchar2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">index</span> <span class="token keyword">by</span> binary_integer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--使用声明的表类型来声明变量</span>    v_table1 nameed_table_type<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--给表类型的变量赋值，可以通过索引来访问表类型的变量</span>    <span class="token comment" spellcheck="true">--表类型的变量没有长度的限制</span>    v_table1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'hello1'</span><span class="token punctuation">;</span>    v_table1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'hello2'</span><span class="token punctuation">;</span>    v_table1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'hello3'</span><span class="token punctuation">;</span>    v_table1<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'工程师'</span><span class="token punctuation">;</span>    v_table1<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'hello1'</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_table1(1)='</span> <span class="token operator">||</span> v_table1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">',v_table1(2)='</span> <span class="token operator">||</span> v_table1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><blockquote><p>records</p></blockquote><p>复合类型中的records类型是由多个组件组成的一种类型。包含一个或几个组件，每个组件称为一个域（field），域的数据类型可以是简单变量类型、另一个record类型或PL/SQL的table类型。</p><p>在使用records变量时把多个域的集合作为一个逻辑单元使用，对记录类型变量赋值或引用，都需要使用”记录变量名.域名“的方式来实现。</p><p>主要用于从表中取出查询到的行数据。</p><p>记录类型可以包含一个或多个域，每个域相当于记录类型变量的一个属性。在使用记录变量类型时，实际上是对记录类型变量的属性进行操作。每个域都可以是不同的数据类型，存放不同类型的数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">--声明记录类型</span>    <span class="token keyword">type</span> named_recore_type <span class="token operator">is</span> record<span class="token punctuation">(</span>        empno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ename varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        job varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        mgr number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        hiredate <span class="token keyword">date</span><span class="token punctuation">,</span>        sal number<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        com number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--使用记录类型来声明变量</span>    v_rec named_recore_type<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--给记录类型的变量赋值，只有类型中声明好的字段，才可以进行访问</span>    v_rec<span class="token punctuation">.</span>empno :<span class="token operator">=</span> <span class="token number">7963</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>ename :<span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>job :<span class="token operator">=</span> <span class="token string">'Java开发'</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>mgr :<span class="token operator">=</span> <span class="token number">7800</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>hiredate :<span class="token operator">=</span> to_date<span class="token punctuation">(</span><span class="token string">'1987-12-5'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>sal :<span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>comm :<span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    v_rec<span class="token punctuation">.</span>deptno :<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_rec.empno='</span> <span class="token operator">||</span> v_rec<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">'v_rec.ename='</span> <span class="token operator">||</span> v_rec<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>%type</strong></p><p>除了可以使用已经确定的类型来声明变量之外，还可以使用<code>%type</code>，<code>%rowtype</code>来作为变量的类型。</p><p><code>%type</code>的前缀可以是一个前面已经声明过的简单类型的变量（可以是简单类型的变量，也可以是复合类型的变量-表类型的变量），也可以是一个表的字段的名称。</p><p>通过<code>%type</code>类型声明新变量的类型，实际上就是将参照的变量或表中的字段类型作为新变量的类型，新变量的类型与它所参照的类型完全相同，并且保持同步。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_empno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--用v_empno的类型作为v_deptno的类型</span>    v_deptno v_empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    v_empno :<span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>    v_deptno :<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_empno='</span> <span class="token operator">||</span> v_empno <span class="token operator">||</span> <span class="token string">'v_deptno='</span> <span class="token operator">||</span> v_deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span><span class="token comment" spellcheck="true">--用emp表的deptno的类型作为v_deptno的类型，当emp表中的deptno的类型编号变化时，v_deptno的类型自动跟着变化</span>    v_deptno emp<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    v_deptno :<span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_deptno='</span> <span class="token operator">||</span> v_deptno<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>使用%type属性的好处：</p><ul><li>可能不知道数据库中字段的数据类型</li><li>数据库中字段的数据类型可以在运行时被改变</li><li>和前面声明过的变量的类型保持一致</li></ul><p><strong>%rowtype</strong></p><p><code>%rowtype</code>与%type作用类似，用于定义不确定的类型。</p><p><code>%rowtype</code>的前缀可以是一个表名（或视图），也可以是前面声明的一个记录类型的变量（该变量必须要参照一个表，而不能是自定义的记录类型）。</p><p>record中的域，与表的字段名称、个数、数据类型，以及长度完全相同，可以用来存放从从表中取出的一条记录的所有的字段值（select * from table）。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">-- %rowtype的前缀是一个表名</span>    v_emp dept<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--使用%rowtype时，Oracle做了两件事：1、用dept表的字段及其类型来声明了一种记录类型；2、用这种记录来声明变量</span><span class="token keyword">begin</span>    v_emp<span class="token punctuation">.</span>deptno :<span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    v_emp<span class="token punctuation">.</span>dname :<span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span>    v_emp<span class="token punctuation">.</span>loc :<span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_emp.deptno='</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>deptno <span class="token operator">||</span> <span class="token string">'v_emp.dname='</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>dname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">--v_dept是一种记录类型的变量</span>    v_dept dept<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--用v_dept的类型（记录类型）来作为v_emp的类型，v_emp也是一种记录类型</span>    v_emp v_dept<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    v_emp<span class="token punctuation">.</span>deptno :<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    v_emp<span class="token punctuation">.</span>dname :<span class="token operator">=</span> <span class="token string">'人事部'</span><span class="token punctuation">;</span>    v_emp<span class="token punctuation">.</span>loc :<span class="token operator">=</span> <span class="token string">'上海'</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_emp.deptno='</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>deptno <span class="token operator">||</span> <span class="token string">'v_emp.dname='</span> <span class="token operator">||</span> v_emp<span class="token punctuation">.</span>dname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><code>%rowtype</code>声明的肯定是记录类型的变量。</p><h2 id="嵌套块和变量作用域"><a href="#嵌套块和变量作用域" class="headerlink" title="嵌套块和变量作用域"></a>嵌套块和变量作用域</h2><p>PL/SQL程序也叫做PL/SQL程序块，在程序块中可以嵌套另一个程序块，外部的程序块叫做”父块“或”外部块“，嵌套的块叫”子块“或”嵌套块“。</p><ul><li>只要是允许执行语句的地方，就可以使用嵌套PL/SQL块</li><li>嵌套块也被当作一个语句</li><li>异常部分也可以包含嵌套块，嵌套块也可以包括异常部分</li><li>应用对象的程序对象的作用域指的是可见范围</li><li>标识符可见的范围<ul><li>子块可以向上查看父块的标识符</li><li>父块不能向下查看子块的标识符</li></ul></li></ul><p>PL/SQL嵌套块的使用：只要是能出现非声明性的SQL语句的地方（在begin和exception部分），都可以出现嵌套块。嵌套块本本身就被当作一个SQL语句来执行。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_weight number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span>        v_weight number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">begin</span>        v_weight :<span class="token operator">=</span> v_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在嵌套块中：v_weight='</span> <span class="token operator">||</span> v_weight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--201</span>    <span class="token keyword">end</span><span class="token punctuation">;</span>    v_weight :<span class="token operator">=</span> v_weight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在嵌套块外：v_weight='</span> <span class="token operator">||</span> v_weight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--101</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="PL-SQL中的函数"><a href="#PL-SQL中的函数" class="headerlink" title="PL/SQL中的函数"></a>PL/SQL中的函数</h2><ul><li><p>可用</p><ul><li>数字函数</li><li>字符函数</li><li>类型转换函数</li><li>日期函数</li></ul></li><li><p>不可用</p><ul><li>组函数</li></ul></li></ul><p>在PL/SQL中使用函数和直接在Oracle中使用函数没有区别。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_date datep :<span class="token operator">=</span> to_date<span class="token punctuation">(</span><span class="token string">'1987-12-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'Hello test'</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_date='</span> <span class="token operator">||</span> to_char<span class="token punctuation">(</span>v_date<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">',字符长度是：'</span> <span class="token operator">||</span> length<span class="token punctuation">(</span>v_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>数据类型转换</strong></p><p>把数据转换为可操作的数据类型。</p><p>转换函数：</p><ul><li>to_char</li><li>to_date</li><li>to_number</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_1 varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--v_1 := user || ':' || to_char(sysdate);</span>    v_1 :<span class="token operator">=</span> <span class="token keyword">user</span> <span class="token operator">||</span> <span class="token string">':'</span> <span class="token operator">||</span> sysdate<span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="PL-SQL中的SQL命令"><a href="#PL-SQL中的SQL命令" class="headerlink" title="PL/SQL中的SQL命令"></a>PL/SQL中的SQL命令</h2><p>在PL/SQL程序块中可以使用各种SQL命令，但是使用的方法根据命令不同也各不相同。</p><ul><li>使用select命令，可以从数据库中取出单行数据，语法略有变化</li><li>使用DML命令，修改数据库中的行，没有变化</li><li>使用commit或rollback命令控制事务，没有变化</li><li>通过execute immediate，执行DDL和DCL语句</li></ul><blockquote><p>查询数据</p></blockquote><p>在PL/SQL中通过select从数据库中检索数据：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> select_list<span class="token keyword">into</span> ariable_name <span class="token operator">|</span> record_name<span class="token keyword">from</span> <span class="token keyword">table</span><span class="token keyword">where</span> condition<span class="token punctuation">;</span></code></pre><ul><li>必须使用into子句，用于将查询出的数据传递给变量</li><li>查询必须并且只能返回一行</li><li>可以使用完整的select语法</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_empno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    v_ename emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--查询列表和变量必须要匹配</span>    <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename <span class="token keyword">into</span> v_empno<span class="token punctuation">,</span>v_ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_empno='</span> <span class="token operator">||</span> v_empno <span class="token operator">||</span> <span class="token string">',v_ename='</span> <span class="token operator">||</span> ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--用记录类型的变量和select *搭配使用</span><span class="token keyword">declare</span>    v_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> v_emp <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_empno='</span> <span class="token operator">||</span> v_empno <span class="token operator">||</span> <span class="token string">',v_ename='</span> <span class="token operator">||</span> ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>在PL/SQL中使用组函数时，可以使用，但是要保证查询语句只能返回一条记录。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_maxsal number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_minsal number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> maxsal<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> minsal <span class="token keyword">into</span> v_deptno<span class="token punctuation">,</span>v_maxsal<span class="token punctuation">,</span>v_minsal    <span class="token keyword">from</span> emp    <span class="token keyword">group</span> <span class="token keyword">by</span> deptno    <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3000</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_deptno='</span> <span class="token operator">||</span> v_deptno <span class="token operator">||</span> <span class="token string">',v_maxsal='</span> <span class="token operator">||</span> v_maxsal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>查询异常</strong></p><p>PL/SQL中的select语句必须返回且只返回一行。如果检索到了0行或多于1行，将会引起异常。</p><p>select常见的异常：</p><ul><li>too_many_rows</li><li>no_data_found</li></ul><blockquote><p>操作数据</p></blockquote><p>通过使用DML命令，修改数据库中表的数据。</p><p>在PL/SQL中执行DML语句、事务控制语句和在Oracle中执行没有任何区别。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'销售员'</span><span class="token punctuation">,</span><span class="token number">7902</span><span class="token punctuation">,</span><span class="token string">'12-8月-1987'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> emp <span class="token keyword">set</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span>sal <span class="token operator">=</span> <span class="token number">2600</span> <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--commit;</span>    <span class="token comment" spellcheck="true">--rollback;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>在PL/SQL中执行DDL，DCL要使用execute immediate。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">begin</span>    <span class="token keyword">execute</span> immediate <span class="token string">'create table users (id number(4) primary key,name varchar2(20),sex char(2) )'</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">execute</span> immediate <span class="token string">'create table users (userid number(4) primary key,username varchar2(20),sex char(2) check (sex in ('</span><span class="token string">'男'</span><span class="token string">','</span><span class="token string">'女'</span><span class="token string">')) )'</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>在PL/SQL中使用if elsif else。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--根据职务，现有的工资，给7369涨工资</span><span class="token keyword">declare</span>    v_job emp<span class="token punctuation">.</span>job<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    v_sal emp<span class="token punctuation">.</span>sql<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    v_addsal v_sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> job<span class="token punctuation">,</span>sal <span class="token keyword">into</span> v_job<span class="token punctuation">,</span>v_sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v_job <span class="token operator">=</span> <span class="token string">'CLERK'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_addsal :<span class="token operator">=</span> v_sal <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>    elsif <span class="token punctuation">(</span>v_job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_addsal :<span class="token operator">=</span> v_sal <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>    elsif <span class="token punctuation">(</span>v_job <span class="token operator">=</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_addsal :<span class="token operator">=</span> v_sal <span class="token operator">*</span> <span class="token number">1.7</span><span class="token punctuation">;</span>    elsif <span class="token punctuation">(</span>v_job <span class="token operator">=</span> <span class="token string">'MANAGER'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_addsal :<span class="token operator">=</span> v_sal <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        v_addsal :<span class="token operator">=</span> v_sal <span class="token operator">*</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> v_addsal <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p><strong>loop语句</strong></p><p>循环用于多次执行某些语句。</p><p>主要有三种循环类型：</p><ul><li>简单循环</li><li>for循环</li><li>while循环</li></ul><p>循环的四个条件：1、初始条件；2、循环条件；3、循环体；4、迭代条件。</p><p><strong>简单循环</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_count number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--初始条件</span><span class="token keyword">begin</span>    loop        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_count='</span> <span class="token operator">||</span> v_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--循环体</span>        v_count :<span class="token operator">=</span> v_count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--迭代条件</span>        <span class="token keyword">exit</span> <span class="token keyword">when</span> v_count <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--循环条件</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--利用loop循环，向users表插入10条数据，如果编号是奇数，性别为男；如果编号是偶数，性别为女</span><span class="token keyword">declare</span>    v_sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_count number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    v_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    loop        <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">(</span>v_count<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            v_sex :<span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v_sex :<span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        v_name :<span class="token operator">=</span> <span class="token string">'test'</span> <span class="token operator">||</span> v_count<span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token keyword">values</span><span class="token punctuation">(</span>v_count<span class="token punctuation">,</span>v_name<span class="token punctuation">,</span>v_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        v_count :<span class="token operator">=</span> v_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span> <span class="token keyword">when</span> v_count <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>for循环</strong></p><p>使用for循环，循环执行指定次数。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">for</span> <span class="token keyword">index</span> <span class="token operator">in</span> <span class="token punctuation">[</span>reverse<span class="token punctuation">]</span> lower_bound<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>upper_bound loop    statement1<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> loop<span class="token punctuation">;</span></code></pre><p>reverse是反转的意思，正常的循环计数器从小到大，使用reverse将计数器从大到小递减。</p><p>for循环使用的规则：</p><ul><li>循环计数器不需要声明，Oracle自动为for循环声明计数器变量</li><li>只能在循环体内引用计数器</li><li>如果需要在循环体外引用计数器的值，可以使用一个变量记录计数器的值</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">for</span> v_count <span class="token operator">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">100</span> loop        <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">(</span>v_count<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            v_sex :<span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v_sex :<span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        v_name :<span class="token operator">=</span> <span class="token string">'test'</span> <span class="token operator">||</span> v_count<span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token keyword">values</span><span class="token punctuation">(</span>v_count<span class="token punctuation">,</span>v_name<span class="token punctuation">,</span>v_sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>while循环</strong></p><p>使用while循环，只要条件满足就执行循环。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">while</span> condition loop    statement1<span class="token punctuation">;</span>    statement2<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> loop<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_count number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>v_count <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> loop        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_count='</span> <span class="token operator">||</span> v_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        v_count :<span class="token operator">=</span> v_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常就是在Oracle数据库中运行时出现的错误，可能使用户设置的一些数据规则的违反（如约束），异常处理就是对这些异常的捕捉和处理。</p><p>在PL/SQL中出现的异常，如果没有处理，异常会被传递给调用环境，中断程序的执行。</p><p>PL/SQL程序会从发生异常的代码处中断，以后的代码是无法执行的。</p><p><strong>捕获异常语法</strong></p><pre><code>exception    when exception1 [or exception2...] then        statement1;        statement2;        ...    [when exception3 [or exception4...] then        statement1;        statement2;        ...    ]    [when others then        statement1;        statement2;        ...    ]</code></pre><p>异常出现在程序的执行部。在执行某些语句时，可能违反了某些数据库的规则或用户的规则，从而触发异常。异常在发生之后就不能继续执行程序，而是立刻进入到异常处理部分（exception）；在异常处理部分首先要捕获异常，如果异常被捕获到，就执行用户定义的异常处理程序，如果发生的异常没有被捕获到，就会被传递到程序的调用环境中，产生报错信息。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_job emp<span class="token punctuation">.</span>job<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> job <span class="token keyword">into</span> v_job <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">8001</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_job='</span> <span class="token operator">||</span> v_job<span class="token punctuation">)</span><span class="token punctuation">;</span>exception    <span class="token keyword">when</span> no_data_found <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'执行的select语句没有查询到结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> others <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'PL/SQL中发生了其它异常'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>当PL/SQL程序中，在begin部门的语句引起异常之后，就会进入到exception部分执行异常处理功能。</p><p><strong>Oracle的异常类型分为三类</strong></p><ul><li><p>预定义异常，Oracle中已经预先为这种异常定义好了名称，在异常处理部分直接通过异常名称进行捕获。</p><p>预定义的一些异常名称：</p><ul><li>no_data_found，没有找到数据</li><li>too_many_rows，数据太多</li><li>invalid_cursor，失效的游标</li><li>zero_divide，除数为0</li><li>dup_val_on_index，唯一索引中插入重复值</li><li>value_error，赋值异常</li></ul></li><li><p>非预定义异常，也是因为违反了Oracle的规则，Oracle会产生报错信息（有错误编号和错误信息），但是Oracle并没有为这类错误定义好异常名称，那么可以自定义一种异常名称，并将这种异常名称和错误编号进行绑定。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    e_myexception exception<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--自定义一种异常名称</span>    pragma exception_init<span class="token punctuation">(</span>v_emp_remaining<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">002292</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>exception    <span class="token keyword">when</span> v_emp_remaining <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'违反外键约束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> others <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'PL/SQL中发生了其它异常'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li><li><p>用户定义异常，操作时，并没有违反Oracle的规则，而是违反了用户定义的规则。由于没有违反Oracle的规则，Oracle不会自己主动的产生报错信息，需要手动的提升一个异常。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> sm_emp<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> sm_emp<span class="token punctuation">(</span>    <span class="token keyword">no</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    salary number<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    phone char<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> sm_emp <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">999.99</span><span class="token punctuation">,</span><span class="token string">'3474907'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> sm_emp <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'02'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">999.99</span><span class="token punctuation">,</span><span class="token string">'3474907'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> sm_emp <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'te'</span><span class="token punctuation">,</span><span class="token number">999.99</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">declare</span>    e_phone_lost_exception exception<span class="token punctuation">;</span>    <span class="token keyword">cursor</span> cur_sm_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sm_emp<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">for</span> v_rec_emp <span class="token operator">in</span> cur_sm_emp 1oop        <span class="token keyword">if</span><span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>phone <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            v_name :<span class="token operator">=</span> v_rec_emp<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            raise e_phone_lost_exception<span class="token punctuation">;</span>        <span class="token keyword">end</span> id<span class="token punctuation">;</span>    <span class="token keyword">end</span> loopexception    <span class="token keyword">when</span> e_phone_lost_exception <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_name <span class="token operator">||</span> <span class="token string">'的电话为null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> others <span class="token keyword">then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'PL/SQL中发生了其它异常'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li></ul><p>预定义异常和非预定义异常都是因为违反了Oracle的规则，Oracle会自动的产生异常；而用户自定义异常并没有违反Oracle的规则，Oracle不会自动的产生异常。</p><p><strong>异常捕获相关的函数</strong></p><p>在进行异常捕获时，在where子句中捕获大多数的预先可以预测到的异常。但是在数据库中存在太多的不可预期的异常。所以在程序中很可能异常发生时，没有捕获。这时需要借助<code>where others then</code>子句在处理这些的非预期的异常。</p><p><code>where others then</code>可以捕获到预先没有定义的异常。为了有效的处理这些异常，以便在以后的程序中减少这些异常，通常会将这些异常写入错误日志表中。</p><p>为了能够记录发生的异常信息，Oracle提供了两个函数：</p><ul><li>sqlcode，返回错误代码，number类型</li><li>sqlerrm，返回与错误代码关联的信息，varchar2类型</li></ul><blockquote><p>对于非预测的异常，如何处理？</p></blockquote><p>用when  others then捕获所有的非预期的异常，渠道错误编号和错误信息，记录到数据库中。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> err_log<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> err_log <span class="token punctuation">(</span>id number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>code number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>message varchar2<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">datetime</span> <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> err_LOG<span class="token punctuation">;</span><span class="token keyword">declare</span>    v_code number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_msg varchar2<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>exception    <span class="token keyword">when</span> others <span class="token keyword">then</span>        <span class="token comment" spellcheck="true">--获取错误编号</span>        v_code :<span class="token operator">=</span> salcode<span class="token punctuation">;</span>        v_msg :<span class="token operator">=</span> sqlerrm<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">--把错误编号和错误信息插入到日志表中</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> err_log <span class="token keyword">values</span><span class="token punctuation">(</span>seq_errlog<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span>v_code<span class="token punctuation">,</span>v_msg<span class="token punctuation">,</span>sysdate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">commit</span><span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'PL/SQL程序中遇到异常，请查询日志表获取详细信息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="PL-SQL程序单元"><a href="#PL-SQL程序单元" class="headerlink" title="PL/SQL程序单元"></a>PL/SQL程序单元</h2><p>PL/SQL程序，也叫PL/SQL程序单元，是数据库中命名的PL/SQL块。</p><p>主要有四类：</p><ul><li>过程，执行特定操作</li><li>函数，进行复杂计算，返回计算的结果</li><li>包，将逻辑上相关的过程和函数组织在一起</li><li>触发器，事件触发，执行相应操作</li></ul><p><strong>块类型</strong></p><ul><li><p>匿名块</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span><span class="token keyword">declare</span><span class="token punctuation">]</span>    变量，常量声明<span class="token keyword">begin</span>    语句<span class="token punctuation">;</span><span class="token punctuation">[</span>exception<span class="token punctuation">]</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li><li><p>过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">procedure</span> name <span class="token operator">is</span>    变量，常量声明<span class="token keyword">begin</span>    语句<span class="token punctuation">;</span><span class="token punctuation">[</span>exception<span class="token punctuation">]</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li><li><p>函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">function</span> name <span class="token keyword">return</span> datatype <span class="token operator">is</span>    变量，常量声明<span class="token keyword">begin</span>    语句<span class="token punctuation">;</span>    returen <span class="token keyword">value</span><span class="token punctuation">;</span><span class="token punctuation">[</span>exception<span class="token punctuation">]</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li><li><p>触发器</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">trigger</span> name <span class="token keyword">after</span><span class="token operator">|</span>before <span class="token operator">is</span>    变量，常量声明<span class="token keyword">begin</span>    语句<span class="token punctuation">;</span><span class="token punctuation">[</span>exception<span class="token punctuation">]</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li><li><p>包</p><pre class=" language-sql"><code class="language-sql">package name    函数声明<span class="token punctuation">;</span>    过程声明<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span>package body name<span class="token keyword">begin</span>    函数定义<span class="token punctuation">;</span>    过程定义<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong>匿名块</strong></p><ul><li>匿名块只使用一次的PL/SQL程序块</li><li>匿名块没有名称，也不被存储在数据库中，它不是PL/SQL存储程序单元</li><li>由PL/SQL的四个基本组成部分构成</li><li>在SQL*PLUS中通过“/”编译并且执行</li><li>不能被重复使用，当要执行时，需要重新编写并编译执行</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> cur_emp <span class="token operator">is</span>    <span class="token keyword">cursor</span> cur_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    v_rec_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">open</span> cur_emp<span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur_emp<span class="token operator">%</span>found<span class="token punctuation">)</span> loop        <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> v_rec_emp<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'查询数据的总条数是：'</span> <span class="token operator">||</span> cur_emp<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">close</span> cur_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--调用过程</span><span class="token comment" spellcheck="true">--在命令行中调用</span><span class="token keyword">exec</span> cur_emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--在匿名块中调用</span><span class="token keyword">begin</span>    cur_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>创建带有参数的存储过程。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> add_dept<span class="token punctuation">(</span>p_deptno number<span class="token punctuation">,</span>p_dname varchar2<span class="token punctuation">,</span>p_loc varchar2<span class="token punctuation">)</span> <span class="token operator">is</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span>p_deptno<span class="token punctuation">,</span>p_dname<span class="token punctuation">,</span>p_loc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--在匿名块中调用存储过程</span><span class="token comment" spellcheck="true">--调用有参数的过程的不同方式</span><span class="token comment" spellcheck="true">--1、按参数名称调用</span><span class="token keyword">declare</span>    v_deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    v_dname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">;</span>    v_loc varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    add_dept<span class="token punctuation">(</span>p_loc <span class="token operator">=</span><span class="token operator">></span> v_loc<span class="token punctuation">,</span>p_dname <span class="token operator">=</span><span class="token operator">></span> v_dname<span class="token punctuation">,</span>p_deptno <span class="token operator">=</span><span class="token operator">></span> v_deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2、按参数的位置进行调用</span><span class="token keyword">declare</span>    v_deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    v_dname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">;</span>    v_loc varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    add_dept<span class="token punctuation">(</span>v_deptno<span class="token punctuation">,</span>v_dname<span class="token punctuation">,</span>v_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3、按混合方式调用</span><span class="token keyword">declare</span>    v_deptno number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    v_dname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">;</span>    v_loc varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    add_dept<span class="token punctuation">(</span>v_deptno<span class="token punctuation">,</span>p_loc <span class="token operator">=</span><span class="token operator">></span> v_loc<span class="token punctuation">,</span>p_dname <span class="token operator">=</span><span class="token operator">></span> v_dname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>作为Oracle中过程的参数，除了有数据类型之外，还有一种特殊的类型，既输入输出类型（in，out，in out）。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace param_test<span class="token punctuation">(</span>p_in <span class="token operator">in</span> varchar2<span class="token punctuation">,</span>p_out <span class="token keyword">out</span> varchar2<span class="token punctuation">,</span>p_in_out <span class="token operator">in</span> <span class="token keyword">out</span> varchar2<span class="token punctuation">)</span> <span class="token operator">is</span><span class="token keyword">begin</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_in ='</span> <span class="token operator">||</span> p_in<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_out = '</span> <span class="token operator">||</span> p_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_in_out = '</span> <span class="token operator">||</span> p_in_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--作为out类型的参数，可以在过程中被重新赋值，并且会被返回给调用者</span>    p_out :<span class="token operator">=</span> <span class="token string">'out类型的参数在过程中被重新赋值'</span><span class="token punctuation">;</span>    p_in_out :<span class="token operator">=</span> <span class="token string">'in out类型的参数在过程中被重新赋值'</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span>    v_in varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'in类型参数的初始值'</span><span class="token punctuation">;</span>    v_out varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'out类型参数的初始值'</span><span class="token punctuation">;</span>    v_in_out varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'in out类型参数的初始值'</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    param_test<span class="token punctuation">(</span>v_in<span class="token punctuation">,</span>v_out<span class="token punctuation">,</span>v_in_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_in ='</span> <span class="token operator">||</span> p_in<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_out = '</span> <span class="token operator">||</span> p_out<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'在过程中，p_in_out = '</span> <span class="token operator">||</span> p_in_out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>存储过程完成的是一系列的操作，可以单独的调用一个过程，来完成某些操作。</p><p>函数：可以接收一个或多个参数，在函数中完成运算，最终返给用户一个结果（Oracle中的函数必须有返回结果）</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--根据职位和薪金，计算佣金的值</span><span class="token comment" spellcheck="true">--函数的参数也有输入输出类型，但是out类型的参数使用不方便，所以在函数中只使用in类型的参数</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">function</span> add_comm<span class="token punctuation">(</span>p_job varchar2<span class="token punctuation">,</span>v_sal emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">return</span> number <span class="token operator">is</span>    v_comm emp<span class="token punctuation">.</span>comm<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_job <span class="token operator">=</span> <span class="token string">'CLERK'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_comm :<span class="token operator">=</span> p_sal <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    elsif<span class="token punctuation">(</span>p_job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_comm :<span class="token operator">=</span> p_sal <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">;</span>    elsif<span class="token punctuation">(</span>p_job <span class="token operator">=</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_comm :<span class="token operator">=</span> p_sal <span class="token operator">*</span> <span class="token number">0.7</span><span class="token punctuation">;</span>    elsif<span class="token punctuation">(</span>p_job <span class="token operator">=</span> <span class="token string">'ANALYST'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_comm :<span class="token operator">=</span> p_sal <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        v_comm :<span class="token operator">=</span> p_sal <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v_comm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--在函数中一定要有一个有效的return语句</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--调用函数</span><span class="token comment" spellcheck="true">--1、无法在命令行中调用函数</span><span class="token comment" spellcheck="true">--2、在匿名块中调用函数</span><span class="token keyword">declare</span>    v_res number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_str varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>    v_length number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    v_res :<span class="token operator">=</span> add_comm<span class="token punctuation">(</span><span class="token string">'SALESMAN'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_length :<span class="token operator">=</span> length<span class="token punctuation">(</span>v_str<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_res='</span> <span class="token operator">||</span> v_res<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'v_length='</span> <span class="token operator">||</span> v_length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3、在sql语句中使用函数</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span> 名字长度<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>add_comm<span class="token punctuation">(</span>job<span class="token punctuation">,</span>sal<span class="token punctuation">)</span> <span class="token string">"佣金"</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>参数模式</strong></p><table><thead><tr><th align="center">in</th><th align="center">out</th><th align="center">in out</th></tr></thead><tbody><tr><td align="center">默认</td><td align="center">必须指定</td><td align="center">必须指定</td></tr><tr><td align="center">值被传递给子程序</td><td align="center">返回到调用环境</td><td align="center">传递给子程序，返回到调用环境</td></tr><tr><td align="center">参数形式：常量</td><td align="center">未初始化的变量</td><td align="center">初始化的变量</td></tr><tr><td align="center">可以是表达式，常量，或者是初始化的变量</td><td align="center">必须是一个变量</td><td align="center">必须是一个变量</td></tr></tbody></table><p><strong>函数与过程比较</strong></p><table><thead><tr><th align="center">过程</th><th align="center">函数</th></tr></thead><tbody><tr><td align="center">完成某些特定的任务或工作</td><td align="center">完成复杂的计算</td></tr><tr><td align="center">作为一个独立的PL/SQL语句来执行</td><td align="center">不饿能独立执行，必须作为表达式的一部分来调用</td></tr><tr><td align="center">程序头部使用procedure声明</td><td align="center">头部使用function声明</td></tr><tr><td align="center">程序头不用描述返回类型</td><td align="center">程序头部必须描述返回值的类型</td></tr><tr><td align="center">不需要return语句</td><td align="center">必须在程序执行主体中办好return语句，至少有一个有效的return语句</td></tr><tr><td align="center">可以使用in/out/in out三种模式的参数</td><td align="center">可以使用in/out/in out三种模式的参数（但是out/in out没有意义）</td></tr><tr><td align="center">可以不返回值，也可以返回多个值，通过out/in out类型参数来返回</td><td align="center">必须返回一个值，通过return语句返回，并且返回的值要与声明部分一致，也可以通过out类型的参数带出变量（但是通常情况下不会这么做）</td></tr></tbody></table><p><strong>函数和存储过程</strong></p><p>函数的好处：</p><ul><li>可以实现用简单的SQL语句不能实现的计算</li><li>提高查询的效率</li></ul><p>函数和存储过程使用规则：</p><ul><li>1、在SQL语句中只能使用函数，而不是过程</li><li>2、函数中不允许DML语句，在过程中可以使用DML语句</li><li>3、函数的形参可以为in(out/in out)</li><li>4、在函数中必须返回Oracle支持的数据类型，而不是PL/SQL支持的数据类型</li></ul><p><strong>在SQL语句中调用函数</strong></p><ul><li>任何有效的SQL子句中</li><li>select命令的选择列表</li><li>where和having条件子句</li><li>order by，和group by子句</li><li>insert命令的values子句</li><li>update命令的set子句</li></ul><h2 id="Oracle的存储程序单元"><a href="#Oracle的存储程序单元" class="headerlink" title="Oracle的存储程序单元"></a>Oracle的存储程序单元</h2><p>在Oracle中，除了单次执行的PL/SQL匿名块以外，更多的使用的是PL/SQL程序（也就是PL/SQL的子程序）。</p><p>PL/SQL子程序就是数据库中命名的PL/SQL块，可以接收参数，也可以传出计算结果。</p><p>PL/SQL子程序主要有两种类型：</p><ul><li>存储过程（proceduer）：用来完成某些操作的任务</li><li>函数（function）：用来做复杂的计算</li></ul><p>PL/SQL子程序，是基于PL/SQL块的结构的，只是比PL/SQL块多了子程序头部的定义。使用PL/SQL子程序，使得PL/SQL程序易于维护，而且可以重复的使用。</p><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>游标是一段私有的SQL工作区，也就是一段内存区域，用于暂时存放受到SQL语句影响到的数据。</p><p>在执行增删改查语句时，Oracle都会开辟一块内存空间，用来暂时存放受到SQL语句影响的数据。这块内存空间就被称为游标区域，可以借助于游标来分析这些受到影响的数据。</p><p>游标的分类：</p><ul><li>隐式游标：被用于描述执行的SQL命令。在PL/SQL中出现的SQL语句，Oracle都会为其分配一段私有的内存空间，也就是游标区域。所有的DML语句或PL/SQL select语句都有隐式游标。</li><li>显示游标：由开发人员通过程序显示控制，用于从表中取出多行数据，并将多行数据一行一行的单独进行处理。</li></ul><p>两种游标具有相同的属性，可以使用游标属性取得SQL语句的相关信息。</p><p>游标属性包括四种：</p><ul><li>%rowcount，受SQL影响的行数</li><li>%found，Boolean值，是否还有数据</li><li>%notfound，Boolean值，是否已无数据</li><li>%isopen，游标是否打开</li></ul><p>显示游标和隐式游标都有以上四种属性。但是使用方法和含义却不相同。</p><p>在使用游标时，需要使用游标名称作为前缀。但是隐式游标没有名称，所以在使用隐式游标时采用统一的一个名称SQL。</p><ul><li>sql%rowcount，受SQL影响的行数</li><li>sql%found，Boolean值，是否还有数据</li><li>sql%notfound，Boolean值，是否已无数据</li><li>sql%isopen，总是为false</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    v_count number<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    v_count :<span class="token operator">=</span> sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'被删除的数据的条数是：'</span> <span class="token operator">||</span> v_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>显示游标的使用</strong></p><ul><li>可以用于暂存查询取出的多行结果，然后一行一行的处理</li><li>显示游标就是专门用来查询多条数据的</li><li>按行处理查询返回的多行结果</li><li>显示游标首先将查询出的多行数据暂存在游标区域中，然后再PL/SQL中借助于循环语句手动的控制游标的多行操作，每次取出一条进行处理，直到取出游标中所有的数据为止。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token comment" spellcheck="true">--1、声明游标，一个显示游标，就是和一个有效的select语句绑定的</span>    <span class="token keyword">cursor</span> cur_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    v_rec_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--2、打开游标，就是执行了游标绑定的SQL语句，并且把受到影响的数据放入到了游标区域中</span>    <span class="token keyword">open</span> cur_emp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--3、取出游标中的一条数据装入记录类型的变量中</span>    <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--从记录类型的变量中取出查询的数据</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> v_rec_emp<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--关闭游标，清空游标区域</span>    <span class="token keyword">close</span> cur_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>使用loop循环遍历和%found搭配使用分析游标数据</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token keyword">cursor</span> cur_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    v_rec_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--游标在没有之前，在关闭之后，是无法使用的，就会导致无效的游标错误</span>    <span class="token comment" spellcheck="true">--在关闭之后，如果需要重新使用游标，需要重新打开游标</span>    <span class="token keyword">open</span> cur_emp<span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    loop        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> v_rec_emp<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--装入另一条数据</span>        <span class="token keyword">exit</span> <span class="token keyword">when</span> cur_emp<span class="token operator">%</span>notfound<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--当游标中没有数据时，退出循环</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'查询数据的总条数是：'</span> <span class="token operator">||</span> cur_emp<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">close</span> cur_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>使用while循环和%found搭配使用分析游标数据</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token keyword">cursor</span> cur_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    v_rec_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">open</span> cur_emp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--在没有执行fetch操作之前，游标中是没有数据的，也就是cur_emp%found为false。</span>    <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur_emp<span class="token operator">%</span>found<span class="token punctuation">)</span> loop        <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> v_rec_emp<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">fetch</span> cur_emp <span class="token keyword">into</span> v_rec_emp<span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'查询数据的总条数是：'</span> <span class="token operator">||</span> cur_emp<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">close</span> cur_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>使用for循环，可以简化游标的开发，Oracle会自动声明记录类型的变量，Oracle会自动的open,fetch,close游标</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token keyword">cursor</span> cur_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--Oracle会自动的声明记录类型的变量v_rec_emp，类型是emp%rowtype</span>    <span class="token keyword">for</span> v_rec_emp <span class="token operator">in</span> cur_emp loop        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_rec_emp<span class="token punctuation">.</span>empno <span class="token operator">||</span> <span class="token string">','</span> <span class="token operator">||</span> v_rec_emp<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器类似于函数和过程，同样是具有声明部分、执行部分和异常处理部分的命名PL/SQL块。但与过程、函数不同的是，触发器是在事件发生时隐式的运行的，并且触发器不能接收参数；而过程、函数是用户显示调用的，可以接收参数。</p><p>运行触发器的方式叫做触动（firing），指在特定的事件发生的时候（前或后）自动运行定义好的PL/SQL程序。</p><p>触发的事件可以是多数据库表的DML操作（insert、update或delete）或某个视图的操作。</p><p>触发的事件也可以是系统事件，例如数据库的启动和关闭，以及一些DDL操作。</p><p>触发器被作为触动触发器的事务的一部分，所以在触发器中不可以使用结束事务的事务控制语句。</p><p><strong>触发器主要用于下列情况：</strong></p><ul><li>安全性方面，确定用户的操作是否可以继续执行</li><li>产生对数据值修改的审计，将修改的信息记录下来，产生数据改动记录</li><li>提供更灵活的完整性校验规则，能根据复杂的规则校验数据</li><li>提供表数据的同步复制，使多个表的数据同步</li><li>事件日志记录，记录数据库的重要操作</li></ul><blockquote><p>触发器类型</p></blockquote><p>在Oracle数据库中主要有两种触发器类型</p><ul><li>DML触发器</li><li>系统触发器</li></ul><h2 id="DML触发器"><a href="#DML触发器" class="headerlink" title="DML触发器"></a>DML触发器</h2><p>DML触发器由DML语句触发，并且语句类型决定了DML触发器的类型。</p><p>DML触发器类型主要包括insert、update、delete三种触发器。</p><ul><li>操作对象：表或视图</li><li>触发的时机包括：对表来说由before或after触发，对视图来说由instead of</li><li>触发范围包括：行级触发或语句级触发。行级触发时在每行数据操作时都会触发执行</li><li>可以设置when子句，决定触发后是否执行触发器的执行部分；如果不设置when子句，那么只要事件触发，就执行程序体</li></ul><p><strong>语句级DML触发器语法格式</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> replace<span class="token punctuation">]</span> <span class="token keyword">trigger</span> trigger_name    timing        event1 <span class="token punctuation">[</span><span class="token operator">or</span> event2 <span class="token operator">or</span> event3<span class="token punctuation">]</span>            <span class="token keyword">on</span> table_name        <span class="token keyword">when</span> conditions<span class="token punctuation">[</span><span class="token keyword">declare</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">--同样可以声明变量等</span><span class="token keyword">begin</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><ul><li>timing：表示触发实际可以是after或before</li><li>event1：表示触发事件，例如：insert，delete，update</li><li>when：表示执行触发器的条件</li><li>tirgger_body：触发器的执行体</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--向emp表中插入一条数据，会自动激活触发器的工作</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> secure_emp    before <span class="token keyword">insert</span> <span class="token keyword">on</span> emp<span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--如果当前的时间是星期六或星期日，或时间不在8:00-18:00之间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'dy'</span><span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'星期六'</span><span class="token punctuation">,</span><span class="token string">'星期日'</span><span class="token punctuation">)</span> <span class="token operator">or</span>      <span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'hh24:mi'</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token operator">between</span> <span class="token string">'08:00'</span> <span class="token operator">and</span> <span class="token string">'18:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span>      <span class="token comment" spellcheck="true">--提升一条用户自定义的错误信息，通过这个错误信息，中断用户的操作</span>      raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20500</span><span class="token punctuation">,</span><span class="token string">'你只能在工作时间对表进行操作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>注意：</p><ul><li>raise_application_error：这一语句升起一个用户定义错误，显示一条用户定义提示。</li><li>错误号必须在当在-20000..-20999之间</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> secure_emp_2    before <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token operator">or</span> <span class="token keyword">delete</span> <span class="token keyword">on</span> employees<span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--如果当前时间是周六或周日，或者时间不在8:00-18:00之间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'dy'</span><span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'SAT'</span><span class="token punctuation">,</span><span class="token string">'SUN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'hh24'</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token operator">between</span> <span class="token string">'08'</span> <span class="token operator">and</span> <span class="token string">'18'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">if</span> deleting <span class="token keyword">then</span>            raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20502</span><span class="token punctuation">,</span><span class="token string">'你只能在工作时间删除员工表的数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elsif inserting <span class="token keyword">then</span>            raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20500</span><span class="token punctuation">,</span><span class="token string">'你只能在工作时间插入员工表的数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elsif updating <span class="token punctuation">(</span><span class="token string">'SALARY'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20503</span><span class="token punctuation">,</span><span class="token string">'你只能在工作时间更新员工表的数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20504</span><span class="token punctuation">,</span><span class="token string">'你只能在工作时间操作员工表的数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><strong>行级DML触发器语法格式</strong></p><pre><code>create [or replace] trigger trigger_name    timing        event1 [or event2 or event3]            on table_name        [referencing OLD as old|NEW as new]        for each row        [when conditions][declare]    --同样可以声明变量等beginend;</code></pre><ul><li>for each row：表明对表中的每行数据操作时都会触发这个触发器。referencing子句是说明触发器替换值的前缀名，默认替换前的前缀名为old，替换后的前缀名为new。也可以自己声明替换前后变量的前缀规则。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> restrict_salary    before <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token keyword">of</span> sal <span class="token keyword">on</span> emp    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--如果新插入的工作不是'AD_PRES'，'AD_VP'，并且新的工资 > 15000</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>:new<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'AD_PRES'</span><span class="token punctuation">,</span><span class="token string">'AD_VP'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> :new<span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token number">15000</span> <span class="token keyword">then</span>        raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20202</span><span class="token punctuation">,</span><span class="token string">'员工不能有这么高的工资'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--不允许降低员工的工资</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> restrict_salary    before <span class="token keyword">update</span> <span class="token keyword">of</span> sal <span class="token keyword">on</span> emp    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--新的工资小于老的工资</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>:new<span class="token punctuation">.</span>sal <span class="token operator">&lt;</span> :old<span class="token punctuation">.</span>sal<span class="token punctuation">)</span> <span class="token keyword">then</span>        raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20202</span><span class="token punctuation">,</span><span class="token string">'黑心的资本家，你不能降低员工的工资'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>创建触发器，解决外键约束问题</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--在插入员共表记录之前，首先判断新插入的部门编号是否存在；</span><span class="token comment" spellcheck="true">--如果新的部门编号不存在，则首先向部门表中插入该部门</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> restrict_salary    before <span class="token keyword">insert</span> <span class="token keyword">on</span> emp    <span class="token keyword">for each row</span><span class="token comment" spellcheck="true">--在触发器中要想声明变量，必须要加入declare</span><span class="token keyword">declare</span>    v_count number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> v_count <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> :new<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v_count <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        v_dname :<span class="token operator">=</span> <span class="token string">'部门-'</span> <span class="token operator">||</span> :new<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span> <span class="token punctuation">(</span>:new<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>v_dname<span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>通过触发器，来实现级联删除的操作。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--在删除部门时，如果该部门有员工，把该部门的所有员工也删除掉</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> restrict_salary    before <span class="token keyword">delete</span> <span class="token keyword">on</span> dept    <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--删除部门之前，首先删除员工表中的该部门的所有员工</span>    <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> :old<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="视图上的instead-of触发器"><a href="#视图上的instead-of触发器" class="headerlink" title="视图上的instead of触发器"></a>视图上的instead of触发器</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> replace<span class="token punctuation">]</span> <span class="token keyword">trigger</span> trigger_name    instead <span class="token keyword">of</span>        event1 <span class="token punctuation">[</span><span class="token operator">or</span> event2 <span class="token operator">or</span> event3<span class="token punctuation">]</span>        <span class="token keyword">on</span> view_name    <span class="token punctuation">[</span>referencing OLD <span class="token keyword">as</span> old <span class="token operator">|</span> NEW <span class="token keyword">as</span> new<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">for each row</span><span class="token punctuation">]</span>trigger_body</code></pre><p>instead of：被用于视图，当对视图进行DML操作时，对视图的DML操作被转换为对另外一些表的操作。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建视图</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> view_empinfo<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---创建触发器</span><span class="token keyword">create</span> <span class="token keyword">of</span> replace <span class="token keyword">trigger</span> insert_view    instead <span class="token keyword">of</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> view_empinfo    <span class="token keyword">for each row</span><span class="token keyword">declare</span>    v_count number<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">--判断向视图插入的部门是否存在，如果该部门不存在，则向部门表中插入新数据</span>    <span class="token comment" spellcheck="true">--如果该部门存在，则更新部门表的部门名称和位置</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> v_count <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno <span class="token operator">=</span> :nwe<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v_count <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token comment" spellcheck="true">--把一部分数据插入到dept表中</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span>:new<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">--把一部分数据插入到emp表中</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token keyword">values</span><span class="token punctuation">(</span>:new<span class="token punctuation">.</span>empno<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>job<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>mgr<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>hiredate<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>sal<span class="token punctuation">,</span>:new<span class="token punctuation">.</span>comm<span class="token punctuation">,</span>:new<span class="token punctuation">,</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h2 id="管理触发器"><a href="#管理触发器" class="headerlink" title="管理触发器"></a>管理触发器</h2><ul><li><p>启用或者禁用某个触发器</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">trigger</span> trigger_name <span class="token keyword">disable</span><span class="token operator">|</span><span class="token keyword">enable</span><span class="token punctuation">;</span></code></pre></li><li><p>启用或者禁用某个对象上的所有触发器</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">disable</span><span class="token operator">|</span><span class="token keyword">enable</span> <span class="token keyword">all</span> triggers<span class="token punctuation">;</span></code></pre></li><li><p>重编译触发器</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">trigger</span> trigger_name compile<span class="token punctuation">;</span></code></pre></li></ul><h2 id="数据库系统级触发器"><a href="#数据库系统级触发器" class="headerlink" title="数据库系统级触发器"></a>数据库系统级触发器</h2><p>用户触发事件：</p><ul><li>create、alter或drop命令</li><li>登录或退出数据库连接</li></ul><p>系统触发事件：</p><ul><li>启动、关闭数据库</li><li>特殊错误发生</li></ul><p><strong>DDL触发器语法</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> replace<span class="token punctuation">]</span> <span class="token keyword">trigger</span> trigger_name    timing        <span class="token punctuation">[</span>ddl_event1 <span class="token punctuation">[</span><span class="token operator">or</span> ddl_event2 <span class="token operator">or</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">on</span> {<span class="token keyword">database</span><span class="token operator">|</span><span class="token keyword">schema</span>}trigger_body</code></pre><p>可以使用DDL触发器强制用户执行DDL语句的规则，例如只让用户执行create table的操作。</p><p><strong>系统事件触发器语法</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> replace<span class="token punctuation">]</span> <span class="token keyword">trigger</span> trigger_name    timing        <span class="token punctuation">[</span>database_event1 <span class="token punctuation">[</span><span class="token operator">or</span> database_event2 <span class="token operator">or</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">on</span> {<span class="token keyword">database</span><span class="token operator">|</span><span class="token keyword">schema</span>}trigger_body</code></pre><p><strong>登录/退出触发器</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> logon_trig<span class="token keyword">after</span> logon <span class="token keyword">on</span> <span class="token keyword">schema</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> log_trig_table<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>log_date<span class="token punctuation">,</span><span class="token keyword">action</span><span class="token punctuation">)</span>    <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span>sysdate<span class="token punctuation">,</span><span class="token string">'Logging on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> logoff_trigbefore logoff <span class="token keyword">on</span> <span class="token keyword">schema</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> log_trig_table<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>log_date<span class="token punctuation">,</span><span class="token keyword">action</span><span class="token punctuation">)</span>    <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span>sysdate<span class="token punctuation">,</span><span class="token string">'Logging off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1kx411s71n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 动力节点&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Oracle" scheme="https://lskjwp.gitee.io/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="https://lskjwp.gitee.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/580061a7/"/>
    <id>https://lskjwp.gitee.io/archives/580061a7/</id>
    <published>2021-05-13T02:22:17.000Z</published>
    <updated>2021-11-23T12:30:09.136Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1jJ411S7xr" target="_blank" rel="noopener">遇见狂神说</a>  <a href="https://www.bilibili.com/video/BV18E411x7eT" target="_blank" rel="noopener">尚硅谷</a></p><a id="more"></a><p>微服务架构4个核心问题？</p><p>1、服务很多，客户端怎样访问？</p><p>2、这么多服务，服务之间如何通信？</p><p>3、这么多服务，如何治理？</p><p>4、服务挂了，怎么办？</p><p>解决方案：</p><p>SpringCloud生态</p><p>1、Spring Cloud NetFlix，一站式解决方案</p><p>​    api网关，zuul组件</p><p>​    Feign基于HttpClinet，也就是基于Http通信方式</p><p>​    服务注册发现：Eureka</p><p>​    熔断机制：Hystrix</p><p>2、Apache Dubbo Zookeeper，半自动，需要整合别人的</p><p>​    API：没有，找第三方组件，或者自己实现</p><p>​    Dubbo</p><p>​    Zookeeper</p><p>​    没有熔断机制，借助Hystrix</p><p>Dubbo这个方案并不完善</p><p>3、Spring Cloud Alibaba，一站式解决方案，更简单</p><ul><li>API</li><li>HTTP、RPC</li><li>注册和发现</li><li>熔断机制</li></ul><p>新概念：服务网格-&gt;Server Mesh</p><h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><h2 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h2><p>ThoughtWorks公司的首席科学家Martin Fowler于2014年提出一下的一段话。</p><p>原文：<a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://martinfowler.com/articles/microservices.html</a></p><p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><p>通常而言，微服务架构是一种架构模式，或者说是一种架构风格，它提倡将单一的应用程序划分成一组小的服务，每个服务运行在其它独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p><p>从技术维度来理解，微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h2 id="2、微服务与微服务架构"><a href="#2、微服务与微服务架构" class="headerlink" title="2、微服务与微服务架构"></a>2、微服务与微服务架构</h2><p><strong>微服务</strong>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题，提供对应服务的一个服务应用，狭义上来看，可以看作是IDEA中的一个个微服务工程，或者Moudel。</p><p><strong>微服务架构</strong>是一种架构模式，它提倡将单一的应用程序划分成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建。</p><h2 id="3、微服务优缺点"><a href="#3、微服务优缺点" class="headerlink" title="3、微服务优缺点"></a>3、微服务优缺点</h2><p><strong>优点</strong>：</p><ul><li>单一职责原则</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求</li><li>开发简单，开发效率提高，一个服务可能就是专一的只干一件事</li><li>微服务能够被小团队单独开发</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的</li><li>微服务能使用不同的语言开发</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins、Hudson</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能够体现价值</li><li>微服务允许利用融合最新技术</li><li><strong>微服务只是业务逻辑代码，不会与HTML、CSS或其他界面混合</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库</strong></li></ul><p><strong>缺点</strong>：</p><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>系统部署依赖</li><li>服务间通信成本</li><li>数据一致性</li><li>系统集成测试</li><li>性能监控</li></ul><h2 id="4、微服务技术栈有哪些"><a href="#4、微服务技术栈有哪些" class="headerlink" title="4、微服务技术栈有哪些"></a>4、微服务技术栈有哪些</h2><table><thead><tr><th align="center">微服务条目</th><th align="center">落地技术</th></tr></thead><tbody><tr><td align="center">服务开发</td><td align="center">SpringBoot，Spring，SpringMVC</td></tr><tr><td align="center">服务配置与管理</td><td align="center">NetFlix公司的Archaius，阿里的Diamond等</td></tr><tr><td align="center">服务注册于发现</td><td align="center">Eureka，Consul，Zookeeper等</td></tr><tr><td align="center">服务调用</td><td align="center">Rest，RPC，gRPC</td></tr><tr><td align="center">服务熔断器</td><td align="center">Hystrix，Envoy等</td></tr><tr><td align="center">负载均衡</td><td align="center">Ribbon，Nginx等</td></tr><tr><td align="center">服务接口调用（客户端调用服务的简化工具）</td><td align="center">Feign等</td></tr><tr><td align="center">消息队列</td><td align="center">Kafka，RabbitMQ，ActiveMQ等</td></tr><tr><td align="center">服务配置中心管理</td><td align="center">SpringCloudConfig，Chef等</td></tr><tr><td align="center">服务路由（API网关）</td><td align="center">Zuul等</td></tr><tr><td align="center">服务监控</td><td align="center">Zabbix，Nagios，Metrics，Specatator等</td></tr><tr><td align="center">全链路追踪</td><td align="center">Zipkin，Brave，Dapper等</td></tr><tr><td align="center">服务部署</td><td align="center">Docker，OpenStack，Kubernetes等</td></tr><tr><td align="center">数据流操作开发包</td><td align="center">SpringCloud Stream（封装于Redis，Rabbit，Kafka等发送接收消息）</td></tr><tr><td align="center">事件消息总栈</td><td align="center">SpringCloud Bus</td></tr></tbody></table><h2 id="5、为什么选择SpringCloud作为微服务架构"><a href="#5、为什么选择SpringCloud作为微服务架构" class="headerlink" title="5、为什么选择SpringCloud作为微服务架构"></a>5、为什么选择SpringCloud作为微服务架构</h2><blockquote><p>选型依据</p></blockquote><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul><blockquote><p>当前各大IT公司用的微服务架构有哪些？</p></blockquote><ul><li>阿里：dubbo+HFS</li><li>京东：JSF</li><li>新浪：Motan</li><li>当当网：DubboX</li></ul><blockquote><p>各微服务框架对比</p></blockquote><table><thead><tr><th align="center">功能点/服务框架</th><th align="center">Netflix/SpringCloud</th><th align="center">Motan</th><th align="center">gRPC</th><th align="center">Thrift</th><th align="center">Dubbo/DubboX</th></tr></thead><tbody><tr><td align="center">功能定位</td><td align="center">完整的微服务框架</td><td align="center">RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册/发现</td><td align="center">RPC框架</td><td align="center">RPC框架</td><td align="center">服务框架</td></tr><tr><td align="center">支持Rest</td><td align="center">是，Ribbon支持多种可插拔的序列化选择</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">支持RPC</td><td align="center">否</td><td align="center">是（Hession2）</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">支持多语言</td><td align="center">是（Rest形式）</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">负载均衡</td><td align="center">是（服务端zuul+客户端Ribbon），zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td><td align="center">是（客户端）</td><td align="center">否</td><td align="center">否</td><td align="center">是（客户端）</td></tr><tr><td align="center">配置服务</td><td align="center">Netfix Archaius，Spring Cloud Config Server集中配置</td><td align="center">是（zookeeper提供）</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">服务调用链监控</td><td align="center">是（zuul），zuul提供边缘服务，API网关</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">高可用/容错</td><td align="center">是（服务端Hystrix+客户端Ribbon）</td><td align="center">是（客户端）</td><td align="center">否</td><td align="center">否</td><td align="center">是（客户端）</td></tr><tr><td align="center">典型应用案例</td><td align="center">Netflix</td><td align="center">Sina</td><td align="center">Google</td><td align="center">Facebook</td><td align="center"></td></tr><tr><td align="center">社区活跃程度</td><td align="center">高</td><td align="center">一般</td><td align="center">高</td><td align="center">一般</td><td align="center">2017你啊后重新开始维护，之前终端5年</td></tr><tr><td align="center">学习难度</td><td align="center">中</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">低</td></tr><tr><td align="center">文档丰富程度</td><td align="center">高</td><td align="center">一般</td><td align="center">一般</td><td align="center">一般</td><td align="center">高</td></tr><tr><td align="center">其它</td><td align="center">Spring Cloud Bus为我们的应用程序带来了更多管理端点</td><td align="center">支持降级</td><td align="center">Netflix内部在开发集成gRPC</td><td align="center">IDL定义</td><td align="center">实践的公司比较多</td></tr></tbody></table><h1 id="SpringCloud入门概述"><a href="#SpringCloud入门概述" class="headerlink" title="SpringCloud入门概述"></a>SpringCloud入门概述</h1><h2 id="1、什么是SpringCloud"><a href="#1、什么是SpringCloud" class="headerlink" title="1、什么是SpringCloud"></a>1、什么是SpringCloud</h2><p>SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p><p>SpringCloud利用SpringBoot的开发便利性，巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，<strong>包括配置管理，服务发现，断路器，路由，微代理，事件总栈，全局锁，决策竞选，分布式会话等等</strong>，它们都可以用SpringBoot的开发风格做到一键启动和部署。</p><p>SpringBoot并没有重复造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装，屏蔽掉了复杂的配置和实现原理，<strong>最终给开发者留出了一套简单易懂，易部署和易维护的分布式系统开发工具包</strong>。</p><p>SpringCloud式分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</p><p><img src="/archives/580061a7/cloud-diagram-1a4cad7294b4452864b5ff57175dd983.svg" alt="Spring Cloud diagram"></p><h2 id="2、SpringCloud与SpringBoot的关系"><a href="#2、SpringCloud与SpringBoot的关系" class="headerlink" title="2、SpringCloud与SpringBoot的关系"></a>2、SpringCloud与SpringBoot的关系</h2><ul><li>SpringBoot专注于快速方便的开发单个个体微服务</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理器来，为各个微服务之间提供：配置管理，服务发现，断路器，路由，微代理，事件总栈，全局锁，决策竞选，分布式会话等等集成服务</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系</li></ul><p><strong>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架</strong></p><h2 id="3、Dubbo和SpringCloud技术选型"><a href="#3、Dubbo和SpringCloud技术选型" class="headerlink" title="3、Dubbo和SpringCloud技术选型"></a>3、Dubbo和SpringCloud技术选型</h2><blockquote><p>分布式+服务治理Dubbo</p></blockquote><p>目前成熟的互联网架构：应用服务化拆分+消息中间件</p><blockquote><p>Dubbo于SpringCloud的区别：</p></blockquote><table><thead><tr><th align="center"></th><th align="center">Dubbo</th><th align="center">Spring</th></tr></thead><tbody><tr><td align="center">服务注册中心</td><td align="center">Zookeeper</td><td align="center">Spring Cloud Netflix Eureka</td></tr><tr><td align="center">服务调用方式</td><td align="center">RPC</td><td align="center">REST API</td></tr><tr><td align="center">服务监控</td><td align="center">Dubbo-monitor</td><td align="center">Spring Boot Admin</td></tr><tr><td align="center">断路器</td><td align="center">不完善</td><td align="center">Spring Cloud Netflix Hystrix</td></tr><tr><td align="center">服务网关</td><td align="center">无</td><td align="center">Spring Cloud Netflix Zuul</td></tr><tr><td align="center">分布式配置</td><td align="center">无</td><td align="center">Spring Cloud Config</td></tr><tr><td align="center">服务跟踪</td><td align="center">无</td><td align="center">Spring Cloud Sleuth</td></tr><tr><td align="center">消息总栈</td><td align="center">无</td><td align="center">Spring Cloud Bus</td></tr><tr><td align="center">数据流</td><td align="center">无</td><td align="center">Spring Cloud Stream</td></tr><tr><td align="center">批量任务</td><td align="center">无</td><td align="center">Spring Cloud Task</td></tr></tbody></table><p><strong>最大区别</strong>：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。</p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。</p><p><strong>解决的问题域不一样</strong>：Dubbo的定位是一款RPC框架，Spring Cloud的目标是微服务架构下的一站式解决方案。</p><p>Spring Cloud是一个由众多独立子项目组成的大型综合项目，每个子项目有不同的发行节奏，都维护着自己的发布版本号。Spring Cloud通过一个资源清单BOM（Bill of Materials）来管理每个版本的子项目清单。为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。这些版本名称的命名方式采用伦敦地铁站的名称，同时根据字母表的顺序来对应版本时间顺序。</p><p>链接：</p><ul><li><a href="https://springcloud.cc/spring-cloud-netfilx.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-netfilx.html</a></li><li>中文API文档：<a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-dalston.html</a></li><li>SpringCloud中国社区：<a href="http://springcloud.cn/" target="_blank" rel="noopener">http://springcloud.cn/</a></li><li>SpringCloud中文网：<a href="https://springcloud.cc" target="_blank" rel="noopener">https://springcloud.cc</a></li></ul><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="SpringCloud版本选择"><a href="#SpringCloud版本选择" class="headerlink" title="SpringCloud版本选择"></a>SpringCloud版本选择</h2><table><thead><tr><th align="center">Spring Boot</th><th align="center">Spring Cloud</th><th align="center">关系</th></tr></thead><tbody><tr><td align="center">1.2.x</td><td align="center">Angel版本（天使）</td><td align="center">兼容Spring Boot 1.2.x</td></tr><tr><td align="center">1.3.x</td><td align="center">Brixton版本（布里克斯顿）</td><td align="center">兼容Spring Boot 1.3.x，也兼容Spring Boot 1.4.x</td></tr><tr><td align="center">1.4.x</td><td align="center">Camden版本（卡姆登）</td><td align="center">兼容Spring Boot 1.4.x，也兼容Spring Boot 1.5.x</td></tr><tr><td align="center">1.5.x</td><td align="center">Dalston版本（多尔斯顿）</td><td align="center">兼容Spring Boot 1.5.x，不兼容Spring Boot 2.0.x</td></tr><tr><td align="center">1.5.x</td><td align="center">Edgware版本（埃奇韦尔）</td><td align="center">兼容Spring Boot 1.5.x，不兼容Spring Boot 2.0.x</td></tr><tr><td align="center">2.0.x</td><td align="center">Finchley版本（芬奇利）</td><td align="center">兼容Spring Boot 2.0.x，不兼容Spring Boot 1.5.x</td></tr><tr><td align="center">2.1.x</td><td align="center">Greenwich版本（格林威治）</td><td align="center"></td></tr></tbody></table><h1 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h1><blockquote><p>什么是服务治理</p></blockquote><p>Spring Cloud封装了Netflix公司开发的Eureka模块来实现服务治理。</p><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务注册与发现。</p><blockquote><p>什么是服务注册与发现</p></blockquote><p>在服务注册与发现中，有一个注册中心。当服务器启动时，会把当前自己服务器的信息（比如，服务地址、通讯地址等）以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后在实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何rpc远程框架中，都会有一个注册中心（存放服务地址相关信息（接口地址）。</p><h2 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h2><p>Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中西，比如Zookeeper。</p><p>Netflix在设计Eureka时，遵循的是AP原则。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>Eureka的基本架构</p></blockquote><ul><li><p>Spring Cloud封装了Netflix公司开发的Eureka模块来实现服务注册和发现（对比Zookeeper）</p></li><li><p>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，它是服务注册中心</p></li><li><p>而系统中的其它微服务。使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，SpringCloud的一些其它模块（比如Zuul）就可以通过EurekaServer来发现系统中的其它微服务，并执行相关的逻辑。</p></li><li><p>和Dubbo架构对比</p><p><img src="/archives/580061a7/Eureka%E4%B8%8EDubbo.jpg" alt="Eureka与Duboo"></p><ul><li>Eureka包含两个组件：Eureka Server和Eureka Client</li><li>Eureka Server提供服务注册服务，各个节点启动后，会在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</li><li>Eureka Client是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳（默认周期为30秒）。如果EurekaServer在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉（默认周期为90秒）</li></ul></li><li><p>三大角色</p><ul><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：将自身服务注册到Eureka中，从而使消费方能够找到</li><li>Service Consumer：服务消费方从Eureka中获取注册服务列表，从而找到消费服务</li></ul></li></ul><h2 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h2><p>某个时刻某一个微服务不可以使用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><ul><li>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka之间无法正常通信，以上行为可能变得非常危险。因为微服务本身其实是健康的，此时本不应该注销这个服务。Eureka通过自我保护机制来解决这个问题。当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中心的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该EurekaServer节点会自动退出自我保护模式。</li><li>在自我保护模式中，EurekaServer会保护服务注册表终中的信息，不再注销任何服务实例。当它收到心跳数重新恢复到阈值以上时，该EurekaServer节点就会自动退出自我保护模式。它的设计理念就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。</li><li>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮和稳定。</li><li>在SpringCloud中，可以使用<code>eureka.server.enable-self-presevation = false</code>禁用自我保护模式（不推荐关闭自我保护机制）。</li></ul><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：</p><p><font color="red">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.<br>RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE</font></p><h2 id="对比Zookeeper"><a href="#对比Zookeeper" class="headerlink" title="对比Zookeeper"></a>对比Zookeeper</h2><p>RDBMS（Mysql、Oracle、SQLServer）=&gt; ACID</p><p>NoSQL（redis、mongdb） =&gt; CAP</p><p><strong>ACID是什么</strong>？</p><ul><li>A（Atomicity）原子性</li><li>C（Consistency）一致性</li><li>I（Isolation）隔离性</li><li>D（Durability）持久性</li></ul><p><strong>CAP是什么</strong>？</p><ul><li>C（Consistency）强一致性</li><li>A（Availability）可用性</li><li>P（Partition tolerance）分区容错性</li></ul><p>CAP的三进二：CA、AP、CP</p><p><strong>CAP理论核心</strong></p><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li><li>根据CAP原理，将NoSql数据库分成了满足CA原则，满足CP原则和满足AP原则三大类：<ul><li>CA：单点集群，满足一致性、可用性的系统，通常可扩展性较差</li><li>CP：满足一致性、分区容错性的系统，通常性能不是特别高</li><li>AP：满足可用性、分区容错性的系统，通常可能对一致性要求低一些</li></ul></li></ul><blockquote><p>作为服务注册中心，Eureka比Zookeeper好在哪里?</p></blockquote><p>著名的GAP理论指出，一个分布式系统不可能同时满足C（一致性）、A（可用性）、P（容错性）。</p><p>由于分区容错性P在分布式系统中是必须要保证的，因此只能在A和C之间进行权衡。</p><ul><li>Zookeeper保证的是CP</li><li>Eureka保证的是AP</li></ul><p><strong>Zookeeper保证的是CP</strong></p><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zookeeper会出现这样一种情况，当master节点因为网络故障与其它节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间过长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率会发生的事件，虽然服务最终能够恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p><p><strong>Eureka保证的是AP</strong></p><p>Eureka知道上述的这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上（即保证当前节点依然可用）</li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ul><p><strong>因此，Eureka可以很好的应对网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</strong>。</p><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><h2 id="ribbon是什么"><a href="#ribbon是什么" class="headerlink" title="ribbon是什么"></a>ribbon是什么</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡</strong>的工具。</p><p>简单来说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon的客户端组件提供一系列完整的配置项，如连接超时，重试等等。简单的说，就是在配置文件中列出LoadBalancer（简称LB：负载均衡）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等等）去连接这些机器。</p><h2 id="ribbon能干嘛"><a href="#ribbon能干嘛" class="headerlink" title="ribbon能干嘛"></a>ribbon能干嘛</h2><p>LB，即负载均衡（Load Balance），在微服务或分布式集群中经常用的一种应用。</p><p>负载均衡，简单来说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。</p><p>常见的负载均衡软件有Nginx，Lvs等等。</p><p>dubbo、SpringCloud中均提供了负载均衡，<strong>SpringCloud的负载均衡算法可以自定义</strong>。</p><p><strong>负载均衡的简单分类</strong>：</p><ul><li>集中式LB，即在服务的消费方和提供方之间使用独立的LB设施，如Nginx，由该设施负责把访问请求通过某种策略转发至服务的提供方。</li><li>进程式LB<ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己在从这些地址中选出一个合适的服务器</li><li>Ribbon就属于进程式LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</li></ul></li></ul><h1 id="Feign负载均衡"><a href="#Feign负载均衡" class="headerlink" title="Feign负载均衡"></a>Feign负载均衡</h1><p>feign是声明式的web service客户端，它让微服务之间的调用变得更简单了，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。</p><p>只需要创建一个接口，然后添加注解即可。</p><p>调用微服务访问两种方法：</p><ul><li>微服务名字（ribbon）</li><li>接口和注解（feign）</li></ul><p><strong>Feign能干什么</strong>？</p><p>Feign旨在使编写Java Http客户端变得更容易</p><p>在使用Ribbon+RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由它来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，只需要创建一个接口并使用注解的方式来配置它（类似于Dao接口上标注 Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可。）即可完成对服务提供方的接口绑定，简化了使用SpringCloud Ribbon时，自动封装服务调用客户端的开发量。</p><p><strong>Feign默认集成了Ribbon</strong></p><p>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而且简单的实现了服务调用。</p><h2 id="Feign使用步骤"><a href="#Feign使用步骤" class="headerlink" title="Feign使用步骤"></a>Feign使用步骤</h2><blockquote><p><strong>应怎样选择使用Feign，还是使用Ribbon</strong>？</p><p>如果喜欢REST风格就使用Ribbon，如果喜欢社区版的面向接口风格就使用Feign。</p><p>Feign本质上也是实现了Ribbon，只不过后者是在调用方式上，为了满足一些开发者接口调用的习惯。</p></blockquote><h1 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h1><blockquote><p><strong>分布式系统面临的问题</strong></p><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败。</p></blockquote><h2 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h2><p>多个微服务之间调用时，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统的崩溃，所谓的“雪崩效应”。</p><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“断路器”本身是一个开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个服务预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p><strong>能干什么</strong>？</p><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控</li><li>……</li></ul><p>官网：<a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki</a></p><p>当一切正常时，请求流如下所示：</p><p><img src="/archives/580061a7/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMS02NDAucG5n" alt=""></p><p>当许多后端系统中有一个潜在阻塞服务时，它可以阻止整个用户请求：</p><p><img src="/archives/580061a7/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMi02NDAucG5n" alt=""></p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒中内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其它系统资源紧张，导致整个系统发生更多级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p><img src="/archives/580061a7/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMy02NDAucG5n" alt=""></p><p>当使用Hystrix包装每个基础依赖时，上图中的体系结构会发生类似于下图的变化。每个依赖项时相互隔离的，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p><p><img src="/archives/580061a7/20200521131820586.png" alt=""></p><p>熔断机制是对应雪崩效应的一种微服务链路保护机制。</p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><p>服务熔断解决以下问题：</p><ul><li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li><li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li></ul><p>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的。</p><h1 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h1><p>服务降级是指当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。换句话讲，就是尽可能的把系统资源让给优先级高的服务。</p><p>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。</p><blockquote><p>服务降级主要用于什么场景？</p></blockquote><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些不重要或不紧急的服务或任务进行服务的延迟使用或暂停使用。</p><p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p><p>当某一时间内服务A的访问量增加，而B和C的访问量较少，为了缓解A服务的压力，这时需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级。</p><blockquote><p>服务降级需要考虑的问题</p></blockquote><ul><li>哪些服务是核心服务，哪些服务是非核心服务。</li><li>哪些服务可以支持降级，哪些服务不能支持降级，降级策略是什么。</li><li>除服务降级之外是否存在更复杂的业务放通场景，策略是什么。</li></ul><blockquote><p>自动降级分类</p></blockquote><ul><li>超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测恢复情况。</li><li>失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阈值自动降级，同样要使用异步机制探测恢复情况。</li><li>故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、RPC服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）。</li><li>限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阈值，后续请求会被降级；降级后的处理方案可以是排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</li></ul><blockquote><p>服务熔断和降级的区别</p></blockquote><p>服务熔断（服务端）：某个服务超时或异常，引起熔断，类似于保险丝（自我熔断）。</p><p>服务降级（客户端）：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，可以准备一个FallBackFactory，返回一个默认的值（缺省值），会导致整体的服务下降，但是好歹能用，比直接挂掉强。</p><ul><li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑。</li><li>管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层次之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）。</li><li>实现方式不太一样，服务降级具有代码侵入性（由控制器完成或自动降级），熔断一般称为自我熔断。</li></ul><blockquote><p>熔断，降级，限流：</p></blockquote><p>限流：限制并发的请求访问量，超过阈值则拒绝。</p><p>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定，从整体负荷考虑。</p><p>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃，系统自动执行和恢复。</p><h1 id="Zuul路由网关"><a href="#Zuul路由网关" class="headerlink" title="Zuul路由网关"></a>Zuul路由网关</h1><p>Zuul包含了对请求的路由和过滤两个主要功能，其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其它微服务的消息，以及以后的访问微服务都是通过Zuul跳转后获得。</p><p><strong>Zuul服务最终还是会注册进Eureka</strong>。</p><p>提供代理、路由、过滤三大功能。</p><p>官网文档：<a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">https://github.com/Netflix/zuul</a></p><h1 id="config分布式配置"><a href="#config分布式配置" class="headerlink" title="config分布式配置"></a>config分布式配置</h1><blockquote><p>分布式系统面临配置文件的问题</p></blockquote><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。SpringCloud提供了ConfigServer来解决这个问题，每一个微服务自己带着一个application.yml，那成百上千的配置文件修改的话，很是繁琐。</p><blockquote><p>SpringCloud config分布式配置中心</p></blockquote><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环节提供了一个中心化的外部配置。</p><p><img src="/archives/580061a7/image-20211121222258740.png" alt=""></p><p>Spring Cloud Config分为<strong>服务端</strong>和<strong>客户端</strong>。</p><ul><li>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，加密信息等访问接口。</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动时从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样有助于对环境配置进行版本管理。并且可以通过git客户端工具来方便的管理和访问配置内容。</li></ul><blockquote><p>SpringCloud config分布式配置中心能干嘛</p></blockquote><ul><li>集中管理配置文件</li><li>不同环境，不同配置，动态化的配置更新，分环境部署</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变化时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><blockquote><p>SpringCloud config分布式配置中心与GitHub整合</p></blockquote><p>由于SpringCloud Config默认使用Git来存储配置文件（也存在其它方式，比如支持SVN和本地文件），但是推荐使用Git，而且使用的是http/https访问的形式。</p><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><p>什么是微服务？</p><p>微服务之间是如何独立通信的？</p><p>SpringCloud和Dubbo有哪些区别？</p><p>SpringBoot和SpringCloud，请谈谈你对它们的了解？</p><p>什么是服务熔断？什么是服务降级？</p><p>微服务有哪些优缺点？说一下你在项目开发中遇到的坑。</p><p>你所知道的微服务技术栈有哪些？请列举一二。</p><p>Eureka和Zookeeper都可以提供服务注册和发现的功能，请谈谈两者的区别？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1jJ411S7xr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;遇见狂神说&lt;/a&gt;  &lt;a href=&quot;https://www.bilibili.com/video/BV18E411x7eT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;尚硅谷&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://lskjwp.gitee.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://lskjwp.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/a91eaa72/"/>
    <id>https://lskjwp.gitee.io/archives/a91eaa72/</id>
    <published>2021-03-29T15:59:03.000Z</published>
    <updated>2021-11-14T07:16:12.595Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1FE411P7B3" target="_blank" rel="noopener">B站  遇见狂神说</a></p><a id="more"></a><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>版本控制（Revision Control）是指对软件开发过程中各种程序代码、<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>及说明文档等文件变更的管理，是<a href="https://baike.baidu.com/item/软件配置管理/3765602" target="_blank" rel="noopener">软件配置管理</a>的核心思想之一。</p><p><strong>常见的版本控制工具</strong>：</p><ul><li>GIt</li><li>SVN（Subversion）</li><li>CVS（Concurrent Versions System）</li><li>VSS（Micorosoft Visual SourceSafe）</li><li>TFS（Team Foundation Server）</li><li>Visual Studio Online</li></ul><h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><p><strong>本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人使用，如RCS。</p><p><strong>集中版本控制</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传修改的文件。</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。同时，所有的数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然也可进行定期备份。（SVN、CVS、VSS）</p><p><strong>分布式版本控制</strong></p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有的版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其它用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><blockquote><p>Git与SVN的区别：</p></blockquote><p>SVN时集中式版本控制系统，版本库是集中放在中央服务器上的，而工作时，用的是个人电脑，所以需要先从中央服务器上拿到最新的版本，然后工作，完成工作后，需要把自己修改或完成的文件推送到中央服务器上。集中式版本控制系统是必须连网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需要连网，因为版本都在个人的电脑上。比如说自己在电脑上修改了文件A，其他人修改了文件B，这时，两者之间只需要把各自的修改推送给对方，就可以互相查看对方的修改了。</p><h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><p>Git官网：<a href="https://git.scm.com/" target="_blank" rel="noopener">https://git.scm.com/</a></p><p>Git淘宝镜像：<a href="http://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p><strong>Git Bash</strong>：Unix与Linux风格的命令行</p><p><strong>Git CMD</strong>：Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git</p><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>查看配置：</p><pre><code>git config -l</code></pre><p>查看不同级别的配置文件：</p><pre><code>#查看系统configgit config --system --list#查看当前用户（global）配置git config --global --list</code></pre><p><strong>Git相关的配置文件</strong></p><ul><li><code>Git/etc/gitconfig</code>：Git安装目录下的gitconfig，–system系统级</li><li><code>C:/Users/用户名/.gitconfig</code>：只适用于当前登录用户的配置 ，–global全局</li></ul><p>可直接编辑配置文件，通过命令设置后会响应到上述文件中。</p><p><strong>设置用户名和邮箱（用户标识）</strong></p><pre><code>git config --global user.name "用户名"git config --global user.email "邮箱"</code></pre><p>若传递了–global选项，只需要完成一次以上设置。因为Git将总是会使用上述设置的信息来处理在系统中所做的一切操作。若希望在一个特定的项目中使用不同的名称或email地址，可在项目中运行以上命令但不需要–global选项。–global为全局配置，不加的话为某个项目的特定配置。</p><h1 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h1><h2 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h2><p><img src="/archives/a91eaa72/u=501305626,3016561754&amp;fm=26&amp;gp=0-1617033609316.jpg" alt=""></p><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage/Index）、资源库（Respository或GIt Directory）。如果在加上远程的git仓库（Remote Directory）就可以分为四个工作区域。</p><ul><li>Workspace：工作区，平时存放项目代码的地方</li><li>Index/Stage：暂存区，用于临时存放，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（本地仓库），就是安全存放数据的位置，这里有所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是项目组中的一台电脑用于远程数据交换</li></ul><p><img src="/archives/a91eaa72/image-20210329212510531-1617033609317.png" alt=""></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含工作空间和Git的管理空间</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间</li><li>.git：存放Git管理信息的目录，初始化仓库时自动创建</li><li>Index/Stage：暂存区，或待提交更新区，在提交进入repo之前，把所有的更新放在暂存区</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会指向当前的开发分支（branch）</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复Workspace中的临时状态</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库</li></ol><p>git管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p><p><img src="/archives/a91eaa72/www.uml.org-1617033609317.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg" alt=""></p><h1 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h1><h2 id="创建工作目录与常用命令"><a href="#创建工作目录与常用命令" class="headerlink" title="创建工作目录与常用命令"></a>创建工作目录与常用命令</h2><p>工作目录（Workspace）一般就是希望Git帮助管理的文件夹，可以是项目的目录，也可以是一个空目录（建议目录命名不要有中文）。</p><p><img src="/archives/a91eaa72/img2018.cnblogs-1617033609317.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg" alt=""></p><pre><code>#添加所有文件到暂存区git add .#提交暂存区中的内容到本地仓库，-m：提交信息git commit -m "消息内容"</code></pre><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另外一种是克隆远程仓库。</p><ol><li>创建全新的仓库。在需要Git管理的项目的根目录执行<code>git init</code>；</li><li>新建一个git代码库之后，在项目目录总多出了一个<code>.git</code>目录，关于版本的所有信息都在这个目录中。</li></ol><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>将远程服务器上的仓库克隆一份到本地。</p><pre><code>#克隆一个项目和它的整个版本信息git clone [url]</code></pre><h1 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h1><h2 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了未想提交的文件，或要提交的文件未提交成功。</p><ul><li><strong>Untracked</strong>：未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制，通过<code>git add</code>状态变为<strong>Staged</strong></li><li><strong>Unmodify</strong>：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致，这种类型的文件有两种去处。<ul><li>如果它被修改，而变为<strong>Modified</strong>。</li><li>如果使用<code>git rm</code>移除版本库，则成为<strong>Untracked</strong>文件</li></ul></li><li><strong>Modified</strong>：文件已修改，仅仅是修改，并没有进行其它的操作，这个文件也有两个去处。<ul><li>通过<code>git add</code>可进入暂存<strong>Staged</strong>状态</li><li>使用<code>git checkout</code>则丢弃修改过，返回到<strong>Unmodify</strong>状态。<code>git checkout</code>即从库中取出文件，覆盖当前修改。</li></ul></li><li><strong>Staged</strong>：暂存状态，<ul><li>执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为<strong>Unmodify</strong>状态</li><li>执行<code>git reset HEAD filename</code>取消暂存，文件状态为<strong>Modified</strong></li></ul></li></ul><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>查看指定文件状态：</p><pre><code>git status [filename]</code></pre><p>查看所有文件状态：</p><pre><code>git status</code></pre><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有时不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。</p><p><strong>在主目录下建立<code>.gitignore</code>文件</strong>，此文件有如下规则：</p><ul><li><code>空格</code>不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li><code>#</code>开头的文件标识注释，可以使用反斜杠进行转义</li><li><code>!</code>开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义</li><li><code>/</code>结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/</code>开始的模式匹配项目跟目录<br>如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</li><li><code>**</code>匹配多级目录，可在开始，中间，结束</li><li><code>?</code>通用匹配单个字符</li><li><code>[]</code>通用匹配单个字符列表</li></ul><p><strong>常用匹配示例：</strong></p><p><code>bin/</code>: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</p><p><code>/bin</code>: 忽略根目录下的bin文件</p><p><code>/*.c</code>: 忽略 cat.c，不忽略 build/cat.c</p><p><code>debug/*.obj</code>: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</p><p><code>**/foo</code>: 忽略/foo, a/foo, a/b/foo等</p><p><code>a/**/b</code>: 忽略a/b, a/x/b, a/x/y/b等</p><p><code>!/bin/run.sh</code>: 不忽略 bin 目录下的 run.sh 文件</p><p><code>*.log</code>: 忽略所有 .log 文件</p><p><code>config.php</code>: 忽略当前路径的 config.php 文件</p><p><strong>.gitignore规则不生效</strong></p><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p><pre><code>git rm -r --cached .git add .git commit -m  'update .gitignore'</code></pre><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><p>分支就是从主线上分离出来进行另外的操作，而又不影响主线，主线又可以继续干它的事，是不是有点像线程，最后分支做完事后合并到主线上而分支的任务完成可以删掉了。这样是不是很方便，主线继续做它的事，分支用来解决临时需求，二者互不相干。</p><p>Git分支中常用命令：</p><pre><code>#列出所有本地分支git branch#列出所有远程分支git branch -r#新建一个分支，但依然停留在当前分支git branch -b [branch]#合并指定分支到当前分支git merge [branch]#删除分支git branch -d [branch-name]#删除远程分支git push origin --delete [branch-name]git branch -dr [remote/branch]</code></pre><p>多个分支如果并行执行，就会导致代码不冲突，也就是同时存在多个版本。</p><p>如果同意文件在合并分支时被修改了则会引起冲突，可以修改冲突文件后重新进行提交。</p><p><strong>master</strong>主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的其它分支上工作，工作完后，需要发布或其它分支代码稳定后可以合并到主分支master。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1FE411P7B3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站  遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://lskjwp.gitee.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://lskjwp.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JVM入门学习</title>
    <link href="https://lskjwp.gitee.io/archives/ea2e1639/"/>
    <id>https://lskjwp.gitee.io/archives/ea2e1639/</id>
    <published>2021-03-21T15:09:51.000Z</published>
    <updated>2021-11-14T07:16:12.654Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1iJ411d7jS" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><h1 id="认识JVM"><a href="#认识JVM" class="headerlink" title="认识JVM"></a>认识JVM</h1><p>JVM，全称Java Virtual Machine，英文为Java虚拟机，“虚拟机（Virtual Machine）是指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统”，但是 虚拟机本质还是该计算机系统的一个进程，为了方便描述，我们把整个计算机当成一幢大楼，而虚拟机则是某一个楼层。大楼划分了一个区域给一个楼层，让这个楼层自己管理自己，也就对应着，计算机划分了一个内存给JVM，让JVM自己管理自己。JVM的内存区域划分为两大块，线程隔离的区域和线程共享的区域。</p><p><img src="/archives/ea2e1639/image-20210321230640433-1616339678910.png" alt=""></p><h2 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h2><p><img src="/archives/ea2e1639/20190216114129109-1616339678911.png" alt=""></p><h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul><li>Sun公司 HotSpot <code>Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode)</code></li><li>BEA <code>JRockit</code></li><li>IBM <code>J9VM</code></li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h2><p>（父）启动类加载器（BootstrapClassLoader）：<code>rt.jar</code></p><h2 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h2><p>（母）扩展类加载器（ExtClassLoader）：    <code>ext/*.jar</code></p><h2 id="应用类加载器"><a href="#应用类加载器" class="headerlink" title="应用类加载器"></a>应用类加载器</h2><p>App/SystemClassLoader： 应用/系统类加载器，加载当前classpath的所有类。</p><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>XxxClassLoader：用户自定义的类加载器，默认使用双亲委派，委托上级来加载。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>如果一个类加载器接收到了类加载的请求，它首先把这个请求委托给他的父类加载器去完成，每个层次的类加载器都是如此，因此所有的加载请求都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它在搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p><img src="/archives/ea2e1639/JVM%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B-1616339678911.jpg" alt=""></p><p><img src="/archives/ea2e1639/image-20210321100202924-1616339678912.png" alt=""></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/archives/ea2e1639/image-20210321135139751-1616339678912.png" alt="类加载的生命周期"></p><p>源码分析</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ClassNotFoundException    <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先检查这个classsh是否已经加载过了</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// c==null表示没有加载，如果有父类的加载器则让父类加载器加载</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果父类的加载器为空 则说明递归到bootStrapClassloader了</span>                        <span class="token comment" spellcheck="true">//bootStrapClassloader比较特殊无法通过get获取</span>                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class</span>                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>Java中为了保证类加载的安全，使用了双亲委派机制。优先从启动类加载器中加载，这个称为“父”。“父”无法加载到，再从扩展类加载器中加载，这个称为“母”。</p><p>双亲委派。如果都加载不到，才会考虑从应用类加载器中加载。直到加载到为止。</p><blockquote><p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p></blockquote><ol><li>类加载器收到类加载的请求</li><li>将这个请求向上委托为父类加载器去完成，一直向上委托，直到启动类加载器</li><li>启动类加载器检查是否能够加载当前的这个类，能加载就结束，使用当前的加载器，否则抛出异常，通知子加载器进行加载</li><li>重复步骤 3</li></ol><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><ul><li><p>为什么需要双亲委派机制?（也就是双亲委派的优点）</p><p>①双亲委派机制使得类加载出现层级，父类加载器加载过的类，子类加载器不会重复加载，可以<strong>防止类重复加载</strong>；</p><p>②使得类的加载出现优先级，<strong>防止了核心API被篡改</strong>，提升了安全，所以越基础的类就会越上层进行加载，反而一般自己的写的类，就会在应用程序加载器（Application）直接加载。</p></li><li><p>如何打破双亲委派？</p><p>①自定义类加载器，重写loadClass方法</p><p>②使用线程上下文类加载器</p></li></ul><h1 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h1><h2 id="什么是沙箱"><a href="#什么是沙箱" class="headerlink" title="什么是沙箱"></a>什么是沙箱</h2><p>沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？——==CPU、内存、文件系统、网络==。不同级别的沙箱对这些资源访问的限制也可以不一样。</p><p> 所有的Java程序运行都可以指定沙箱，可以定制安全策略。</p><h2 id="沙箱的基本组件"><a href="#沙箱的基本组件" class="headerlink" title="沙箱的基本组件"></a>沙箱的基本组件</h2><ul><li><p><strong>字节码校验器</strong>（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p></li><li><p>类装载器（class loader）：其中类装载器在3个方面对Java沙箱起作用</p><ul><li>它防止恶意代码去干涉善意的代码；</li><li>它守护了被信任的类库边界；</li><li>它将代码归入保护域，确定了代码可以进行哪些操作。</li></ul></li></ul><p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p><p>类装载器采用的机制是<strong>双亲委派模式</strong>。</p><ol><li>从最内层JVM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用；</li><li>由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li></ol><ul><li><p><strong>存取控制器</strong>（access controller）：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</p></li><li><p><strong>安全管理器</strong>（security manager）：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</p></li><li><p>安全软件包（security package）：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：</p><ul><li>安全提供者</li><li>消息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><p>Java在内存区域中专门开辟了一块标记区域——本地方法栈，用来登记native方法，凡是带了native关键字的，会进入到本地方法栈中，调用本地方法接口（JNI），在最终执行时，通过JNI（Java Native Interface）加载本地方法库中的方法。</p><blockquote><p><strong>JNI作用：扩展Java的使用，融合不同的编程语言为Java所用。</strong>最初是想融合C，C++的，因为Java诞生的时候，C，C++横行，想要立足的话就要有能调用C的程序</p></blockquote><p>本地方法栈（Native Method Stack）：具体做法是Native Method Stack中登记native方法，在执行引擎（Execution Engine）执行时加载本地库（Native Libraies）。</p><h1 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><p>程序计数器：Program Counter Register</p><p> 每个线程都有一个程序计数器， 是线程私有的，就是一个指针， 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计。</p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区：Method Area</p><p> 方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，<strong>此区域属于共享区间</strong>；</p><blockquote><p>静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关。</p></blockquote><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><blockquote><p>栈：先进后出，后进先出</p><p>队列：先进先出（FIFO：first input first output</p></blockquote><p>线程结束，栈内存也就释放了，对于栈而言，不存在垃圾回收问题。</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>堆，Heap。一个JVM只有一个堆内存，堆内存的大小是可以调节的。</p><p>类加载器读取类文件后，一般会把<strong>类、方法、常量、变量</strong>放到堆中，保存所有引用类型的真实对象。</p><p><strong>堆内存中细分为以下三个区域</strong>：</p><ul><li>新生区</li><li>养老区</li><li>永久区</li></ul><p>在JDK8后，永久存储区更换为元空间。</p><p><img src="/archives/ea2e1639/%E5%A0%86-1616339678912.jpg" alt=""></p><blockquote><p>方法区是一种定义、概念。而所谓永久代或元空间是其一种实现机制。（元空间逻辑上存在，物理上不存在）</p></blockquote><p>GC垃圾回收，主要是在伊甸园区和养老区。</p><p>若内存满了，OOM，堆内存不够。<code>java.lang.OutOfMenoryError:Java heap space</code></p><h2 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h2><ul><li>一个类诞生和成长（甚至死亡）的地方。</li><li>所有的对象都是在伊甸园区new出来的。</li><li>幸存者区（存活区）分为0，1区（from space ，to space谁空谁是to）。</li></ul><p><img src="/archives/ea2e1639/image-20210321145923793-1616339678912.png" alt=""></p><h2 id="养老区"><a href="#养老区" class="headerlink" title="养老区"></a>养老区</h2><p>主要存放JVM认为生命周期比较长的对象（经过几次的新生区（Young Gen）的垃圾回收后仍然存在，换个说法就是新生区没干掉，没杀死的来到了养老区），内存大小相对会比较大，垃圾回收也相对没有那么频繁（譬如可能几个小时一次）。</p><blockquote><p>大多对象都是临时对象。</p></blockquote><h2 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h2><p>这个区域常驻内存中，用来存放jdk本身携带的Class对象和Interface元数据，存储的是Java运行时的一些环境或类信息，该区域不存在垃圾回收，关闭VM虚拟机就会释放这个区域的内存。</p><ul><li>jdk1.6之前：永久代，常量池是在方法区</li><li>jdk1.7：永久代，但是慢慢的退化了，<code>去永久代</code>，常量池在堆中</li><li>jdk1.8之后：无永久代，常量池在元空间</li></ul><blockquote><p>一个启动类，加载了大量的第三方jar包；Tomcat部署过多的应用，大量动态地生成的反射类，不断地被加载，直到内存满，就会出现OOM。</p></blockquote><h1 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h1><p>垃圾回收区域在堆和方法区，99%（大多）在堆中。</p><p>GC分为两类：轻GC（普通的GC）、重GC（全局GC）</p><h2 id="GC常用算法"><a href="#GC常用算法" class="headerlink" title="GC常用算法"></a>GC常用算法</h2><p>标记清除法，标记压缩，复制算法，引用计数法。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。但是此算法有个致命缺陷无法解决循环引用的问题。</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>新生区使用这种算法进行gc 。将可用的内存按容量划分为大小相等的两块（from，to），每次只是用其中一块（总有一块是空的【to区域】）。当这一苦熬的内存用完了，就将还存活着的对象复制到另外一块上面，然后把已使用过的内存空间一次清理完。</p><ul><li>每次GC都会讲Eden区中的对象清到幸存区中，一旦Eden区被GC，那么Eden区就会是空的</li><li>两个幸存区保持谁空谁是to的原则，即每次GC回将上一轮的from区中的对象复制，然后加上Eden区中新的被GC进来的对象，合在一起放入空的to区中，然后to区变成下一轮的from区，原来的from区被清空，变成新一轮的to区</li><li>当一个对象经历了15次（默认值）GC还没有死，那么就会进入养老区中<br>注：可通过<code>-XX:MaxTenuringThreshold=value</code> 来调节进入养老区的时间,这也是JVM性能调优的一种方式</li></ul><blockquote><p><strong>优点</strong>：没有内存碎片<br><strong>缺点</strong>：浪费内存空间，多了一半空间为空，加入存活率100%就会发生OOM，所以复制算法常用与存活率较低的新生区中</p></blockquote><h3 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h3><p>养老区通常使用这种算法。先标记出所有需要回收的对象，在标记完成后统一回收（清除）所有被标记的对象。</p><p><img src="/archives/ea2e1639/image-20210321184701153-1616339678912.png" alt=""></p><blockquote><p>优点：不需要额外空间</p><p>缺点：两次扫描，浪费时间，同时会产生内存碎片</p></blockquote><h3 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h3><p>标记清除压缩算法，对于标记清除的进行压缩。</p><p><img src="/archives/ea2e1639/image-20210321185153449.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1iJ411d7jS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://lskjwp.gitee.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://lskjwp.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>css学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/62511120/"/>
    <id>https://lskjwp.gitee.io/archives/62511120/</id>
    <published>2021-03-18T07:49:11.000Z</published>
    <updated>2021-11-14T07:16:13.652Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV14J4114768" target="_blank" rel="noopener">黑马程序员pink老师</a></p><a id="more"></a><h1 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h1><ol><li>布局定位属性：display/position/float/clear/visibility/overflow（建议第一个写display，这个关系到显示模式）</li><li>自身属性：width/height/margin/padding/border/background</li><li>文本属性：color/font/text-decoration/text-align/vertical-align/white-space/break-word</li><li>其它属性：content/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient…</li></ol><h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><p>CSS有三大特性，即层叠性、继承性、优先级。</p><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><p>相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><p><strong>层叠性原则：</strong></p><ul><li>样式冲突，遵循<code>就近原则</code>。那个样式结构近，就执行那个样式。</li><li>样式不冲突，不会层叠。</li></ul><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>子标签会继承父标签的某些样式，如文本颜色、字号和行高等。</p><ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性；</li><li>子元素可以继承父元素的样式（text-，font-，line-等元素开头以及color属性可以继承）。</li></ul><pre class=" language-html"><code class="language-html">/*行高的继承性*/<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* font: 12px/24px 'Microsoft YaHei'; */</span>            <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">12</span>px/<span class="token number">1.5</span> Microsoft YaHei<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*1.5 表示当前元素文字大小font-size的1.5倍*/</span>        <span class="token punctuation">}</span>        <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*子元素继承了父元素body的行高1.5倍*/</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*div中的行高为12 * 1.5 */</span>        <span class="token punctuation">}</span>        <span class="token selector">p </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*子元素继承了父元素body的行高1.5倍*/</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* p中的行高为14 * 1.5 */</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            当前li标签未设置文字大小，则会继承父元素的文字大小            此时li标签文字大小为12px（继承body），行高为12 * 1.5        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>未指定文字大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>行高可以跟单位，也可不跟单位。</li><li>body行高1.5的写法可以让子元素根据自己文字大小自动调整行高。</li></ul><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>当同一个元素指定多个选择器，就会产生出现优先级。</p><ul><li>若选择器相同，则执行层叠性；</li><li>若选择器不同，则根据选择器权重执行。</li></ul><h3 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a>选择器权重</h3><table><thead><tr><th align="center">选择器</th><th align="center">选择器权重</th></tr></thead><tbody><tr><td align="center">继承 或 *</td><td align="center">0，0，0，0</td></tr><tr><td align="center">元素（标签）选择器</td><td align="center">0，0，0，1</td></tr><tr><td align="center">类选择器，伪类选择器</td><td align="center">0，0，1，0</td></tr><tr><td align="center">ID选择器</td><td align="center">0，1，0，0</td></tr><tr><td align="center">行内样式 style=””</td><td align="center">1，0，0，0</td></tr><tr><td align="center">!important 重要的</td><td align="center">无穷大</td></tr></tbody></table><p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>id选择器</code> &gt; <code>类选择器</code> &gt; <code>标签选择器</code> &gt; <code>继承 或 *</code></p><h3 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h3><p>如果是复合选择器，则会出现权重叠加，需要计算权重。</p><h1 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h1><p>在CSS中，根据选择器的类型将其分为基础选择器和复合选择器，复合选择器是建立在基础选择器之上，对几倍呢选择器进行组合形成的。</p><ul><li>复合选择器可以更准确、更高效地选择目标元素（标签）；</li><li>复合选择器是由两个或多个基础选择器通过不同的方式组合形成的；</li><li>常用的复合选择器包括后代选择器、子选择器、并集选择器、伪类选择器等。</li></ul><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称包含选择器，可以选择父元素里面的子元素。</p><p>其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><pre><code>元素1 元素2 {    样式声明}</code></pre><p>上述语法表示选择<strong>元素1</strong>里面的所有<strong>元素2</strong>（后代元素）。</p><ul><li><strong>元素1</strong>和<strong>元素2</strong>中间用空格隔开；</li><li><strong>元素1</strong>是父级，<strong>元素2</strong>是子级，最终选择的是<strong>元素2</strong>；</li><li><strong>元素2</strong>只要是<strong>元素1</strong>的后代即可。</li><li><strong>元素1</strong>和<strong>元素2</strong>可以是任意基础选择器。</li></ul><h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。</p><pre><code>元素1&gt;元素2 {    样式声明}</code></pre><p>上述语法表示选择<strong>元素1</strong>里面的所有直接后代（子元素）<strong>元素2</strong>。</p><ul><li><strong>元素1</strong>和<strong>元素2</strong>中间用<code>&gt;</code>隔开；</li><li><strong>元素1</strong>是父级，<strong>元素2</strong>是子级，最终选择的是<code>元素2</code>;</li><li><strong>元素2</strong>必须是<strong>元素1</strong>的直接后代，后代的后代不是直接后代。</li></ul><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器可以选择多组标签，同时为它们定义相同的样式。通常用于集体声明。</p><p><strong>并集选择器</strong>是各选择器通过<code>英文逗号</code>链接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><pre><code>元素1,元素2,元素3 {    样式声明}</code></pre><ul><li>元素之间使用<code>,</code>隔开；</li><li>并集选择器通常用于集体声明。</li></ul><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p><p>伪类选择器书写最大的特点是用<code>:</code>表示，例如：<code>:hover</code>、<code>:first-child</code>    。</p><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><p><strong>注意事项</strong>：为了确保生效，需按照<code>LVHA</code>的顺序声明：<code>:link :visited :hover :active</code>。</p><pre class=" language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*未访问时的状态*/</span><span class="token selector">a<span class="token pseudo-class">:link</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*已访问过的状态*/</span><span class="token selector">a<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*鼠标经过时的状态*/</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*鼠标按下去时的状态*/</span><span class="token selector">a<span class="token pseudo-class">:active</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h3><p><code>:focus</code>伪类选择器用于选取获得焦点的表单元素。</p><h1 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h1><p>元素显示模式就是元素（标签）以什么方式进行显示。例如<code>&lt;div&gt;</code>自已占一行，一行可以放多个<code>&lt;span&gt;</code>。</p><p>HTML元素一般分为<code>块元素</code>和<code>行内元素</code>两种类型。</p><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>块级元素特点：</p><ul><li>独占一行；</li><li>高度、宽度、外边距以及内边距都可以设置；</li><li>宽度默认为容器（父级宽度）的100%；</li><li>块级元素是一个容器和盒子，里面可以放行内或者块级元素。</li></ul><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p><code>&lt;span&gt;</code>标签是最典型的行内元素。</p><p>行内元素的特点：</p><ul><li>相邻行内元素在一行上，一行可以显示多个；</li><li>高度、宽度直接设置是无效的；</li><li>宽度默认为本身内容的宽度；</li><li>行内元素只能容纳文本或其它行内元素。</li></ul><p><strong>注意</strong></p><ul><li>链接里不能在放链接；</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下显示模式更为安全。</li></ul><h2 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h2><p>在行内元素中有几个特殊的标签：<code>&lt;img /&gt;</code>、<code>&lt;input /&gt;</code>、<code>&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点。</p><p>行内元素的特点：</p><ul><li>和相邻行内元素（行内块）在一行上，但是它们之间会有空白间隙。一行可以显示多个（行内元素特点）；</li><li>默认宽度就是它本身内容的宽度（行内元素特点）；</li><li>高度、宽度、外边距以及内边距都可以设置（块级元素特点）。</li></ul><h2 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h2><p>特殊情况下，需要使用到元素模式的转换。</p><ul><li><strong>转换为块元素</strong> <code>display: block;</code></li><li><strong>转换为行内元素</strong> <code>display: inline;</code></li><li><strong>转换为行内块</strong><code>display: inline-block;</code></li></ul><h1 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h1><p>CSS Fonts（字体）属性用于定义字体系列、大小、粗细、和文字样式。</p><table><thead><tr><th align="center">属性</th><th align="center">表示</th></tr></thead><tbody><tr><td align="center">font-size</td><td align="center">字号</td></tr><tr><td align="center">font-family</td><td align="center">字体</td></tr><tr><td align="center">font-weight</td><td align="center">字体粗细</td></tr><tr><td align="center">font-style</td><td align="center">字体样式</td></tr><tr><td align="center">font</td><td align="center">字体连写</td></tr></tbody></table><h2 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h2><p>css使用<code>font-family</code>属性定义文本的字体系列。</p><ul><li>各种字体之间必须使用英文状态下的逗号隔开；</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，需要加引号。</li></ul><p>常见的字体：</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Microsoft YaHei'</span>,tahoma,arial,<span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><p>css使用<code>font-size</code>属性来定义字体大小。</p><ul><li>px（像素）大小是网页中常用的单位（谷歌浏览器默认的文字大小为16px）；</li><li>可给body指定整个页面文字的大小。</li></ul><h2 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h2><p>css使用<code>font-weight</code>属性设置文本字体的粗细。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">normal</td><td align="center">默认值，不加粗</td></tr><tr><td align="center">bold</td><td align="center">粗体</td></tr><tr><td align="center">100-900</td><td align="center">400等同于normal，700等同于bold（数字属性后没有单位）</td></tr></tbody></table><h2 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h2><p>css使用<code>font-style</code>属性设置文本的风格。</p><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">normal</td><td align="center">默认值，标准的字体样式</td></tr><tr><td align="center">italic</td><td align="center">斜体</td></tr></tbody></table><h2 id="字体符合属性"><a href="#字体符合属性" class="headerlink" title="字体符合属性"></a>字体符合属性</h2><p>字体属性可将上述样式综合来写。</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-height font-family<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>使用font属性时，必须按照上述语法格式中的顺序书写，<code>不能更换顺序</code>，并且每个属性间以空格隔开；</li><li>不需要设置的属性可以省略（使用默认值），但必须要保留<code>font-size</code>和<code>font-family</code>属性，否则font属性将不起作用。</li></ul><h1 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h1><p>CSS Text（文本）属性可定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><h2 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h2><p>color属性用于定义文本的颜色。</p><table><thead><tr><th align="center">表示</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">预定义的颜色值</td><td align="center">如red、green、blue等</td></tr><tr><td align="center">十六进制</td><td align="center">如#FF0000</td></tr><tr><td align="center">RGB代码</td><td align="center">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><h2 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h2><p>text-align属性用于设置元素内文本内容的水平对齐方式。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        left：左对齐（默认值；right：右对齐；center：居中对齐。    */</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> cneter<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h2><p>text-decoration属性规定添加到文本的装饰。可以给文本添加下划线、删除线、上划线等。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">默认，没有装饰线</td></tr><tr><td align="center">underline</td><td align="center">下划线</td></tr><tr><td align="center">overline</td><td align="center">上划线</td></tr><tr><td align="center">line-through</td><td align="center">删除线</td></tr></tbody></table><h2 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h2><p>text-indent属性用来指定文本的首行的缩进。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*段落文字首行缩进10px*/</span><span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*段落文字首行缩进2字符*/</span><span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>em</code>是一个相对单位，就是当前元素（font-size）1个文字的大小，若当前元素未设置大小，则会按照父元素的1个文字大小。</p><h2 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h2><p>line-height属性用于设置行间的距离（行高）。</p><p>行间距由上间距、文本高度、下间距组成。当文本高度与行高相同时，上间距和下间距都为0。</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>background-color属性定义了元素的背景颜色。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> 颜色值<span class="token punctuation">;</span></code></pre><p>一般情况下元素背景颜色默认值是<code>transparent</code>（透明），也可手动指定背景颜色为透明色。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></code></pre><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>background-image属性描述了元素的背景图像。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    url(图片路径)     括号里的路径不需要加引号    none 默认的 无背景图*/</span><span class="token property">background-image</span><span class="token punctuation">:</span> none | <span class="token url">url(url)</span></code></pre><h2 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h2><p>background-repeat属性可以对背景图像进行平铺。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y</code></pre><table><thead><tr><th align="center">参数值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">repeat</td><td align="center">默认，背景图像在纵向和横向上平铺</td></tr><tr><td align="center">no-repeat</td><td align="center">背景图像不平铺</td></tr><tr><td align="center">repeat-x</td><td align="center">背景图像在横向上平铺</td></tr><tr><td align="center">repeat-y</td><td align="center">背景图像在纵向上平铺</td></tr></tbody></table><h2 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h2><p>background-position属性可以改变图片在背景中的位置。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    x代表x坐标，y代表y坐标    可以使用方位名词或精确单位*/</span><span class="token property">background-position</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre><table><thead><tr><th align="center">参数值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">length</td><td align="center">百分数/由浮点数字和单位标识符组成的长度值</td></tr><tr><td align="center">position</td><td align="center">top|center|bottom|left|right 方位名词</td></tr></tbody></table><p><strong>参数是方位名词</strong></p><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，例如left top与top left效果一样。</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐。</li></ul><p><strong>参数是精确单位</strong></p><ul><li>如果参数是精确坐标，那么第一个是x坐标，第二个是y坐标；</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个是垂直居中。</li></ul><p><strong>参数是混合单位</strong></p><p>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标。</p><h2 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h2><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll | fixed</code></pre><p><strong>scroll</strong>：背景图像随对象内容滚动。</p><p><strong>fixed</strong>：背景图像固定。</p><h2 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;*/</span><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url">url(image.jpg)</span> repeart-y fixed top<span class="token punctuation">;</span></code></pre><h2 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h2><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>最后一个参数是alpha透明度，取值范围在0-1之间；</li><li>最后一个参数可以把0省略掉，例如：<code>background: rgba(0,0,0,.3);</code>；</li><li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响；</li></ul><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><h2 id="盒子模型组成"><a href="#盒子模型组成" class="headerlink" title="盒子模型组成"></a>盒子模型组成</h2><p>盒子模型（Box Model）就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个装东西的容器。</p><p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括边框、外边距、内边距和实际内容。</p><p><img src="/archives/62511120/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B-1616053819017.jpg" alt="盒子模型"></p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>border可以设置元素的边框。边框由边框宽度（粗细）、边框样式、边框颜色三部分组成。</p><p>边框会影响盒子的大小。</p><pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> border-width || border-style || border-color</code></pre><p><strong>border-width</strong>单位通常使用<code>px</code>。</p><p><strong>border-style</strong>：<code>none</code>（无边框）|<code>hidden</code>（隐藏边框）|<code>solid</code>（实线）|<code>dashed</code>（虚线）|<code>dotted</code>（点线）|<code>double</code>（双线边框）|……</p><pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*对于顺序没有要求*/</span></code></pre><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>border-collapse属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><pre class=" language-css"><code class="language-css"><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span></code></pre><ul><li>collapse：合并。</li><li><strong>border-collapse: collapse;</strong>表示相邻边框合并在一起。</li></ul><h2 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h2><p>padding属性用于设置内边距，即边框与内容之间的距离。</p><table><thead><tr><th align="center">值的个数</th><th align="center">表达含义</th></tr></thead><tbody><tr><td align="center">padding: 5px;</td><td align="center">上下左右都有5像素的内边距</td></tr><tr><td align="center">padding: 5px 10px;</td><td align="center">上下是5像素，左右是10像素</td></tr><tr><td align="center">padding: 5px 10px 20px;</td><td align="center">上5像素，左右10像素，下20像素</td></tr><tr><td align="center">padding: 5px 10px 20px 30px;</td><td align="center">上5像素，右10像素，下20像素，左30像素</td></tr></tbody></table><p>设置内边距之后，也影响了盒子实际大小。如果盒子本身未指定width/height属性，则设置padding不会撑开盒子大小。</p><h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><p>margin属性用于设置外边距，即控制盒子与盒子之间的距离。</p><p>margin属性简写的方式同内边距的表示一致。</p><p><strong>外边距</strong>可以让块级盒子水平居中，但必须满足以下两个条件：</p><ul><li>盒子必须指定了width；</li><li>盒子左右的外边距都设置为auto。</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span></code></pre><p><strong>注</strong>：以上方式只适合与块级元素水平居中，行内块元素或行内元素水平居中给其父元素添加<code>text-align: center;</code>即可。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素存在下外边距margin-bottom，下面的元素有上外边距margin-top，则它们之间的垂直间距不是margin-bottom与margin-top之和，而是两个值中最大的一个。取两个值中较大的那个值这种现象被称为相邻块元素垂直外边距的合并。</p><p><strong>所以尽量只给一个盒子添加margin值</strong>。</p><h3 id="嵌套块元素垂直外边距的塌陷"><a href="#嵌套块元素垂直外边距的塌陷" class="headerlink" title="嵌套块元素垂直外边距的塌陷"></a>嵌套块元素垂直外边距的塌陷</h3><p>对于两个嵌套关系（父子关系）的块元素，父元素有上边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p><strong>解决方案</strong></p><ul><li>可以为父元素定义上边框；</li><li>可以为父元素定义上内边距；</li><li>可以为父元素添加<code>overflow: hidden</code>。</li></ul><h2 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h2><p>网页元素大多带有默认的内外边距，er’qie不同浏览器默认的也不一致。因此在布局前，需要清除网页元素的内外边距。</p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*清除外边距*/</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*清除内边距*/</span><span class="token punctuation">}</span></code></pre><p>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。</p><h2 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><p>border-radius属性用于设置元素的外边框圆角。</p><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> length<span class="token punctuation">;</span></code></pre><p>radius半径（圆的半径）原理：（椭）圆与边框的交集形成圆角效果。</p><ul><li>参数值可以是数值，也可以是百分比；</li><li>如果是正方形，想要设置为圆，把数值修改为高度或者宽度的一半即可，或者直接写成50%；</li><li>如果是个矩形，设置为高度的一半即可；</li></ul><p>以上写法是一个简写属性，它可以跟四个值，分别表示左上角、右上角、右下角、左下角。</p><pre class=" language-css"><code class="language-css">border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius</code></pre><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>box-shadow属性可以为盒子添加阴影。</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur spread color inset<span class="token punctuation">;</span></code></pre><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td align="center">必须，水平阴影的位置，允许为负值</td></tr><tr><td align="center">v-shadow</td><td align="center">必须，垂直阴影的位置，允许为负值</td></tr><tr><td align="center">blur</td><td align="center">可选，模糊距离</td></tr><tr><td align="center">spread</td><td align="center">可选，阴影的尺寸</td></tr><tr><td align="center">color</td><td align="center">可选，阴影的颜色</td></tr><tr><td align="center">inset</td><td align="center">可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>默认的是外阴影（outset），但是不可以写外阴影，否则导致阴影失效；</li><li>盒子阴影不占用空间，不会影响其它盒子的排列。</li></ul><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><p>text-shadow属性将阴影应用于文本。</p><pre class=" language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur color<span class="token punctuation">;</span></code></pre><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td align="center">必须，水平阴影的位置，允许为负值</td></tr><tr><td align="center">v-shadow</td><td align="center">必须，垂直阴影的位置，允许为负值</td></tr><tr><td align="center">blur</td><td align="center">可选，模糊距离</td></tr><tr><td align="center">color</td><td align="center">可选，阴影的颜色</td></tr></tbody></table><h1 id="传统网页布局的三种方式"><a href="#传统网页布局的三种方式" class="headerlink" title="传统网页布局的三种方式"></a>传统网页布局的三种方式</h1><p>网页布局的本质：用CSS来摆放盒子，把盒子摆放到相应的位置。</p><p>CSS提供了三种传统布局方式（盒子如何进行排列顺序）；</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><h2 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h2><p>标准流（普通流、文档流），所谓标准流，就是标签按照规定好默认方式排列。</p><ol><li><p>块级元素会独占一行，从上向下顺序排列。</p><p>常用元素：div、hr、p、h1-h6、ul、ol、dl、form、table</p></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则会自动换行。</p><p>常用元素：span、a、i、em等</p></li></ol><p>标准流是最基本的布局方式。</p><p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>float属性用于创建浮动框，将其移动到一边，直到左边缘或者右边缘触及包含块或另一个浮动框的边缘。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">元素不浮动（默认值）</td></tr><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr></tbody></table><p><strong>浮动的特性</strong></p><ol><li>浮动元素会脱离标准流（脱标）；</li><li>浮动的元素会一行显示并且元素顶部对齐；</li><li>浮动的元素会具有行内块元素的特性。</li></ol><blockquote><p>特性一</p></blockquote><ol><li>脱离标准普通流的控制（浮）移动到指定位置（动），俗称脱标。</li><li>浮动的盒子不再保留原先的位置。</li></ol><blockquote><p>特性二</p></blockquote><p>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</p><p><strong>注</strong>：浮动的元素是互相贴在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><blockquote><p>特性三</p></blockquote><p>浮动元素会具有行内块元素的特性。</p><p>任何元素都可以浮动，无论原来是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定。</li><li>浮动的盒子中间是没有缝隙的，是紧挨在一起的。</li></ul><blockquote><p>浮动元素经常和标准流父级搭配使用</p></blockquote><p>为了约束浮动元素位置，网页布局一般采用的策略：<strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局的第一准则。</strong></p><h3 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h3><blockquote><p>1、浮动和标准流的父盒子搭配。</p></blockquote><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p><blockquote><p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p></blockquote><p>一个盒子里面有多个盒子，如果其中一个盒子浮动了，那么其它兄弟也应该浮动，以防止引起问题。</p><p><strong>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。</strong></p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td align="center">right</td><td align="center">不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td align="center">both</td><td align="center">同时清除左右两侧浮动的影响</td></tr></tbody></table><p><strong>清除浮动的策略：闭合浮动</strong>，只让浮动在父盒子内部影响，不影响父盒子外面的其它盒子。</p><blockquote><p>为什么需要清除浮动？</p></blockquote><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响。</li></ul><h4 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h4><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</li></ul><h4 id="清除浮动方法"><a href="#清除浮动方法" class="headerlink" title="清除浮动方法"></a>清除浮动方法</h4><ul><li>额外标签法也称为隔墙法，是W3C推荐的做法</li><li><strong>父级添加overflow属性</strong></li><li><strong>父级添加after元素</strong></li><li><strong>父级添加双伪元素</strong></li></ul><blockquote><p>额外标签法</p></blockquote><p>额外标签法会在浮动元素末尾添加一个空的标签。例如：<code>&lt;div style="clear:both"&gt;&lt;/div&gt;</code>，或者其他标签（如<code>&lt;br/&gt;</code>等）。</p><blockquote><p>父级添加overflow</p></blockquote><p>给<strong>父级</strong>添加overflow属性，将其属性值设置为hidden、auto或scroll。</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><blockquote><p>:after伪元素法</p></blockquote><p><strong>:after</strong>方式是额外标签法的升级版。是给父元素添加以下样式：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    假设clearfix为父元素的一个类名*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*IE6、7专有*/</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：照顾低版本浏览器</li></ul><blockquote><p>双伪元素清除浮动</p></blockquote><p>也是给父元素添加样式，样式如下：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*    假设clearfix为父元素的一个类名*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfic</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。</p><p>定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其它盒子。</p><h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p><p><strong>定位 = 定位模式 + 边偏移</strong></p><p>定位模式用于指定一个元素在文档中的定位方式。</p><p>边偏移则决定了该元素的最终位置。</p><blockquote><p>定位模式</p></blockquote><p>定位模式决定元素的定位方式，它通过CSS的position属性来设置，其值可以分为以下四个：</p><table><thead><tr><th align="center">值</th><th align="center">语义</th></tr></thead><tbody><tr><td align="center">static</td><td align="center">静态定位</td></tr><tr><td align="center">relative</td><td align="center">相对定位</td></tr><tr><td align="center">absolute</td><td align="center">绝对定位</td></tr><tr><td align="center">fixed</td><td align="center">固定定位</td></tr></tbody></table><blockquote><p>边偏移</p></blockquote><p>边偏移就是定位盒子移动到最终位置。有top、bottom、left和right 4个属性。</p><table><thead><tr><th align="center">边偏移属性</th><th align="center">示例</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">top</td><td align="center">top: 80px</td><td align="center">顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td align="center">bottom</td><td align="center">bottom: 80px</td><td align="center">底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td align="center">left</td><td align="center">left: 80px</td><td align="center">左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td align="center">right</td><td align="center">right: 80px</td><td align="center">右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><blockquote><p>静态定位</p></blockquote><p>静态定位是元素的默认定位方式，勿定位的意思。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>静态定位按照标准流特性摆放位置，它没有边偏移</li><li>静态定位在布局时很少用到</li></ul><blockquote><p>相对定位</p></blockquote><p>相对定位是元素在移动位置的时候，相对与它原来的位置来说的。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>相对定位的特点</strong></p><ul><li>它是相对于自己原来的位置来移动的（移动位置时参照点是原来它本身的位置）</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它（不脱标，继续保留原来位置）</li></ul><blockquote><p>绝对定位</p></blockquote><p>绝对定位是元素在移动位置时，相对于它祖先元素而言的。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>绝对定位的特点</strong></p><ul><li>如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document文档）</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位的祖先元素作为参考点来移动位置</li><li>绝对定位不再占有原先的位置</li></ul><blockquote><p>子绝父相</p></blockquote><p>子级是绝对定位的话，父级要用相对定位。</p><ol><li>子级绝对定位，不会占用位置，可以放到父盒子里面的任何一个地方，不会影响其它的兄弟盒子。</li><li>父盒子需要加定位限制子盒子在父盒子内显示。</li><li>父盒子布局时，需要占用位置，因此父盒子只能是相对定位。</li></ol><p>相对定位经常用来作为绝对定位的父级。</p><p><strong>因为父级需要占用位置，因此使用相对定位；子盒子不需要占用位置，则使用绝对定位。</strong></p><p>子绝父相不是永远不变的，如果父元素不需要占用位置，子绝父绝也存在。</p><blockquote><p>固定定位</p></blockquote><p>固定定位是元素固定于浏览器可视区的位置。</p><p>主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>固定定位特点</strong></p><ol><li><p>以浏览器的可视窗口为参照点移动元素</p><ul><li>跟父元素没有任何关系</li><li>不随着滚动条的滚动而滚动</li></ul></li><li><p>固定定位不再占有原来的位置</p></li></ol><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p><p><strong>固定定位小技巧：固定在版心右侧位置。</strong></p><p>例如 回到顶部 样式，固定定位贴着版心（内容区域）右侧对齐。</p><ol><li>让固定定位的盒子left: 50%，放到浏览器可视区（可看作版心）的一半位置。</li><li>让固定定位的盒子margin-left：版心宽度的一半距离。多走版心宽度的一半位置。</li></ol><blockquote><p>粘性定位</p></blockquote><p>粘性（sticky）定位可以被认为是相对定位和固定定位的混合。</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>粘性定位的特点</strong></p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加top、left、right、bottom中的一个才有效</li></ul><p>与页面滚动搭配使用，兼容性较差，IE不支持。</p><h3 id="定位叠放次序"><a href="#定位叠放次序" class="headerlink" title="定位叠放次序"></a>定位叠放次序</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用<code>z-index</code>来控制盒子的前后次序（z轴）。 </p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>数值可以是正整数、负整数或0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有z-index属性</li></ul><h3 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h3><blockquote><p>绝对定位的盒子居中</p></blockquote><p>加了绝对定位的盒子不能通过<code>margin: 0 auto;</code>水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p><ol><li><code>left: 50%;</code>让盒子的左侧移动到父级元素的水平中心位置。</li><li><code>margin-left: -盒子本身宽度的一半px;</code>让盒子向左移动自身宽度的一半。</li></ol><blockquote><p>定位特殊特性</p></blockquote><p>绝对定位和固定定位类似于浮动。</p><ul><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ul><blockquote><p>脱标的盒子不会触发外边距塌陷</p></blockquote><p>浮动元素、绝对定位（固定定位）元素的都不会出发外边距合并的问题。</p><blockquote><p>绝对定位和固定定位会完全压住盒子</p></blockquote><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住标准流盒子里面的文字（图片）。</p><p>但是绝对定位（固定定位）会压住下面标准流所有的内容。</p><p>浮动之所以不会压住文字，是因为浮动产生的目的最初是为了做文字环绕效果的，文字会围绕浮动元素。</p><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p>本质：让一个元素在页面中隐藏或者显示出来。</p><ul><li>display显示隐藏，但是不保留原来位置</li><li>visibility显示隐藏，但是保留原来的位置</li><li>overflow溢出显示隐藏，但是只对于溢出的部分进行处理</li></ul><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><p>display属性用于设置一个元素应如何显示。</p><ul><li><strong>display: none;</strong>隐藏元素</li><li><strong>display: block;</strong>除了转换为块级元素之外，同时还有显示元素的意思</li></ul><p>display隐藏元素后，不再占有原来的位置。</p><h4 id="visibility可见性"><a href="#visibility可见性" class="headerlink" title="visibility可见性"></a>visibility可见性</h4><p>visibility属性用于指定一个元素应可见还是隐藏。</p><ul><li><strong>visibility: visible;</strong>元素可见</li><li><strong>visibility: hidden;</strong>元素隐藏</li></ul><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">inherit</td><td align="center">继承上一个父对象的可见性</td></tr><tr><td align="center">visible</td><td align="center">对象可视</td></tr><tr><td align="center">hidden</td><td align="center">对象隐藏</td></tr><tr><td align="center">collapse</td><td align="center">主要用来隐藏表格的行或列，隐藏的行或列可被其它内容使用</td></tr></tbody></table><p>visibility隐藏元素后，继续占有原来的位置。</p><p>如果隐藏元素想要原来的位置，就用<code>visibility: hidden</code></p><p>如果隐藏元素不想要原来的位置，就用<code>display: none</code></p><h4 id="overflow溢出"><a href="#overflow溢出" class="headerlink" title="overflow溢出"></a>overflow溢出</h4><p>overflow属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">visible</td><td align="center">不剪切内容也不添加滚动条</td></tr><tr><td align="center">hidden</td><td align="center">不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td align="center">scroll</td><td align="center">不管超出内容否，总是显示滚动条</td></tr><tr><td align="center">auto</td><td align="center">超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，溢出的内容都不显示出来，因为溢出的部分会影响布局。</p><p>但是如果有定位的盒子，需慎用<strong>overflow: hidden;</strong> ，因为它会隐藏多余的部分。</p><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><p>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><p>核心原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了。</p><h3 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h3><p>使用精灵图核心：</p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为sprites 精灵图 或者雪碧图。</li><li>移动背景图片位置，此时可以使用background-position。</li><li>移动的距离就是这个目标图片的x和y坐标。注意网页中的坐标有所不同。</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图时需要精确测量，每个小背景图片的大小和位置。</li></ol><p>综上，使用精灵图核心总结：</p><ul><li>精灵图主要针对小的背景图片使用。</li><li>主要借助于背景位置来实现（background-position）。</li><li>一般情况下精灵图都是负值。（网页中的坐标：x轴右边是正值，左边是负值；y轴下是正值，上是负值。）</li></ul><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>字体图标使用场景：主要用于显示网页中通用、常用的一些小图标。</p><p>精灵图有诸多优点，但是缺点也很明显、</p><ol><li>图片文件还是比较大的。</li><li>图片本身放大和缩小会失真。</li><li>一旦图片制作完毕，需要更换非常复杂。</li></ol><p>字体图标（iconfont）的出现很好地解决了上述问题。</p><p>字体图标可以为前端提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</p><blockquote><p>字体图标的优点</p></blockquote><ul><li>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求。</li><li>灵活性：本质其实就是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等。</li><li>兼容性：几乎支持所有的浏览器。</li></ul><p>注意：字体图标不能替代精灵图技术，只是对工作中图标部分技术的提升和优化。</p><p><strong>总结</strong>：</p><ol><li><p>若遇到一些结构和样式比较简单的小图标，就是字体图标。</p><p>若遇到一些结构和样式复杂一点的小图片，就用精灵图。</p></li></ol><h2 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h2><p>使用div标签实现一个red颜色的三角形。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h2><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><pre class=" language-css"><code class="language-css"><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">default</td><td align="center">箭头，默认</td></tr><tr><td align="center">pointer</td><td align="center">小手</td></tr><tr><td align="center">move</td><td align="center">移动</td></tr><tr><td align="center">text</td><td align="center">文本</td></tr><tr><td align="center">not-allowed</td><td align="center">禁止</td></tr></tbody></table><h2 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h2><p>给表单添加<code>outline: 0;</code>或者<code>outline: none;</code>样式之后，就可以去掉默认的蓝色边框。</p><pre class=" language-css"><code class="language-css"><span class="token selector">input </span><span class="token punctuation">{</span>    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="防止拖拽文本域-resize"><a href="#防止拖拽文本域-resize" class="headerlink" title="防止拖拽文本域 resize"></a>防止拖拽文本域 resize</h2><p>实际开发中，文本域右下角是不可以拖拽的。</p><pre class=" language-css"><code class="language-css"><span class="token selector">textarea </span><span class="token punctuation">{</span>    <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>文本域标签放在一行，不然文本域中会存在间隙。</p><h2 id="vertical-align属性"><a href="#vertical-align属性" class="headerlink" title="vertical-align属性"></a>vertical-align属性</h2><p>vertical-align属性经常用于设置图片或者表单（行内块元素）和文字垂直对齐。（用于设置一个元素的垂直对齐方式，但是它只针对行内元素或者行内块元素有效）</p><pre class=" language-css"><code class="language-css"><span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline | top | middle | bottom</code></pre><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">baseline</td><td align="center">默认，元素放置在父元素的基线上</td></tr><tr><td align="center">top</td><td align="center">把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td align="center">middle</td><td align="center">把此元素放置在父元素的中部</td></tr><tr><td align="center">bottom</td><td align="center">把元素的顶端与行中最低的元素的顶端对齐</td></tr></tbody></table><blockquote><p>解决图片底部默认空白缝隙问题</p></blockquote><p>图片和文字默认是基线对齐的，所以图片底部会存在空白缝隙。</p><p><strong>解决方法</strong></p><ul><li>给图片添加<code>vertical-align: middle | top | bottom</code>等。</li><li>把图片转换为块级元素<code>display: block;</code>。</li></ul><h2 id="溢出的文字-省略号显示"><a href="#溢出的文字-省略号显示" class="headerlink" title="溢出的文字 省略号显示"></a>溢出的文字 省略号显示</h2><blockquote><p>单行文本溢出 省略号显示</p></blockquote><p>单行文本溢出显示省略号，必须满足三个条件：</p><ol><li><p>先强制一行内显示文本。</p><pre class=" language-css"><code class="language-css"><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*默认normal自动换行*/</span></code></pre></li><li><p>超出的部分隐藏。</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></code></pre></li><li><p>文字用省略号替代超出的部分。</p><pre class=" language-css"><code class="language-css"><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span></code></pre></li></ol><blockquote><p>多行文本溢出显示省略号</p></blockquote><p>多行文本溢出显示省略号，有较大兼容性问题，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*弹性伸缩盒子模型显示*/</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*限制在一个块元素显示的文本的行数*/</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置或检索伸缩盒对象的子元素的排列方式*/</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span></code></pre><h2 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h2><blockquote><p>margin负值运用</p></blockquote><ol><li>让盒子margin往左侧移动-1px，此时正好压住相邻盒子边框。</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有定位，则加相对定位【保留位置】，如果有定位，则加z-index）。</li></ol><blockquote><p>CSS三角强化</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*只保留右边的边框有颜色*/</span><span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*样式都是实现*/</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*上边框宽度要大，右边框宽度稍小，其余边框为0*/</span><span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">22</span>px <span class="token number">8</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><blockquote><p>CSS初始化</p></blockquote><p>不同浏览器对一些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，需要对CSS进行初始化。</p><p>CSS初始化就是重设浏览器样式，也称为CSS reset。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*把所有的标签内外边距清零*/</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*em 和 i 斜体的文字不倾斜*/</span><span class="token selector">em,i </span><span class="token punctuation">{</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*去除li的小圆点*/</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*border: 0; 兼容低版本浏览器，若图片外包含了链接存在边框的问题*/</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*消除图片底侧存在缝隙的问题*/</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*当鼠标经过button按钮时，鼠标变成小手*/</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#c81623</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,<span class="token string">"\5B8B\4F53"</span>,sans-serif<span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*抗锯齿性，让文字显示更加清晰*/</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span>antialiased<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span><span class="token number">12</span>px/<span class="token number">1.5</span> Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,<span class="token string">"\5B8B\4F53"</span>,sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span>,<span class="token class">.none</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Unicode编码字体</strong></p><p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时出现乱码的问题。</p><p>例如：</p><ul><li>黑体<code>\9ED1\4F53</code></li><li>宋体<code>\5B8B\4F53</code></li><li>微软雅黑<code>5FAE\8F6F\96C5\9ED1</code></li></ul><h1 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h1><h2 id="新增的语义化标签"><a href="#新增的语义化标签" class="headerlink" title="新增的语义化标签"></a>新增的语义化标签</h2><ul><li><code>&lt;header&gt;</code>头部标签</li><li><code>&lt;nav&gt;</code>导航标签</li><li><code>&lt;article&gt;</code>内部标签</li><li><code>&lt;section&gt;</code>定义文档某个区域</li><li><code>&lt;aside&gt;</code>侧边栏标签</li><li><code>&lt;footer&gt;</code>尾部标签</li></ul><p><img src="/archives/62511120/image-20210316102712156-1616053819019.png" alt=""></p><p><strong>注</strong></p><ul><li>这种语义化标准主要是针对搜索引擎的</li><li>这种新标签页面中可以使用多次</li><li>在IE9中，需要把这些元素转换为块级元素</li></ul><h2 id="新增的多媒体标签"><a href="#新增的多媒体标签" class="headerlink" title="新增的多媒体标签"></a>新增的多媒体标签</h2><blockquote><p>视频&lt;video&gt;</p></blockquote><p>当前<code>&lt;video&gt;</code>元素支持三种视频格式（mp4、webm、ogg），但尽量使用mp4格式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件地址<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><blockquote><p>音频&lt;audio&gt;</p></blockquote><p>当前<code>&lt;audio&gt;</code>元素支持三种音频格式（mp3、wav、ogg）。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件地址<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><h2 id="新增的input类型"><a href="#新增的input类型" class="headerlink" title="新增的input类型"></a>新增的input类型</h2><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type=”email”</td><td align="center">限制用户输入必须为Email类型</td></tr><tr><td align="center">type=”url”</td><td align="center">限制用户输入必须为url类型</td></tr><tr><td align="center">type=”date”</td><td align="center">限制用户输入必须为日期类型</td></tr><tr><td align="center">type=”time”</td><td align="center">限制用户输入必须为时间类型</td></tr><tr><td align="center">type=”month”</td><td align="center">限制用户输入必须为月类型</td></tr><tr><td align="center">type=”week”</td><td align="center">限制用户输入必须为周类型</td></tr><tr><td align="center">type=”number”</td><td align="center">限制用户输入必须为数字类型</td></tr><tr><td align="center">type=”tel”</td><td align="center">手机号码</td></tr><tr><td align="center">type=”search”</td><td align="center">搜索框</td></tr><tr><td align="center">type=”color”</td><td align="center">生成一个颜色选择表单</td></tr></tbody></table><h2 id="新增的表单属性"><a href="#新增的表单属性" class="headerlink" title="新增的表单属性"></a>新增的表单属性</h2><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">required</td><td align="center">表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td align="center">placeholder</td><td align="center">提示文本</td><td align="center">表单的提示信息，存在默认值将不显示</td></tr><tr><td align="center">autofocus</td><td align="center">autofocus</td><td align="center">自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td align="center">autocomplete</td><td align="center">off/on</td><td align="center">当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示在字段中填写的选项。默认已经打开，如autocomplete=”on”，关闭autocomplete=”off”。需要放在表单内，同时加上name属性，同时成功提交。</td></tr><tr><td align="center">multiple</td><td align="center">multiple</td><td align="center">可以多选文件提交</td></tr></tbody></table><p>可以通过以下设置方式修改placeholder里面的字体颜色：</p><pre class=" language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-element">::placeholder</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="CSS3的新特性"><a href="#CSS3的新特性" class="headerlink" title="CSS3的新特性"></a>CSS3的新特性</h1><h2 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a>新增选择器</h2><blockquote><p>属性选择器</p></blockquote><p>属性选择器可以根据元素特定属性的来选择元素，这样就可以不用借助类或id选择器。</p><table><thead><tr><th align="center">选择符</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">E[alt]</td><td align="center">选择具有alt属性的E元素</td></tr><tr><td align="center">E[att=”val”]</td><td align="center">选择具有att属性且属性值等于val的E元素</td></tr><tr><td align="center">E[att^=”val”]</td><td align="center">匹配具有att属性且只以val开头的E元素</td></tr><tr><td align="center">E[att$=”val”]</td><td align="center">匹配具有att属性且值以val结尾的E元素</td></tr><tr><td align="center">E[att*=”val”]</td><td align="center">匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>结构伪类选择器主要根据文档结构来选择元素，常用于根据父级选择器里面的子元素。</p><table><thead><tr><th align="center">选择符</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">E:first-child</td><td align="center">匹配父元素中的第一个子元素E</td></tr><tr><td align="center">E:last-child</td><td align="center">匹配父元素中最后一个E元素</td></tr><tr><td align="center">E:nth-child(n)</td><td align="center">匹配父元素中的第n个子元素E</td></tr><tr><td align="center">E:first-of-type</td><td align="center">指定类型E的第一个</td></tr><tr><td align="center">E:last-of-type</td><td align="center">指定类型E的最后一个</td></tr><tr><td align="center">E:nth-of-type(n)</td><td align="center">指定类型E的第n个</td></tr></tbody></table><p><strong>nth-child(n)</strong>选择某个父元素的一个或多个特定的子元素。</p><ul><li>n可以是数字、关键字和公式</li><li>n如果是数字，就是选择第n个子元素，里面数字</li><li>n可以是关键字：even偶数，odd奇数</li><li>n可以是公式：常见的公式如若n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略</li></ul><table><thead><tr><th align="center">公式</th><th align="center">取值</th></tr></thead><tbody><tr><td align="center">2n</td><td align="center">偶数</td></tr><tr><td align="center">2n+1</td><td align="center">奇数</td></tr><tr><td align="center">5n</td><td align="center">5 10 15…</td></tr><tr><td align="center">n+5</td><td align="center">从第5个开始（包含第5个）到最后</td></tr><tr><td align="center">-n+5</td><td align="center">前5个（包含第5个）…</td></tr></tbody></table><p><code>nth-child(n)</code>会把所有的盒子都排列序号。执行时先看第一个:nth-child(1)，之后回去看前面。</p><p><code>nth-of-type(n)</code>会把指定元素的盒子排列序号，执行顺序也是先看<code>:</code>前面指定的元素，之后回去看:nth-of-type(n)。</p><ul><li>结构伪类选择器一般用于选择父级里面的第几个孩子</li><li>nth-child对父元素里面所有孩子排序选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type对父元素里面指定子元素进行排序选择。先去匹配E，然后在根据E找第n个孩子</li><li>关于nth-child(n)里的n是从0开始计算的</li><li>若是无序列表，使用nth-child较多</li><li>类选择器、属性选择器、伪类选择器权重为10</li></ul><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>伪元素选择器可以利用CSS创建新标签元素，而不需要HTML，从而简化HTML结构。</p><table><thead><tr><th align="center">选择符</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">::before</td><td align="center">在元素内部的前面插入内容</td></tr><tr><td align="center">::after</td><td align="center">在元素内部的后面插入内容</td></tr></tbody></table><p><strong>注：</strong></p><ul><li>before和after创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，故称之为伪元素</li><li>语法：<code>element::before {}</code></li><li>before和after必须有content属性</li><li>before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</li><li>伪元素选择器和标签选择器一样，权重为1</li></ul><h2 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h2><p>CSS3中可以通过<code>box-sizing</code>来指定盒模型，有2个值：context-box、border-box，这样计算盒子大小的方式就发生了改变。</p><ul><li>*<em>box-sizing: content-box; *</em>盒子大小为width+padding+border（之前默认的计算方式）</li><li><strong>box-sizing: border-box;</strong>盒子大小为width</li></ul><p>如果盒子模型修改为<code>box-sizing: border-box;</code>，那padding和border就不会撑大盒子（前提padding和border不会超过width宽度）。</p><h2 id="图片变模糊"><a href="#图片变模糊" class="headerlink" title="图片变模糊"></a>图片变模糊</h2><p><strong>CSS3滤镜filter</strong></p><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素。</p><pre class=" language-css"><code class="language-css"><span class="token property">filter</span><span class="token punctuation">:</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>例如：</p><pre class=" language-css"><code class="language-css"><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*blur模糊处理，数值越大越模糊*/</span></code></pre><h2 id="CSS3-calc函数"><a href="#CSS3-calc函数" class="headerlink" title="CSS3 calc函数"></a>CSS3 calc函数</h2><p><strong>calc()</strong>此CSS函数在声明CSS属性值时执行一些计算。</p><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>括号里面可以使用+ - * /来进行计算。</p><h2 id="CSS3过渡"><a href="#CSS3过渡" class="headerlink" title="CSS3过渡"></a>CSS3过渡</h2><p>过渡（transition）是CSS3中具有颠覆性的特征之一，在不使用Flash或Javascript的情况下，当元素从一种样式变化为另一种样式时为元素添加效果。</p><p>过渡动画：是从一个状态 渐渐的过渡到另外一个状态。</p><p>经常同<code>:hover</code>一起搭配使用。</p><pre class=" language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> 要过度的属性 花费时间 运动曲线 何时开始<span class="token punctuation">;</span></code></pre><ul><li>属性：想要变化的css属性，宽度高度 背景颜色 内外边距皆可。若想要所有的属性都过度，使用all即可</li><li>花费时间：单位是秒（必须有单位），例如0.5s</li><li>运动曲线：默认是ease（可以省略）</li><li>何时开始：单位是秒（必须有单位）可以设置延迟触发时间，默认0s（可省略）</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*多属性过渡，用逗号隔开*/</span>    <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">.5</span>s ease <span class="token number">1</span>s,htight <span class="token number">.5</span>s ease <span class="token number">1</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p>转换（transform）是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果。</p><p>转换可以简单理解为变形。</p><ul><li>移动：translate</li><li>旋转：rotate</li><li>缩放：scale</li></ul><p>2D转换是改变标签在二维平面上的位置和形状的一种技术。</p><h3 id="移动translate"><a href="#移动translate" class="headerlink" title="移动translate"></a>移动translate</h3><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*可分开写*/</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>定义2D转换中的移动，沿着X和Y轴移动元素</li><li>translate最大的优点：不会影响到其它元素的位置</li><li>translate中的百分比单位是相对于自身元素 translate: (50%,50%);</li><li>对行内标签没有效果</li></ul><h3 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h3><p>2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转。</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>度数<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>rotate里面是度数，单位是deg，例如 rotate(45deg)</li><li>角度为正时，顺时针；为负时，逆时针</li><li>默认旋转的中心点时元素的中心点</li></ul><h3 id="转换中心点transform-origin"><a href="#转换中心点transform-origin" class="headerlink" title="转换中心点transform-origin"></a>转换中心点transform-origin</h3><pre class=" language-css"><code class="language-css"><span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre><ul><li>参数x和y用空格隔开</li><li>x、y默认转换的中心点时元素的中心点(50% 50%)</li><li>可给x、y设置像素或方位名词（top、bottom、left、right、center）</li></ul><h3 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h3><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>参数x、y用逗号隔开</li><li><code>transform: scale(1,1);</code>宽和高都放大一倍，相对于没有放大</li><li><code>transform: scale(2,2);</code>宽和高都放大了2倍</li><li><code>transform:  scale(2);</code>只写一个参数，第2个参数则和第一个参数一样，相当于scale(2,2)</li><li><code>transform: scale(0.5,0.5);</code>缩小</li><li>scale缩放最大的优势是可以设置转换中心点缩放，默认以中心点缩放，而且不影响其它盒子</li></ul><h3 id="2D转换综合写法"><a href="#2D转换综合写法" class="headerlink" title="2D转换综合写法"></a>2D转换综合写法</h3><p>同时使用多个转换，其格式如下：</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">...</span><span class="token punctuation">;</span></code></pre><ul><li>上述顺序的写法会影响转换的效果。（先旋转会改变坐标轴方向）</li><li>同时有位移和其它属性时，需将位移放到最前</li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来控制一个或一组动画，常用来实现复杂的动画效果。</p><p>相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>制作动画分为两步：</p><ol><li>先定义动画</li><li>在使用（调用）动画</li></ol><blockquote><p>1、用keyframes定义动画（类似定义类选择器）</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*开始状态*/</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*结束状态*/</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">480</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>动画序列</strong></p><ul><li>0%是动画的开始，100%是动画的完成。这样的规则就是动画序列</li><li>在<code>@keyframes</code>中规定某项CSS样式，就能创建由当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。可以改变任意多的样式任意多的次数</li><li>用百分比来规定变化发生的时间，或用关键词<code>from</code>和<code>to</code>，等同于0%和100%</li></ul><blockquote><p>2、元素使用动画</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*调用动画*/</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> 动画名称<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*持续时间*/</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">@keyframes</td><td align="center">规定动画</td></tr><tr><td align="center">animation</td><td align="center">所有动画属性的简写属性，除了animation-play-state属性</td></tr><tr><td align="center">animation-name</td><td align="center">规定@keyframes动画的名称（必须）</td></tr><tr><td align="center">animation-duration</td><td align="center">规定动画完成一个周期所花费的秒或毫秒，默认是0（必须）</td></tr><tr><td align="center">animation-timing-function</td><td align="center">规定动画的速度曲线，默认是ease</td></tr><tr><td align="center">animation-delay</td><td align="center">规定动画何时开始，默认是0</td></tr><tr><td align="center">animation-direction</td><td align="center">规定动画是否在下一个周期逆向播放，默认是normal，alternate逆播放</td></tr><tr><td align="center">animation-iteration-count</td><td align="center">规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td align="center">animation-play-state</td><td align="center">规定动画是否正在运行或暂停，默认是正在运行running，暂停pause</td></tr><tr><td align="center">animation-fill-mode</td><td align="center">规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><pre class=" language-css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态</code></pre><ul><li>简写属性里面不包含<code>animation-play-state</code></li><li>暂停动画：<code>animation-play-state: puased</code>; 经常和鼠标经过等其它配合使用</li><li>想要动画返回来，不是直接跳回来：<code>animation-direction: alternate;</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards;</code></li></ul><h3 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h3><p>animation-timing-function：规定动画的速度曲线，默认是ease。</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">linear</td><td align="center">动画从头到尾的速度是相同的，匀速</td></tr><tr><td align="center">ease</td><td align="center">默认，动画以低速开始，然后加快，在结束前变慢</td></tr><tr><td align="center">ease-in</td><td align="center">动画以低速开始</td></tr><tr><td align="center">ease-out</td><td align="center">动画以低速结束</td></tr><tr><td align="center">ease-in-out</td><td align="center">动画以低速开始和结束</td></tr><tr><td align="center">steps()</td><td align="center">指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><ul><li>3D位移（移动）：translate3d(x,y,z)</li><li>3D旋转：rotate3d(x,y,z)</li><li>透视：perspective</li><li>3D呈现：transfrom-style</li></ul><p><strong>特点</strong></p><ul><li>近大远小</li><li>物体后面遮挡不可见</li></ul><h3 id="三维坐标系"><a href="#三维坐标系" class="headerlink" title="三维坐标系"></a>三维坐标系</h3><p>三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成。</p><p><img src="/archives/62511120/image-20210317215014214-1616053819019.png" alt=""></p><ul><li>x轴：水平向右  <strong>x右边是正值，左边是负值</strong></li><li>y轴：垂直向下 <strong>y下面是正值，上面是负值</strong></li><li>z轴：垂直屏幕 <strong>往外面是正值，往里面是负值</strong></li></ul><h3 id="3D移动translate3d"><a href="#3D移动translate3d" class="headerlink" title="3D移动translate3d"></a>3D移动translate3d</h3><p>3D移动是在2D移动的基础上多加了一个可以移动的方向，就是z轴方向。</p><ul><li><code>translform: translateX(100px)</code>：仅仅在x轴上移动</li><li><code>transform: translateY(100px)</code>：仅仅在y轴上移动</li><li><code>transform: translateZ(100px)</code>：仅仅在z轴上移动（一般使用px单位）</li><li><code>transform: translate3d(x,y,z)</code>：其中x、y、z分别指要移动的轴的方向上的距离</li></ul><h3 id="透视perspective"><a href="#透视perspective" class="headerlink" title="透视perspective"></a>透视perspective</h3><p>在2D平面产生近大远小视觉立体，但是只是效果二维。</p><ul><li>如果想在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li><li>透视，也称为视距：视距就是人的眼睛到屏幕的距离。</li><li>距离视觉点越近的，在电脑平面成像越大，越远成像越小。</li><li>透视的单位是像素。</li></ul><p><img src="/archives/62511120/image-20210317224723448-1616053819019.png" alt=""></p><blockquote><p>透视写在被观察元素的<strong>父盒子</strong>上面的</p></blockquote><p><strong>d</strong>：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p><p><strong>z</strong>：就是z轴，物体距离屏幕的距离，z轴越大（正值），看到的物体就越大。</p><h3 id="translateZ"><a href="#translateZ" class="headerlink" title="translateZ"></a>translateZ</h3><p><code>transform: translateZ(100px)</code>：仅仅是在z轴上移动。有了透视，就能清楚地看到translateZ引起的变化了。</p><h3 id="3D旋转rotate3d"><a href="#3D旋转rotate3d" class="headerlink" title="3D旋转rotate3d"></a>3D旋转rotate3d</h3><p>3D旋转指可以让元素在三维平面内沿着x轴，y轴，z轴或者自定义轴进行旋转。</p><ul><li><code>transform: rotateX(45deg)</code>：沿着x轴正方向旋转45度</li><li><code>transform: rotateY(45deg)</code>：沿着y轴正方向旋转45度</li><li><code>transform: rotateZ(45deg)</code>：沿着z轴正方向旋转45度</li><li><code>transform: rotate3d(x,y,z,deg)</code>：沿着自定义轴旋转，deg为旋转的角度；x、y、z表示旋转轴的矢量，是表示是否希望沿着该轴旋转</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*沿着x轴旋转45度*/</span><span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*沿着x轴和y轴的对角线旋转45度*/</span><span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="左手准则"><a href="#左手准则" class="headerlink" title="左手准则"></a>左手准则</h3><blockquote><p>x轴  rotateX</p></blockquote><ul><li>左手的手拇指指向x轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着x轴旋转的（正）方向</li></ul><blockquote><p>y轴  rotateY</p></blockquote><ul><li>左手的手拇指指向y轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着y轴旋转的方向（正值）</li></ul><blockquote><p>z轴   rotateZ（不需要透视，平面上旋转）</p></blockquote><ul><li>左手的手拇指指向z轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着z轴旋转的方向（正值）</li></ul><h3 id="3D呈现transform-style"><a href="#3D呈现transform-style" class="headerlink" title="3D呈现transform-style"></a>3D呈现transform-style</h3><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat;</code>默认，子元素不开启3d立体空间</li><li><code>transform-style: preserve-3d;</code>子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul><h3 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h3><p>浏览器私有前缀是为了兼容老版本的写法，新版本的浏览器无须添加。</p><p><strong>私有前缀</strong></p><ul><li><strong>-moz-</strong>：代表Firefox浏览器私有属性</li><li><strong>-ms-</strong>：代表IE浏览器私有属性</li><li><strong>-webkit-</strong>：代表safari、chrome私有属性</li><li><strong>-o-</strong>：代表Opera私有属性</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*圆角边框*/</span><span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">-o-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV14J4114768&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员pink老师&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://lskjwp.gitee.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://lskjwp.gitee.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/4a3d459a/"/>
    <id>https://lskjwp.gitee.io/archives/4a3d459a/</id>
    <published>2020-11-26T03:17:12.000Z</published>
    <updated>2021-11-14T07:16:12.446Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/av838132893" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的<a href="https://baike.baidu.com/item/镜像/1574" target="_blank" rel="noopener">镜像</a>中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458" target="_blank" rel="noopener">Windows</a> 机器上，也可以实现<a href="https://baike.baidu.com/item/虚拟化/547949" target="_blank" rel="noopener">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/沙箱/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><p>docker是基于Go语言开发的。</p><p>官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p><p>文档地址：<a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a></p><p>仓库地址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><blockquote><p>容器化技术</p></blockquote><p>容器技术:有效的将单个操作系统的资源划分到孤立的组中，以便更好的在孤立的组之间平衡有冲突的资源使用需求，这种技术就是容器技术。</p><p>容器化技术不是模拟一个完整的操作系统。</p><p><strong>Docker与虚拟机技术的区别：</strong></p><ul><li>传统虚拟机，虚拟出一套硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件。</li><li>容器内的应用直接运行在宿主机的内核中，容器是没有自己的内核的，也没有虚拟的硬件，故轻便。</li><li>每个容器间是互相隔离的，每个容器内都有一个属于自己的文件系统，互不影响。</li></ul><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快速的交互和部署。</strong></p><p>Docker，打包镜像，发布测试，一键运行。</p><p><strong>更便捷的升级和扩容。</strong></p><p><strong>更简单的系统运维。</strong></p><p><strong>更高效的计算资源利用。</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多容器实例。服务器的性能可以被压榨到极致。</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="/archives/4a3d459a/architecture.svg" alt="Docker Architecture Diagram"></p><p><strong>镜像（image）</strong></p><p>docker镜像就好比是一个模板，可以通过这个 模板来创建容器服务，tomact镜像-&gt;run运行-&gt;Tomact01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）</p><p><strong>容器（container）</strong></p><p>Docker利用容器技术，独立运行一个或一个组应用，通过镜像来创建的。</p><p>启动、停止、删除=&gt;基本命令</p><p><strong>仓库（repository）</strong></p><p>仓库就是存放镜像的地方。</p><p>仓库分为共有仓库和私有仓库。</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote><p>环境准备</p></blockquote><p>CentOS7.8、XShell</p><blockquote><p>环境查看</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 系统内核需升级到2.10以上</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r</span>3.10.0-1127.19.1.el7.x86_64</code></pre><blockquote><p>安装</p></blockquote><p>文档地址：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><p><strong>1、卸载旧版本</strong></p><pre class=" language-bash"><code class="language-bash">yum remove docker \                   docker-client \                   docker-client-latest \                   docker-common \                   docker-latest \                   docker-latest-logrotate \                   docker-logrotate \                   docker-engine</code></pre><p><strong>2、需要的安装包</strong></p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils</code></pre><p><strong>3、设置镜像的仓库</strong></p><p>官方：</p><pre class=" language-bash"><code class="language-bash">yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>阿里云镜像：</p><pre class=" language-bash"><code class="language-bash">yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><blockquote><p>更新yum软件包索引</p></blockquote><pre class=" language-bash"><code class="language-bash">yum makecache fast</code></pre><p><strong>4、安装docker</strong></p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre><p><code>docker-ce</code>社区版，<code>ee</code>是企业版。</p><p><strong>5、启动docker</strong></p><pre class=" language-bash"><code class="language-bash">systemctl start docker</code></pre><p><strong>6、查看docker是否安装成功</strong></p><pre class=" language-bash"><code class="language-bash">docker version</code></pre><p><strong>7、hello-world测试</strong></p><pre class=" language-bash"><code class="language-bash">docker run hello-world</code></pre><p><img src="/archives/4a3d459a/image-20201122212102654.png" alt="hello-world"></p><p><img src="/archives/4a3d459a/image-20201122215026702.png" alt="hello-world流程"></p><p><strong>8、查看一下下载的这个hello-world镜像</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        10 months ago       13.3kB<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><blockquote><p>卸载docker</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true"># 删除资源</span><span class="token function">rm</span> -rf /var/lib/docker<span class="token comment" spellcheck="true"># /var/lib/docker docker的默认工作路径</span></code></pre><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p>1、登录阿里云后，进入控制台，点击产品与服务。</p><p><img src="/archives/4a3d459a/image-20201122213446826.png" alt="容器镜像服务"></p><p>2、首次使用，需要开通，设置Registry登录密码。</p><p>3、找到镜像加速地址。</p><p><img src="/archives/4a3d459a/image-20201122213746315.png" alt="镜像加速地址"></p><p>4、配置使用。</p><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://m0dved78.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>Docker是一个Client-Server结构的系统，Docker的守护进程服务运行在主机上。通过Socket丛客户端访问。</p><p>DockerServer接收到Docker-Client指令，就会执行命令。</p><p><img src="/archives/4a3d459a/image-20201123093120844.png" alt=""></p><blockquote><p>Docker为什么比VM快？</p></blockquote><p><img src="/archives/4a3d459a/u=1473564113,4288905819&amp;fm=26&amp;gp=0.jpg" alt=""></p><p>1、Docker有着比虚拟机更少的抽象层。</p><p>2、Docker利用的是宿主机的内核，VM需要的是Guest OS。</p><p>当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统，避免了引导、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统则省略了这个过程，因此新建一个Docker容器只需要几秒钟。</p><table><thead><tr><th align="center"></th><th align="center">Docker容器</th><th align="center">虚拟机（VM）</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">与宿主机共享OS</td><td align="center">宿主机OS上运行宿主机OS</td></tr><tr><td align="center">存储大小</td><td align="center">镜像小，便于存储与传输</td><td align="center">镜像庞大（vmdk等）</td></tr><tr><td align="center">运行性能</td><td align="center">几乎无额外性能损失</td><td align="center">操作系统额外的cpu、内存消耗</td></tr><tr><td align="center">移植性</td><td align="center">轻便、灵活、适用于Linux</td><td align="center">笨重、与虚拟化技术耦合度高</td></tr><tr><td align="center">硬件亲和性</td><td align="center">面向软件开发者</td><td align="center">面向硬件运维者</td></tr></tbody></table><h1 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h1><p><img src="/archives/4a3d459a/u=3467122840,3410989387&amp;fm=26&amp;gp=0.jpg" alt=""></p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><pre class=" language-bash"><code class="language-bash">docker version <span class="token comment" spellcheck="true">#显示docker的版本信息</span>docker info <span class="token comment" spellcheck="true">#显示docker的系统信息，包括镜像和容器数量</span>docker 命令 --help <span class="token comment" spellcheck="true">#帮助命令</span></code></pre><p>文档地址：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><p><strong>查看所有本地的主机上的镜像</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        10 months ago       13.3kB</code></pre><p><code>REPOSITORY</code>  镜像的仓库源<br><code>TAG</code>         镜像的标签<br><code>IMAGE ID</code>    镜像的id<br><code>CREATED</code>     镜像的创建时间<br><code>SIZE</code>        镜像的大小</p><blockquote><p>可选项</p></blockquote><pre class=" language-bash"><code class="language-bash">Options:  -a, --all             列出所有的镜像      --digests         Show digests  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print images using a Go template      --no-trunc        Don't truncate output  -q, --quiet           只显示镜像的id</code></pre><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><p><strong>搜索镜像</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql</span>NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   10202               <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mariadb                           MariaDB is a community-developed fork of MyS…   3753                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mysql/mysql-server                Optimized MySQL Server Docker images. Create…   744                                     <span class="token punctuation">[</span>OK<span class="token punctuation">]</span></code></pre><blockquote><p>可选项</p></blockquote><pre class=" language-bash"><code class="language-bash">Options:  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print search using a Go template      --limit int       Max number of search results <span class="token punctuation">(</span>default 25<span class="token punctuation">)</span>      --no-trunc        Don't truncate output</code></pre><p>通过搜藏来过滤</p><pre class=" language-bash"><code class="language-bash">--filter<span class="token operator">=</span>STARS<span class="token operator">=</span>3000 <span class="token comment" spellcheck="true">#搜索出来的镜像就是STARS大于3000的</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql --filter=STARS=3000</span>NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql               MySQL is a widely used, open-source relation…   10202               <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mariadb             MariaDB is a community-developed fork of MyS…   3753                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span> </code></pre><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><p><strong>下载镜像</strong></p><p><code>docker pull 镜像名[:tag]</code></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql</span>Using default tag: latest <span class="token comment" spellcheck="true">#如果不写tag，默认就是latest</span>latest: Pulling from library/mysql852e50cd189d: Pull complete  <span class="token comment" spellcheck="true">#分层下载，docker image的核心，联合文件系统</span>29969ddb0ffb: Pull complete a43f41a44c48: Pull complete 5cdd802543a3: Pull complete b79b040de953: Pull complete 938c64119969: Pull complete 7689ec51a0d9: Pull complete a880ba7c411f: Pull complete 984f656ec6ca: Pull complete 9f497bce458a: Pull complete b9940f97694b: Pull complete 2f069358dc96: Pull complete Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093 <span class="token comment" spellcheck="true">#签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest <span class="token comment" spellcheck="true">#真实地址</span></code></pre><p><code>docker pull mysql</code> == <code>docker pull docker.io/library/mysql:latest</code></p><p><strong>指定版本下载</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span>5.7: Pulling from library/mysql852e50cd189d: Already exists 29969ddb0ffb: Already exists a43f41a44c48: Already exists 5cdd802543a3: Already exists b79b040de953: Already exists 938c64119969: Already exists 7689ec51a0d9: Already exists 36bd6224d58f: Pull complete cab9d3fa4c8c: Pull complete 1b741e1c47de: Pull complete aac9d11987ac: Pull complete Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88eStatus: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7</code></pre><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><p><strong>删除镜像</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               5.7                 ae0658fdbad5        2 days ago          449MBmysql               latest              dd7265748b5d        2 days ago          545MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker rmi -f dd7265748b5d</span>Untagged: mysql:latestUntagged: mysql@sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093Deleted: sha256:dd7265748b5dc3211208fb9aa232cef8d3fefd5d9a2a80d87407b8ea649e571cDeleted: sha256:aac9a624212bf416c3b41a62212caf12ed3c578d6b17b0f15be13a7dab56628dDeleted: sha256:1bf3ce09276e9e128108b166121e5d04abd16e7de7473b53b3018c6db0cf23ffDeleted: sha256:24c6444cea460c3cc2f4e0385e3e97819a0672a54a361921f95d4582583abd59Deleted: sha256:77585ebe3eaa035694084b3c5937fe82b8972aae1e6c6070fc4d7bc391d10928Deleted: sha256:1cfd539163ceb17f7bb85a0da968714fe9258b75dbf73f5ad45392a45cfd34b7<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               5.7                 ae0658fdbad5        2 days ago          449MBhello-world         latest              bf756fb1ae65        10 months ago       13.3kB<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker rmi -f $(docker images -aq)</span>Untagged: mysql:5.7Untagged: mysql@sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88eDeleted: sha256:ae0658fdbad5fb1c9413c998d8a573eeb5d16713463992005029c591e6400d02Deleted: sha256:a2cf831f4221764f4484ff0df961b54f1f949ed78220de1b24046843c55ac40fDeleted: sha256:0a7adcc95a91b1ec2beab283e0bfce5ccd6df590bd5a5e894954fcf27571e7f5Deleted: sha256:0fae465cbacf7c99aa90bc286689bc88a35d086f37fd931e03966d312d5dfb10Deleted: sha256:23af125b9e54a94c064bdfacc2414b1c8fba288aff48308e8117beb08b38cb19Deleted: sha256:c37f414ac8d2b5e5d39f159a6dffd30b279c1268f30186cee5da721e451726eaDeleted: sha256:955b3c214bccf3ee2a7930768137fd7ed6a72677334be67a07c78a622abd318aDeleted: sha256:a2e35a0fdb20100365e2fb26c65357fcf926ac7990bf9074a51cbac5a8358d7eDeleted: sha256:8c3a028fc66f360ce6ce6c206786df68fac4c24257474cbe4f67eda0ac21efd6Deleted: sha256:0a6d37fabaceb4faa555e729a7d97cb6ee193cb97789a213907a3d3c156d7e35Deleted: sha256:579519c51de1afe1e29d284b1741af239a307975197cf6ce213a70068d923231Deleted: sha256:f5600c6330da7bb112776ba067a32a9c20842d6ecc8ee3289f1a713b644092f8Untagged: hello-world:latestUntagged: hello-world@sha256:e7c70bb24b462baa86c102610182e3efcb12a04854e8c582838d92970a09f323Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p><code>docker rmi -f 镜像id</code>删除指定的镜像。</p><p><code>docker rmi -f 镜像id 镜像id 镜像id</code>删除多个镜像。</p><p><code>docker rmi -f $(docker images -aq)</code>删除全部的镜像。</p><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><blockquote><p>有了镜像才可以创建容器</p></blockquote><p>下载一个centos镜像进行测试。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull centos</span>Using default tag: latestlatest: Pulling from library/centos3c72a8ed6814: Pull complete Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbdStatus: Downloaded newer image <span class="token keyword">for</span> centos:latestdocker.io/library/centos:latest</code></pre><p><strong>新建容器并启动</strong></p><pre class=" language-bash"><code class="language-bash">docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment" spellcheck="true"># 参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span>   容器名字，用来区分容器-d              后台方式运行-it             使用交互方式运行，进入容器查看内容-p              指定容器端口 -p 8080:8080    -p ip:主机端口:容器端口    -p 主机端口:容器端口    -p 容器端口—P              随机指定端口</code></pre><blockquote><p>测试</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动并进入容器</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@5ea79d7e4aaa /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls #查看容器内的centos</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment" spellcheck="true">#从容器中退回主机</span><span class="token punctuation">[</span>root@5ea79d7e4aaa /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit </span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</code></pre><p><strong>列出所有的运行的容器</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker ps 命令</span>     <span class="token comment" spellcheck="true">#列出当前正在运行的容器</span>-a   <span class="token comment" spellcheck="true">#列出当前正在运行的容器，并带出历史运行过的容器</span>-n<span class="token operator">=</span>? <span class="token comment" spellcheck="true">#显示最近创建的容器</span>-q   <span class="token comment" spellcheck="true">#只显示容器的编号</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES5ea79d7e4aaa        centos              <span class="token string">"/bin/bash"</span>         3 minutes ago       Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> About a minute ago                       practical_pasteur0126d6ae66c8        bf756fb1ae65        <span class="token string">"/hello"</span>            14 hours ago        Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 14 hours ago                             dreamy_williamson</code></pre><p><strong>退出容器</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span>  <span class="token comment" spellcheck="true">#直接停止容器并退出</span>Ctrl + P + Q <span class="token comment" spellcheck="true">#容器不停止退出</span></code></pre><p><strong>删除容器</strong></p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> 容器id  <span class="token comment" spellcheck="true">#删除指定的容器，不能删除正在运行的容器，如果需强制删除使用rm -f</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span>  <span class="token comment" spellcheck="true">#删除所有的容器</span>docker <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span>  <span class="token comment" spellcheck="true">#删除所有的容器</span></code></pre><p><strong>启动和停止容器的操作</strong></p><pre class=" language-bash"><code class="language-bash">docker start 容器id    <span class="token comment" spellcheck="true">#启动容器</span>docker restart 容器id  <span class="token comment" spellcheck="true">#重启容器</span>docker stop 容器id     <span class="token comment" spellcheck="true">#停止当前正在运行的容器</span>docker <span class="token function">kill</span> 容器id     <span class="token comment" spellcheck="true">#强制停止当前容器</span></code></pre><h2 id="常用其它命令"><a href="#常用其它命令" class="headerlink" title="常用其它命令"></a>常用其它命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令 docker run -d 镜像名</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos</span>d50f3d4deb0f29e7b2e11b27f4ff4bcef7fb1084b87485236544516490b978e9<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><blockquote><p>问题</p></blockquote><p><code>docker ps</code>发现centos停止了。</p><p>docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止。</p><p>nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了。</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre class=" language-bash"><code class="language-bash">docker logs -f -t --tail number 容器id   <span class="token comment" spellcheck="true">#如果没有显示日志，编写一段shell脚本，进行测试你</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos /bin/sh -c "while true;do echo lskj;sleep 1;done"</span>46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES46b9b0ea4261        centos              <span class="token string">"/bin/sh -c 'while t…"</span>   3 seconds ago       Up 3 seconds                            kind_lamport<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 显示日志</span>-tf            <span class="token comment" spellcheck="true">#显示日志</span>--tail number  <span class="token comment" spellcheck="true">#要显示日志条数</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker logs -f -t --tail 10 46b9b0ea4261</span></code></pre><h3 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令：docker top 容器id</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES46b9b0ea4261        centos              <span class="token string">"/bin/sh -c 'while t…"</span>   6 minutes ago       Up 6 minutes                            kind_lamport<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker top 46b9b0ea4261</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                14814               14797               0                   11:13               ?                   00:00:00            /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token keyword">echo</span> lskj<span class="token punctuation">;</span><span class="token function">sleep</span> 1<span class="token punctuation">;</span><span class="token keyword">done</span>root                15308               14814               0                   11:20               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang<span class="token operator">=</span>sleep /usr/bin/sleep 1<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令：docker inspect 容器id</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker inspect 46b9b0ea4261</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Id"</span><span class="token keyword">:</span> <span class="token string">"46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea"</span>,        <span class="token string">"Created"</span><span class="token keyword">:</span> <span class="token string">"2020-11-23T03:13:48.143980583Z"</span>,        <span class="token string">"Path"</span><span class="token keyword">:</span> <span class="token string">"/bin/sh"</span>,        <span class="token string">"Args"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"-c"</span>,            <span class="token string">"while true;do echo lskj;sleep 1;done"</span>        <span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Status"</span><span class="token keyword">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token keyword">:</span> true,            <span class="token string">"Paused"</span><span class="token keyword">:</span> false,            <span class="token string">"Restarting"</span><span class="token keyword">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token keyword">:</span> false,            <span class="token string">"Dead"</span><span class="token keyword">:</span> false,            <span class="token string">"Pid"</span><span class="token keyword">:</span> 14814,            <span class="token string">"ExitCode"</span><span class="token keyword">:</span> 0,            <span class="token string">"Error"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"StartedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-11-23T03:13:48.42067532Z"</span>,            <span class="token string">"FinishedAt"</span><span class="token keyword">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"sha256:0d120b6ccaa8c5e149176798b3501d4dd1885f961922497cd0abef155c869566"</span>,        <span class="token string">"ResolvConfPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea/resolv.conf"</span>,        <span class="token string">"HostnamePath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea/hostname"</span>,        <span class="token string">"HostsPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea/hosts"</span>,        <span class="token string">"LogPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea/46b9b0ea42617276eb5dc975abb489954a306c67fbec3586df75432dfc0e34ea-json.log"</span>,        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"/kind_lamport"</span>,        <span class="token string">"RestartCount"</span><span class="token keyword">:</span> 0,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>,        <span class="token string">"Platform"</span><span class="token keyword">:</span> <span class="token string">"linux"</span>,        <span class="token string">"MountLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"ProcessLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"AppArmorProfile"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"ExecIDs"</span><span class="token keyword">:</span> null,        <span class="token string">"HostConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Binds"</span><span class="token keyword">:</span> null,            <span class="token string">"ContainerIDFile"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LogConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Type"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,                <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"NetworkMode"</span><span class="token keyword">:</span> <span class="token string">"default"</span>,            <span class="token string">"PortBindings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"RestartPolicy"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"no"</span>,                <span class="token string">"MaximumRetryCount"</span><span class="token keyword">:</span> 0            <span class="token punctuation">}</span>,            <span class="token string">"AutoRemove"</span><span class="token keyword">:</span> false,            <span class="token string">"VolumeDriver"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"VolumesFrom"</span><span class="token keyword">:</span> null,            <span class="token string">"CapAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"CapDrop"</span><span class="token keyword">:</span> null,            <span class="token string">"Capabilities"</span><span class="token keyword">:</span> null,            <span class="token string">"Dns"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsOptions"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsSearch"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"ExtraHosts"</span><span class="token keyword">:</span> null,            <span class="token string">"GroupAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"IpcMode"</span><span class="token keyword">:</span> <span class="token string">"private"</span>,            <span class="token string">"Cgroup"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Links"</span><span class="token keyword">:</span> null,            <span class="token string">"OomScoreAdj"</span><span class="token keyword">:</span> 0,            <span class="token string">"PidMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Privileged"</span><span class="token keyword">:</span> false,            <span class="token string">"PublishAllPorts"</span><span class="token keyword">:</span> false,            <span class="token string">"ReadonlyRootfs"</span><span class="token keyword">:</span> false,            <span class="token string">"SecurityOpt"</span><span class="token keyword">:</span> null,            <span class="token string">"UTSMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"UsernsMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"ShmSize"</span><span class="token keyword">:</span> 67108864,            <span class="token string">"Runtime"</span><span class="token keyword">:</span> <span class="token string">"runc"</span>,            <span class="token string">"ConsoleSize"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                0,                0            <span class="token punctuation">]</span>,            <span class="token string">"Isolation"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpuShares"</span><span class="token keyword">:</span> 0,            <span class="token string">"Memory"</span><span class="token keyword">:</span> 0,            <span class="token string">"NanoCpus"</span><span class="token keyword">:</span> 0,            <span class="token string">"CgroupParent"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"BlkioWeight"</span><span class="token keyword">:</span> 0,            <span class="token string">"BlkioWeightDevice"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"BlkioDeviceReadBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceReadIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuPeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuQuota"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimePeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimeRuntime"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpusetCpus"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpusetMems"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Devices"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DeviceCgroupRules"</span><span class="token keyword">:</span> null,            <span class="token string">"DeviceRequests"</span><span class="token keyword">:</span> null,            <span class="token string">"KernelMemory"</span><span class="token keyword">:</span> 0,            <span class="token string">"KernelMemoryTCP"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemoryReservation"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwap"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwappiness"</span><span class="token keyword">:</span> null,            <span class="token string">"OomKillDisable"</span><span class="token keyword">:</span> false,            <span class="token string">"PidsLimit"</span><span class="token keyword">:</span> null,            <span class="token string">"Ulimits"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuCount"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuPercent"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumIOps"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumBandwidth"</span><span class="token keyword">:</span> 0,            <span class="token string">"MaskedPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/asound"</span>,                <span class="token string">"/proc/acpi"</span>,                <span class="token string">"/proc/kcore"</span>,                <span class="token string">"/proc/keys"</span>,                <span class="token string">"/proc/latency_stats"</span>,                <span class="token string">"/proc/timer_list"</span>,                <span class="token string">"/proc/timer_stats"</span>,                <span class="token string">"/proc/sched_debug"</span>,                <span class="token string">"/proc/scsi"</span>,                <span class="token string">"/sys/firmware"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ReadonlyPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/bus"</span>,                <span class="token string">"/proc/fs"</span>,                <span class="token string">"/proc/irq"</span>,                <span class="token string">"/proc/sys"</span>,                <span class="token string">"/proc/sysrq-trigger"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"GraphDriver"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/5542d30147b91dcdb6a661d83c96e557e7bf718a2c0a25443fa410ba32391675-init/diff:/var/lib/docker/overlay2/06551e2d5cbd37fe1dd01d044c604d63c25a5e5b00ff1e9dcd22cd5b273f1e81/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/5542d30147b91dcdb6a661d83c96e557e7bf718a2c0a25443fa410ba32391675/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/5542d30147b91dcdb6a661d83c96e557e7bf718a2c0a25443fa410ba32391675/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/5542d30147b91dcdb6a661d83c96e557e7bf718a2c0a25443fa410ba32391675/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Mounts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token keyword">:</span> <span class="token string">"46b9b0ea4261"</span>,            <span class="token string">"Domainname"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token keyword">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token keyword">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token keyword">:</span> false,            <span class="token string">"Tty"</span><span class="token keyword">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token keyword">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token keyword">:</span> false,            <span class="token string">"Env"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/bin/sh"</span>,                <span class="token string">"-c"</span>,                <span class="token string">"while true;do echo lskj;sleep 1;done"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"centos"</span>,            <span class="token string">"Volumes"</span><span class="token keyword">:</span> null,            <span class="token string">"WorkingDir"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Entrypoint"</span><span class="token keyword">:</span> null,            <span class="token string">"OnBuild"</span><span class="token keyword">:</span> null,            <span class="token string">"Labels"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"org.label-schema.build-date"</span><span class="token keyword">:</span> <span class="token string">"20200809"</span>,                <span class="token string">"org.label-schema.license"</span><span class="token keyword">:</span> <span class="token string">"GPLv2"</span>,                <span class="token string">"org.label-schema.name"</span><span class="token keyword">:</span> <span class="token string">"CentOS Base Image"</span>,                <span class="token string">"org.label-schema.schema-version"</span><span class="token keyword">:</span> <span class="token string">"1.0"</span>,                <span class="token string">"org.label-schema.vendor"</span><span class="token keyword">:</span> <span class="token string">"CentOS"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"NetworkSettings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Bridge"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"SandboxID"</span><span class="token keyword">:</span> <span class="token string">"bf7877c7d65c141262144d36f8f84055335dee25ee1202450f8a42f8d46985a9"</span>,            <span class="token string">"HairpinMode"</span><span class="token keyword">:</span> false,            <span class="token string">"LinkLocalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LinkLocalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"Ports"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"SandboxKey"</span><span class="token keyword">:</span> <span class="token string">"/var/run/docker/netns/bf7877c7d65c"</span>,            <span class="token string">"SecondaryIPAddresses"</span><span class="token keyword">:</span> null,            <span class="token string">"SecondaryIPv6Addresses"</span><span class="token keyword">:</span> null,            <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"660ee337634eb908d4ebe5ad0442b0a9c7a5103ce749b842f6fe4837c869c899"</span>,            <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,            <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,            <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,            <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,            <span class="token string">"Networks"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"bridge"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span><span class="token keyword">:</span> null,                    <span class="token string">"Links"</span><span class="token keyword">:</span> null,                    <span class="token string">"Aliases"</span><span class="token keyword">:</span> null,                    <span class="token string">"NetworkID"</span><span class="token keyword">:</span> <span class="token string">"ee56590e65cf6f8e71efb6c797a16174e72e5696f5bd1f76ecf32a387f69864e"</span>,                    <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"660ee337634eb908d4ebe5ad0442b0a9c7a5103ce749b842f6fe4837c869c899"</span>,                    <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,                    <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,                    <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,                    <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,                    <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,                    <span class="token string">"DriverOpts"</span><span class="token keyword">:</span> null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span><span class="token comment" spellcheck="true">#命令：docker exec -it 容器id bash/shell</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES46b9b0ea4261        centos              <span class="token string">"/bin/sh -c 'while t…"</span>   14 minutes ago      Up 14 minutes                           kind_lamport<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 46b9b0ea4261 /bin/bash</span><span class="token punctuation">[</span>root@46b9b0ea4261 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@46b9b0ea4261 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef</span>UID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 03:13 ?        00:00:00 /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token keyword">echo</span> lskj<span class="token punctuation">;</span><span class="token function">sleep</span> 1<span class="token punctuation">;</span><span class="token keyword">done</span>root       891     0  0 03:28 pts/0    00:00:00 /bin/bashroot       957     1  0 03:29 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang<span class="token operator">=</span>sleep /usr/bin/sleep 1root       958   891  0 03:29 pts/0    00:00:00 <span class="token function">ps</span> -ef<span class="token punctuation">[</span>root@46b9b0ea4261 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#方式二：docker attach 容器id</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach 46b9b0ea4261</span>正在执行当前的代码（上面编写的shell脚本，执行是一个死循环），此时使用快捷键之类的无法退出，可复制会话，杀死docker attach进程。<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pkill -9 -f 'docker.*attach'</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p><code>docker exec</code>进入容器后，开启一个新的终端，可以在里面操作（常用）。</p><p><code>docker attach</code>进入容器正在执行的终端，不会启动新的进程。</p><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令：docker cp 容器id:容器内路径 目的地主机路径</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@2510245c778d /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [root@lskj /]# docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES2510245c778d        centos              <span class="token string">"/bin/bash"</span>         11 seconds ago      Up 11 seconds                           musing_kilby<span class="token comment" spellcheck="true">#查看当前主机home目录下的文件</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /home</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token comment" spellcheck="true">#进入docker容器内部</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach 2510245c778d</span><span class="token punctuation">[</span>root@2510245c778d /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@2510245c778d /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /home/</span><span class="token punctuation">[</span>root@2510245c778d home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token comment" spellcheck="true">#在容器home目录下创建一个test文件</span><span class="token punctuation">[</span>root@2510245c778d home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch test</span><span class="token punctuation">[</span>root@2510245c778d home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token function">test</span><span class="token punctuation">[</span>root@2510245c778d home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token comment" spellcheck="true">#将文件拷贝到主机上</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker cp 2510245c778d:/home/test /home</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token function">test</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><h1 id="四、部署nginx"><a href="#四、部署nginx" class="headerlink" title="四、部署nginx"></a>四、部署nginx</h1><p>1、搜索镜像。（可以在dockerhub搜索查看）</p><pre class=" language-bash"><code class="language-bash">docker search nginx</code></pre><p>2、下载镜像。</p><pre class=" language-bash"><code class="language-bash">docker pull nginx</code></pre><p>3、运行测试。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -d 后台运行  --name 给容器命名  -p 宿主机端口:容器内部端口</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d --name nginxTest -p 8080:80 nginx</span>8e01d8de2d93004ec187abfdac32c7ea41ed1fb55a825a554e9796d0fd9b48ca<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES8e01d8de2d93        nginx               <span class="token string">"/docker-entrypoint.…"</span>   38 seconds ago      Up 38 seconds       0.0.0.0:8080-<span class="token operator">></span>80/tcp   nginxTest<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:8080</span></code></pre><p>4、进入容器。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it nginxTest /bin/bash</span>root@8e01d8de2d93:/<span class="token comment" spellcheck="true"># cd /etc/nginx</span>root@8e01d8de2d93:/etc/nginx<span class="token comment" spellcheck="true"># ls</span>conf.d    fastcgi_params    koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params    uwsgi_params  win-utfroot@8e01d8de2d93:/etc/nginx<span class="token comment" spellcheck="true">#</span></code></pre><p><img src="/archives/4a3d459a/image-20201123134134613.png" alt=""></p><h1 id="五、部署Tomact"><a href="#五、部署Tomact" class="headerlink" title="五、部署Tomact"></a>五、部署Tomact</h1><p>官方的使用，一般用来测试，用完即删除。</p><pre class=" language-bash"><code class="language-bash">docker run -it --rm tomcat:9.0</code></pre><p>1、下载。</p><pre class=" language-bash"><code class="language-bash">docker pull tomcat:9.0<span class="token comment" spellcheck="true">#最新版下载</span>docker pull tomcat</code></pre><p>2、启动。</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 80:8080 --name tomcatTest tomcat</code></pre><p>3、进入容器。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcatTest /bin/bash</span>root@d08553edb696:/usr/local/tomcat<span class="token comment" spellcheck="true"># ls -la</span>total 176drwxr-xr-x 1 root root  4096 Nov 19 06:16 <span class="token keyword">.</span>drwxr-xr-x 1 root root  4096 Nov 19 06:12 <span class="token punctuation">..</span>-rw-r--r-- 1 root root 18982 Nov 12 15:41 BUILDING.txt-rw-r--r-- 1 root root  5409 Nov 12 15:41 CONTRIBUTING.md-rw-r--r-- 1 root root 57092 Nov 12 15:41 LICENSE-rw-r--r-- 1 root root  2333 Nov 12 15:41 NOTICE-rw-r--r-- 1 root root  3257 Nov 12 15:41 README.md-rw-r--r-- 1 root root  6898 Nov 12 15:41 RELEASE-NOTES-rw-r--r-- 1 root root 16507 Nov 12 15:41 RUNNING.txtdrwxr-xr-x 2 root root  4096 Nov 19 06:16 bindrwxr-xr-x 1 root root  4096 Nov 23 06:02 confdrwxr-xr-x 2 root root  4096 Nov 19 06:16 libdrwxrwxrwx 1 root root  4096 Nov 23 06:02 logsdrwxr-xr-x 2 root root  4096 Nov 19 06:16 native-jni-libdrwxrwxrwx 2 root root  4096 Nov 19 06:16 tempdrwxr-xr-x 2 root root  4096 Nov 19 06:16 webappsdrwxr-xr-x 7 root root  4096 Nov 12 15:38 webapps.distdrwxrwxrwx 2 root root  4096 Nov 12 15:35 workroot@d08553edb696:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@d08553edb696:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls</span>root@d08553edb696:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># </span></code></pre><p>此时，发现Linux命令少了，也没有webapps。这是因为阿里云镜像的原因，默认是最小的镜像，所有不必要的都删除掉了，保证最小可运行的环境。（现在外网访问会报404，若需要，可执行命令<code>cp -r webapps.dist/* webapps</code>将webapps.dist下的文件复制到webapps下，即可正常访问）</p><h1 id="六、部署ES"><a href="#六、部署ES" class="headerlink" title="六、部署ES"></a>六、部署ES</h1><p>ES（elastic search）暴露的端口很多，十分耗内存。</p><p>ES的数据一般需要放置到安全目录，挂载。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># --net somnetwork 网络配置</span>docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:tag<span class="token comment" spellcheck="true">#下载启动elasticsearch</span>docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:7.6.2<span class="token comment" spellcheck="true">#启动之后，Linux可能会卡 docker stats查看CPU的状态</span>docker stats<span class="token comment" spellcheck="true">#测试一下es是否成功</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:9200</span><span class="token punctuation">{</span>  <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"7fa5c06dc5df"</span>,  <span class="token string">"cluster_name"</span> <span class="token keyword">:</span> <span class="token string">"docker-cluster"</span>,  <span class="token string">"cluster_uuid"</span> <span class="token keyword">:</span> <span class="token string">"DecIaQ03RmG_gGib0baOWg"</span>,  <span class="token string">"version"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"number"</span> <span class="token keyword">:</span> <span class="token string">"7.6.2"</span>,    <span class="token string">"build_flavor"</span> <span class="token keyword">:</span> <span class="token string">"default"</span>,    <span class="token string">"build_type"</span> <span class="token keyword">:</span> <span class="token string">"docker"</span>,    <span class="token string">"build_hash"</span> <span class="token keyword">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,    <span class="token string">"build_date"</span> <span class="token keyword">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span>,    <span class="token string">"build_snapshot"</span> <span class="token keyword">:</span> false,    <span class="token string">"lucene_version"</span> <span class="token keyword">:</span> <span class="token string">"8.4.0"</span>,    <span class="token string">"minimum_wire_compatibility_version"</span> <span class="token keyword">:</span> <span class="token string">"6.8.0"</span>,    <span class="token string">"minimum_index_compatibility_version"</span> <span class="token keyword">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">}</span>,  <span class="token string">"tagline"</span> <span class="token keyword">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#关闭es，增加内存限制</span><span class="token comment" spellcheck="true">#修改配置文件，-e环境配置修改</span>docker run -d --name elasticsearchTest  -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> -e ES_JAVA_OPTS<span class="token operator">=</span><span class="token string">"-Xms64m -Xmx512m"</span> elasticsearch:7.6.2</code></pre><p>使用Kibana连接ES</p><blockquote><p>可视化</p></blockquote><p><strong>portainer</strong></p><p>Docker图形化界面管理工具。提供一个后台面板。</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 8080:9000 \--restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer</code></pre><p>访问测试：<a href="http://ip:8080/" target="_blank" rel="noopener">http://ip:8080/</a></p><p><strong>Rancher(CI/CD再用)</strong></p><h1 id="七、Docker镜像"><a href="#七、Docker镜像" class="headerlink" title="七、Docker镜像"></a>七、Docker镜像</h1><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>所有的应用，直接打包docker镜像，就可以直接跑起来了。</p><p><strong>怎样得到镜像？</strong></p><ul><li>从远程仓库下载</li><li>拷贝</li><li>制作镜像DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs（boot file system）主要包含BootLoader和kernel，BootLoader主要是引导加兹安kernel，Linux刚启动时就会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system），在bootfs之上。包含的是典型Linux系统中的/dev，/proc，/bin，/etc等标椎目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等。</p><p><strong>在VMware中使用的CentOS是都是几个G，为什么Docker里只有几百M？</strong></p><p>对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序就可以了，因为底层直接用Host的kernel，自已只需要提供rootfs就可以了。由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</p><p>虚拟机是分钟级别，容器是秒级。</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><p>下载一个镜像时，从下载日志可以看出是一层一层地下载。</p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>例如，基于Ubuntu 16.04创建一个新的镜像，这就是新镜像的第一层。如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层。如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p><img src="/archives/4a3d459a/image-20201124212140945.png" alt=""></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合。例如，每个镜像层包含三个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="/archives/4a3d459a/image-20201124212658838.png" alt=""></p><p>下图在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。</p><p><img src="/archives/4a3d459a/image-20201124213615580.png" alt=""></p><p>这种情况下，上层镜像中的文件会覆盖了底层镜像中的文件。这样就使得文件的更新版作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照集中）的方式来实现镜像层堆栈，并保证多镜像层对外展示位统一的文件系统。</p><p>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在Windows上仅支持windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。</p><p>下图展示了与该系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="/archives/4a3d459a/image-20201124214736118.png" alt=""></p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层就是通常所说的容器层，容器之下的都叫镜像层。</p><p><img src="/archives/4a3d459a/image-20201124215715343.png" alt=""></p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><pre class=" language-bash"><code class="language-bash">docker commit 提交容器成为一个新的副本docker commit -m<span class="token operator">=</span><span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span></code></pre><blockquote><p>测试</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动一个默认的Tomcat</span>docker run -it -p 8080:8080 tomcat<span class="token comment" spellcheck="true">#默认的Tomcat没有webapps应用，需拷贝webapps.dist下的文件到webapps</span>docker <span class="token function">exec</span> -it tomcatTest /bin/bash<span class="token function">cd</span> webapps<span class="token function">ls</span><span class="token function">cd</span> <span class="token punctuation">..</span><span class="token function">cp</span> -r webapps.dist/* webapps</code></pre><p>将操作过的容器通过commit提交为一个镜像tomcat02，后续使用修改过的镜像即可，这就是自定义修改的镜像。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMEScaa0c361cd59        tomcat              <span class="token string">"catalina.sh run"</span>   7 minutes ago       Up 7 minutes        0.0.0.0:8080-<span class="token operator">></span>8080/tcp   jovial_chebyshev<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker commit -a="lskj" -m="add webapps app" caa0c361cd59 tomcatTest:1.0</span>invalid reference format: repository name must be lowercase<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker commit -a="lskj" -m="add webapps app" caa0c361cd59 tomcat02:1.0</span>sha256:963f5b061d831efcf953d3252b13cd82bb28c2581f25593117c22830f2c19fc8<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY            TAG                 IMAGE ID            CREATED             SIZEtomcat02              1.0                 963f5b061d83        8 seconds ago       654MBtomcat                9.0                 e0bd8b34b4ea        5 days ago          649MBtomcat                latest              e0bd8b34b4ea        5 days ago          649MBredis                 latest              74d107221092        6 days ago          104MBnginx                 latest              daee903b4e43        6 days ago          133MBcentos                latest              0d120b6ccaa8        3 months ago        215MBportainer/portainer   latest              62771b0b9b09        4 months ago        79.1MBelasticsearch         7.6.2               f29a1ee41030        8 months ago        791MB<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><h1 id="八、容器数据卷"><a href="#八、容器数据卷" class="headerlink" title="八、容器数据卷"></a>八、容器数据卷</h1><p>docker将应用和环境打包成一个镜像，如果数据都在容器中，容器被删除，数据就会丢失。希望mysql数据可以存储咋本地。</p><p>容器之间可以有一个数据共享的技术，Docker容器产生的数据，同步到本地。</p><p>这就是卷技术。也就是目录的挂载，将容器内的目录，挂载到Linux上。</p><p><strong>容器的持久化和同步操作。容器间也是可以数据共享的。</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载 -v</p></blockquote><pre class=" language-bash"><code class="language-bash">docker run -it -v 主机目录:容器内目录</code></pre><p><strong>测试：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it -v /home/test:/home/ centos /bin/bash</span><span class="token punctuation">[</span>root@e8fd1fc54022 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#启动之后，复制会话，通过docker inspect 容器id 查看容器详细信息</span><span class="token punctuation">[</span>root@lskj test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker inspect e8fd1fc54022</span><span class="token punctuation">..</span>.        <span class="token string">"Mounts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">#挂载 -v 卷</span>            <span class="token punctuation">{</span>                <span class="token string">"Type"</span><span class="token keyword">:</span> <span class="token string">"bind"</span>,                <span class="token string">"Source"</span><span class="token keyword">:</span> <span class="token string">"/home/test"</span>,  <span class="token comment" spellcheck="true">#主机内地址</span>                <span class="token string">"Destination"</span><span class="token keyword">:</span> <span class="token string">"/home"</span>,  <span class="token comment" spellcheck="true">#docker容器内的地址</span>                <span class="token string">"Mode"</span><span class="token keyword">:</span> <span class="token string">""</span>,                <span class="token string">"RW"</span><span class="token keyword">:</span> true,                <span class="token string">"Propagation"</span><span class="token keyword">:</span> <span class="token string">"rprivate"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>,<span class="token punctuation">..</span>.</code></pre><p>测试文件的同步：</p><p><img src="/archives/4a3d459a/image-20201124224333277.png" alt=""></p><p>1、停止容器</p><p>2、宿主机上修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的</p><p><img src="/archives/4a3d459a/image-20201124224921146.png" alt=""></p><p>以后修改只需要在本地修改即可，容器内会自动同步。</p><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#获取镜像</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span><span class="token comment" spellcheck="true">#运行容器，需要做数据挂载。 安装启动mysql，需要配置密码</span><span class="token comment" spellcheck="true"># -d 后台运行</span><span class="token comment" spellcheck="true"># -p 端口映射</span><span class="token comment" spellcheck="true"># -v 卷挂载</span><span class="token comment" spellcheck="true"># -e 环境配置</span><span class="token comment" spellcheck="true"># --name 容器名字</span><span class="token comment" spellcheck="true">#官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 8080:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span>d150915a1b29d8c4a4999f1fae84bcc6b1b618835e0515f410b49abd22f17360<span class="token comment" spellcheck="true">#启动成功后，可在本地测试连接</span>mysql -h 公网ip -uroot -P 8080 -proot<span class="token comment" spellcheck="true">#本地创建数据库</span>mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span>+--------------------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.05 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> create database <span class="token function">test</span><span class="token punctuation">;</span>Query OK, 1 row affected <span class="token punctuation">(</span>0.05 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>Linux查看映射的路径：</p><p><img src="/archives/4a3d459a/image-20201125091109521.png" alt=""></p><p>将容器删除，挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能。</p><p><img src="/archives/4a3d459a/image-20201125091537176.png" alt=""></p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><p><strong>匿名挂载：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#匿名挂载</span>-v 容器内路径docker run -d -P --name nginx01 -v /etc/nginx nginx<span class="token comment" spellcheck="true">#查看所有卷的情况</span>docker volume <span class="token function">ls</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker volume ls</span>DRIVER              VOLUME NAMElocal               2b50e0b7719627983833949e6c713f88d3375ab6ddc83da773e2193e1a1f9b08local               2bd8935c5fea24f21bef8438c10d769dd4c02edf3481724e1c8cb5e2669582e1local               d3d6b7d6d26a670e30e9c97b0dcaed03212b148427e9468cbc07a39246cdb3b2<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#这里的这种就是匿名挂载，因为在-v时只写了容器内的路径，没有写容器外的路径</span></code></pre><p><strong>具名挂载：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name nginx02 -v test-nginx:/etc/nginx nginx</span>f4d7f0da4443ca8d724d709055bb502cdf189e87b5f120a1b944c21b4d4e6457<span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker volume ls</span>DRIVER              VOLUME NAMElocal               2b50e0b7719627983833949e6c713f88d3375ab6ddc83da773e2193e1a1f9b08local               2bd8935c5fea24f21bef8438c10d769dd4c02edf3481724e1c8cb5e2669582e1local               d3d6b7d6d26a670e30e9c97b0dcaed03212b148427e9468cbc07a39246cdb3b2local               test-nginx<span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p>通过<code>-v 卷名:容器内路径</code>。</p><p>查看一下这个卷</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker volume inspect test-nginx</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"CreatedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-11-25T10:11:19+08:00"</span>,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"local"</span>,        <span class="token string">"Labels"</span><span class="token keyword">:</span> null,        <span class="token string">"Mountpoint"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/volumes/test-nginx/_data"</span>,        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"test-nginx"</span>,        <span class="token string">"Options"</span><span class="token keyword">:</span> null,        <span class="token string">"Scope"</span><span class="token keyword">:</span> <span class="token string">"local"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxx/_data</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /var/lib/docker/volumes</span><span class="token punctuation">[</span>root@lskj volumes<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>2b50e0b7719627983833949e6c713f88d3375ab6ddc83da773e2193e1a1f9b08  metadata.db2bd8935c5fea24f21bef8438c10d769dd4c02edf3481724e1c8cb5e2669582e1  test-nginxd3d6b7d6d26a670e30e9c97b0dcaed03212b148427e9468cbc07a39246cdb3b2<span class="token punctuation">[</span>root@lskj volumes<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd test-nginx/</span><span class="token punctuation">[</span>root@lskj test-nginx<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>_data<span class="token punctuation">[</span>root@lskj test-nginx<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd _data/</span><span class="token punctuation">[</span>root@lskj _data<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>conf.d  fastcgi_params  koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params  uwsgi_params  win-utf<span class="token punctuation">[</span>root@lskj _data<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p>通过具名挂载可以方便找到一个卷，通常情况下使用的是具名挂载。</p><blockquote><p>怎样区分是具名挂载、匿名挂载，还是指定路径挂载？</p></blockquote><ul><li><code>-v 容器内路径</code>匿名挂载</li><li><code>-v 卷名:容器内路径</code>具名挂载</li><li><code>-v /宿主机路径:容器内路径</code>指定路径挂载</li></ul><blockquote><p>拓展</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#通过 -v 容器内路径:ro/rw  改变读写权限</span>ro：readonly只读rw：readwrite可读可写<span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name nginx02 -v test-nginx:/etc/nginx:ro nginx</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name nginx02 -v test-nginx:/etc/nginx:rw nginx</span></code></pre><p>只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作的。</p><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的构建文件，命令脚本。</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本就是一个个的命令，每个命令都是一层。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建一个dockerfile文件dockerfile01</span><span class="token comment" spellcheck="true"># dockerfile01中的内容，指定(大写) 参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token keyword">echo</span> <span class="token string">"-----end-----"</span>CMD /bin/bash<span class="token comment" spellcheck="true">#这里的每个命令，就是镜像的一层。</span></code></pre><p><img src="/archives/4a3d459a/image-20201125105422032.png" alt=""></p><p>启动自定义的容器：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj docker-test-volume<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it f9c2cfe22856 /bin/bash</span><span class="token punctuation">[</span>root@1b04e3544ea3 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p><img src="/archives/4a3d459a/image-20201125105910612.png" alt=""></p><p>这个卷和外部一定有一个同步的目录。</p><p>查看一下挂载的路径：</p><p><img src="/archives/4a3d459a/image-20201125131909245.png" alt=""></p><p>测试：</p><p><img src="/archives/4a3d459a/image-20201125132153059.png" alt=""></p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><img src="/archives/4a3d459a/image-20201125163657034.png" alt=""></p><p>启动三个容器，通过上面自定义的镜像启动。</p><p><img src="/archives/4a3d459a/image-20201125164134466.png" alt=""></p><p><img src="/archives/4a3d459a/image-20201125164901655.png" alt=""></p><p><img src="/archives/4a3d459a/image-20201125165325971.png" alt=""></p><p>删除docker01，查看docker02和docker03</p><p><img src="/archives/4a3d459a/image-20201125165647745.png" alt=""></p><p>多个mysql实现数据共享。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 8080:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 8080:3306 -e MYSQL_ROOT_PASSWORD=root --name mysql02 --volumes-from mysql01 mysql:5.7</span></code></pre><blockquote><p>结论：</p></blockquote><p>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用为止。</p><p>但一旦持久化到本地，本地的数据是不会删除的。</p><h1 id="九、DockerFile"><a href="#九、DockerFile" class="headerlink" title="九、DockerFile"></a>九、DockerFile</h1><p>dockerfile是用来构建docker镜像的文件。命令参数脚本。</p><p>构建步骤：</p><ul><li>编写一个dockerfile文件</li><li>docker build构建成为一个镜像</li><li>docker run运行镜像</li><li>docker push发布镜像</li></ul><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><blockquote><p>基础知识</p></blockquote><p>1、每个保留关键字（指令）都必须是大写字母。</p><p>2、执行从上到下顺序执行。</p><p>3、<code>#</code>表示注释。</p><p>4、每一个指定都会创建提交一个新的镜像层。</p><p><img src="/archives/4a3d459a/timg.jpg" alt=""></p><p>Dockerfile是面向开发的，以后要发布项目，做镜像，就需要编写Dockerfile文件。</p><blockquote><p>步骤：开发、部署、运维</p></blockquote><p>DockerFile：构建文件，定义了一切的步骤，源代码。</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><p><code>FROM</code>基础镜像，一切从这里开始构建。（指定基础镜像）</p><p><code>MAINTAINER</code>镜像是谁写的，姓名+邮箱（指定维护者信息）</p><p><code>RUN</code>镜像构建时，需要运行的命令（你想让它做什么，在命令前面加上RUN即可）</p><p><code>ADD</code>copy文件，会自动解压</p><p><code>WORKDIR</code>设置镜像的工作目录</p><p><code>VOLUME</code>设置卷，挂载主机目录</p><p><code>EXPOSE</code>指定对外的端口，暴露端口</p><p><code>CMD</code>指定容器启动时，要运行的命令，只有最后一个会生效，可被替代</p><p><code>ENTRYPOINT</code>指定容器启动时，要运行的命令，可以追加命令</p><p><code>ONBUILD</code>当构建一个被继承DockerFile时，就会运行ONBUILD指令（触发指令）</p><p><code>COPY</code>类似ADD，将文件拷贝到镜像中</p><p><code>ENV</code>构建时，设置环境变量</p><h2 id="构建自已的Centos"><a href="#构建自已的Centos" class="headerlink" title="构建自已的Centos"></a>构建自已的Centos</h2><p>Docker Hub中大多镜像都是从这个基础镜像过来的（FROM scratch），然后配置需要的东西。</p><pre class=" language-bash"><code class="language-bash">FROM scratchADD centos-7-x86_64-docker.tar.xz /LABEL \    org.label-schema.schema-version<span class="token operator">=</span><span class="token string">"1.0"</span> \    org.label-schema.name<span class="token operator">=</span><span class="token string">"CentOS Base Image"</span> \    org.label-schema.vendor<span class="token operator">=</span><span class="token string">"CentOS"</span> \    org.label-schema.license<span class="token operator">=</span><span class="token string">"GPLv2"</span> \    org.label-schema.build-date<span class="token operator">=</span><span class="token string">"20201113"</span> \    org.opencontainers.image.title<span class="token operator">=</span><span class="token string">"CentOS Base Image"</span> \    org.opencontainers.image.vendor<span class="token operator">=</span><span class="token string">"CentOS"</span> \    org.opencontainers.image.licenses<span class="token operator">=</span><span class="token string">"GPL-2.0-only"</span> \    org.opencontainers.image.created<span class="token operator">=</span><span class="token string">"2020-11-13 00:00:00+00:00"</span>CMD <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">]</span></code></pre><blockquote><p>创建一个自己的centos</p></blockquote><p>1、编写Dockerfile文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim mydockerfile-centos</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat mydockerfile-centos </span>FROM centosMAINTAINER lskj<span class="token operator">&lt;</span>2292807998@qq.com<span class="token operator">></span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum -y <span class="token function">install</span> vimRUN yum -y <span class="token function">install</span> net-toolsEXPOSE 80CMD <span class="token keyword">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token keyword">echo</span> <span class="token string">"-----end-----"</span>CMD /bin/bash<span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p>2、通过这个文件构建镜像</p><p><code>docker build -f dockerfile文件路径 -t 镜像名:[tag]</code></p><pre class=" language-bash"><code class="language-bash">docker build -f mydockerfile-centos -t mycentos:0.1 <span class="token keyword">.</span></code></pre><p>3、测试运行</p><pre class=" language-bash"><code class="language-bash">docker run -it mycentos:./1</code></pre><blockquote><p>CMD与ENTRYPOINT区别</p></blockquote><p>测试CMD：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>mydockerfile-centos<span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim dockerfile-cmd-test</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat dockerfile-cmd-test </span>FROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -f dockerfile-cmd-test -t cmdtest .</span>Sending build context to Docker daemon  3.072kBStep 1/2 <span class="token keyword">:</span> FROM centos ---<span class="token operator">></span> 0d120b6ccaa8Step 2/2 <span class="token keyword">:</span> CMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> ab53426fd79fRemoving intermediate container ab53426fd79f ---<span class="token operator">></span> 066b2d72266fSuccessfully built 066b2d72266fSuccessfully tagged cmdtest:latest<span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run 066b2d72266f</span><span class="token keyword">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar<span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#想追加一个命令 -l  => ls -al</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run 066b2d72266f -l</span>docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="token string">"exec: \"-l\": executable file not found in <span class="token variable">$PATH</span>"</span><span class="token keyword">:</span> unknown.ERRO<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> error waiting <span class="token keyword">for</span> container: context canceled <span class="token comment" spellcheck="true">#cmd的情况下 -l替换了CMD ["ls","-a"]命令，-l不是命令，所以报错</span></code></pre><p>测试ENTRYPOINT：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim dockerfile-entrypoint-test</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat dockerfile-entrypoint-test </span>FROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -f dockerfile-entrypoint-test -t entrypoint-test .</span>Sending build context to Docker daemon  4.096kBStep 1/2 <span class="token keyword">:</span> FROM centos ---<span class="token operator">></span> 0d120b6ccaa8Step 2/2 <span class="token keyword">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 9cbf88848912Removing intermediate container 9cbf88848912 ---<span class="token operator">></span> bc47f7888c0dSuccessfully built bc47f7888c0dSuccessfully tagged entrypoint-test:latest<span class="token comment" spellcheck="true">#追加的命令，是直接拼接在ENTRYPOINT命令的后面</span><span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run bc47f7888c0d -l</span>total 56drwxr-xr-x   1 root root 4096 Nov 25 10:31 <span class="token keyword">.</span>drwxr-xr-x   1 root root 4096 Nov 25 10:31 <span class="token punctuation">..</span>-rwxr-xr-x   1 root root    0 Nov 25 10:31 .dockerenvlrwxrwxrwx   1 root root    7 May 11  2019 bin -<span class="token operator">></span> usr/bindrwxr-xr-x   5 root root  340 Nov 25 10:31 devdrwxr-xr-x   1 root root 4096 Nov 25 10:31 etcdrwxr-xr-x   2 root root 4096 May 11  2019 homelrwxrwxrwx   1 root root    7 May 11  2019 lib -<span class="token operator">></span> usr/liblrwxrwxrwx   1 root root    9 May 11  2019 lib64 -<span class="token operator">></span> usr/lib64drwx------   2 root root 4096 Aug  9 21:40 lost+founddrwxr-xr-x   2 root root 4096 May 11  2019 mediadrwxr-xr-x   2 root root 4096 May 11  2019 mntdrwxr-xr-x   2 root root 4096 May 11  2019 optdr-xr-xr-x 110 root root    0 Nov 25 10:31 procdr-xr-x---   2 root root 4096 Aug  9 21:40 rootdrwxr-xr-x  11 root root 4096 Aug  9 21:40 runlrwxrwxrwx   1 root root    8 May 11  2019 sbin -<span class="token operator">></span> usr/sbindrwxr-xr-x   2 root root 4096 May 11  2019 srvdr-xr-xr-x  13 root root    0 Nov 25 02:55 sysdrwxrwxrwt   7 root root 4096 Aug  9 21:40 tmpdrwxr-xr-x  12 root root 4096 Aug  9 21:40 usrdrwxr-xr-x  20 root root 4096 Aug  9 21:40 var<span class="token punctuation">[</span>root@lskj dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><h2 id="Tomcat镜像"><a href="#Tomcat镜像" class="headerlink" title="Tomcat镜像"></a>Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包。</p><p><img src="/archives/4a3d459a/image-20201125183726271.png" alt=""></p><p>2、编写Dockerfile文件（官方命名<code>Dockerfile</code>，<code>build</code>会自动寻找这个文件，就不需要<code>-f</code>指定了。</p><pre class=" language-bash"><code class="language-bash">FROM centosMAINTAINER lskjCOPY readme.txt /usr/local/readme.txtADD jdk-8u271-linux-x64.tar.gz /usr/localADD apache-tomcat-9.0.35.tar.gz /usr/localRUN yum -y <span class="token function">install</span> vimENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_271ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.35ENV PATH <span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE 8080CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> -F /usr/local/apache-tomcat-9.0.35/bin/logs/catalina.out</code></pre><p>3、构建镜像。</p><pre class=" language-bash"><code class="language-bash">docker build -t diytomcat <span class="token keyword">.</span></code></pre><p>4、启动镜像。</p><p>5、访问测试。</p><p>6、发布项目（由于做了卷挂载，直接在本地编写项目即可）</p><p><strong>web.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>DockerHub</p></blockquote><p>1、地址：<a href="https://hub.docker.com/，注册自己的账号。" target="_blank" rel="noopener">https://hub.docker.com/，注册自己的账号。</a></p><p>2、确定账号可以登录。</p><p>3、登录账号，在自己的服务器上提交自己的镜像。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj local<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker login -u lskj</span>Password: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment" spellcheck="true">#credentials-store</span>Login Succeeded</code></pre><p>4、登录成功后，提交镜像（docker push）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#push自己的镜像到服务器上</span>docker push diytomcat<span class="token comment" spellcheck="true">#push镜像时，尽量带上版本号</span>docker push lskj/tomcat:1.0</code></pre><blockquote><p>阿里云镜像服务</p></blockquote><p>1、登录阿里云。</p><p>2、找到容器镜像服务。</p><p>3、创建命名空间。</p><p>4、创建容器镜像。</p><p><img src="/archives/4a3d459a/image-20201125211437982.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/archives/4a3d459a/timg01.jpg" alt=""></p><h1 id="十、Docker网络"><a href="#十、Docker网络" class="headerlink" title="十、Docker网络"></a>十、Docker网络</h1><h2 id="Docker0"><a href="#Docker0" class="headerlink" title="Docker0"></a>Docker0</h2><p>清空所有images和容器。</p><blockquote><p>测试</p></blockquote><p><img src="/archives/4a3d459a/image-20201125221452254.png" alt=""></p><p>docker是怎样处理容器网络访问的？</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name tomcat02 tomcat</span><span class="token comment" spellcheck="true">#查看容器内部的网络地址 ip addr</span><span class="token comment" spellcheck="true">#容器启动时，会得到一个docker分配的eth0@if69 ip地址</span><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat02 ip addr</span>1: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever68: eth0@if69: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p>Linux能否ping通容器内部？</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ping 172.17.0.2</span>PING 172.17.0.2 <span class="token punctuation">(</span>172.17.0.2<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 172.17.0.2: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.079 ms64 bytes from 172.17.0.2: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.071 ms64 bytes from 172.17.0.2: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.059 ms<span class="token comment" spellcheck="true">#Linux可以ping通docker容器内部</span></code></pre><blockquote><p>原理</p></blockquote><p>1、每启动一个docker容器，docker就会给docker容器分配一个ip，只要安装了docker，就会有一个网卡docker0。桥接模式，使用的技术是evth-pair。</p><p>再次测试ip addr：</p><p><img src="/archives/4a3d459a/image-20201125223434972.png" alt=""></p><p>2、再启动一个容器，发现又多了一对容器。</p><p><img src="/archives/4a3d459a/image-20201125224039972.png" alt=""></p><blockquote><p>这些容器带来的网卡都是一对一对的，evth-pair就是一对的虚拟设备接口，它们都是成对出现的，一段连着协议，一段彼此相连。</p><p>正因为这个特性，evth-pair充当一个桥梁，连接各种虚拟网络设备。</p><p>OpenStac，Docker容器之间的连接，OVS的连接，都是使用evth-pair技术。</p></blockquote><p>3、测试tomcat02和tomcat03是否可以ping通。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat03 ping 172.17.0.2</span>PING 172.17.0.2 <span class="token punctuation">(</span>172.17.0.2<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 172.17.0.2: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.100 ms64 bytes from 172.17.0.2: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.077 ms<span class="token comment" spellcheck="true">#结论：容器和容器之间是可以互相ping通的。</span></code></pre><p><img src="/archives/4a3d459a/image-20201125232958530.png" alt=""></p><p>tomcat02和tomcat03是公用的一个路由器，docker0.</p><p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给容器分配一个默认的可用ip。</p><blockquote><p>总结</p></blockquote><p>Docker使用的是Linux桥接，宿主机中是一个Docker容器的docker0.</p><p><img src="/archives/4a3d459a/image-20201126085509745.png" alt=""></p><p>Docker中的所有的网络接口都是虚拟的。虚拟的转发效率高。</p><p>只要容器删除，对应网桥一对就没了。</p><h2 id="–link容器互联"><a href="#–link容器互联" class="headerlink" title="–link容器互联"></a>–link容器互联</h2><p>一个微服务项目，虽然项目不重启，但数据库的ip变化，希望可以通过名字来进行容器访问。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker start tomcat01</span>tomcat01<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker start tomcat02</span>tomcat02<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat02 ping tomcat01</span>ping: tomcat01: Name or <span class="token function">service</span> not known<span class="token comment" spellcheck="true">#通过--link可以解决网络连通问题</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name tomcat04 --link tomcat02 tomcat</span>f55fceb8f76bf2eff4e31cff076eb7d94f09a5d3d9405ca2024e00729300c95a<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat04 ping tomcat02</span>PING tomcat02 <span class="token punctuation">(</span>172.17.0.3<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from tomcat02 <span class="token punctuation">(</span>172.17.0.3<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.108 ms<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true">#反向不可以连通</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat02 ping tomcat04</span>ping: tomcat04: Name or <span class="token function">service</span> not known</code></pre><p>查看hosts配置</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat04 cat /etc/hosts</span>127.0.0.1    localhost::1    localhost ip6-localhost ip6-loopbackfe00::0    ip6-localnetff00::0    ip6-mcastprefixff02::1    ip6-allnodesff02::2    ip6-allrouters172.17.0.3    tomcat02 a9c1a174ab52172.17.0.4    f55fceb8f76b<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span></code></pre><p><code>--link</code>就是在hosts配置中做映射。</p><p>现使用Docker不建议使用<code>--link</code>。</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>查看所有的docker网络</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE6c17614d976e        bridge              bridge              local1b9e71a2742d        host                host                localfcde1d5b1f3c        none                null                local<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p><strong>网络模式</strong></p><ul><li><p>bride：桥接 ，docker（默认）</p></li><li><p>none：不配置网络</p></li><li><p>host：和宿主机共享网络</p></li><li><p>container：容器网络连通（局限很大，用的少）</p></li></ul><p><strong>测试：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#直接启动的命令 --net bridge，就是docker0</span>docker run -d -P --name tomcat01 tomcatdocker run -d -P --name tomcat01 --net bridge tomcat<span class="token comment" spellcheck="true">#docker0特点：默认，域名不能访问，--link可以打通连接</span><span class="token comment" spellcheck="true">#自定义一个网络</span><span class="token comment" spellcheck="true">#--driver bridge</span><span class="token comment" spellcheck="true">#--subnet 192.168.0.0/16</span><span class="token comment" spellcheck="true">#--gateway 192.168.0.1</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span>3d1c1fc671b0868404208e873de8efc6539f382e8a9b543ed136f8e362753da4<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE6c17614d976e        bridge              bridge              local1b9e71a2742d        host                host                local3d1c1fc671b0        mynet               bridge              localfcde1d5b1f3c        none                null                local<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p>自定义的网络就创建完成了。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network inspect mynet</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"mynet"</span>,        <span class="token string">"Id"</span><span class="token keyword">:</span> <span class="token string">"3d1c1fc671b0868404208e873de8efc6539f382e8a9b543ed136f8e362753da4"</span>,        <span class="token string">"Created"</span><span class="token keyword">:</span> <span class="token string">"2020-11-26T09:33:07.248648974+08:00"</span>,        <span class="token string">"Scope"</span><span class="token keyword">:</span> <span class="token string">"local"</span>,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"bridge"</span>,        <span class="token string">"EnableIPv6"</span><span class="token keyword">:</span> false,        <span class="token string">"IPAM"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"default"</span>,            <span class="token string">"Options"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token string">"Subnet"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.0/16"</span>,                    <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.1"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"Internal"</span><span class="token keyword">:</span> false,        <span class="token string">"Attachable"</span><span class="token keyword">:</span> false,        <span class="token string">"Ingress"</span><span class="token keyword">:</span> false,        <span class="token string">"ConfigFrom"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Network"</span><span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>,        <span class="token string">"ConfigOnly"</span><span class="token keyword">:</span> false,        <span class="token string">"Containers"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,        <span class="token string">"Options"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,        <span class="token string">"Labels"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p>启动两个tomcat进行测试：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name tomcat-net-01 --net mynet tomcat</span>5a443e156cabadffd64e226fa728a387ad65ab65fba2314e3dd5c20cfd623073<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name tomcat-net-02 --net mynet tomcat</span>0f3909e224c8d8b977979b0a38a5ff1b26106179a18e87f8bde7bb62023a2dd5<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network inspect mynet</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"mynet"</span>,        <span class="token string">"Id"</span><span class="token keyword">:</span> <span class="token string">"3d1c1fc671b0868404208e873de8efc6539f382e8a9b543ed136f8e362753da4"</span>,        <span class="token string">"Created"</span><span class="token keyword">:</span> <span class="token string">"2020-11-26T09:33:07.248648974+08:00"</span>,        <span class="token string">"Scope"</span><span class="token keyword">:</span> <span class="token string">"local"</span>,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"bridge"</span>,        <span class="token string">"EnableIPv6"</span><span class="token keyword">:</span> false,        <span class="token string">"IPAM"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"default"</span>,            <span class="token string">"Options"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token string">"Subnet"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.0/16"</span>,                    <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.1"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"Internal"</span><span class="token keyword">:</span> false,        <span class="token string">"Attachable"</span><span class="token keyword">:</span> false,        <span class="token string">"Ingress"</span><span class="token keyword">:</span> false,        <span class="token string">"ConfigFrom"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Network"</span><span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>,        <span class="token string">"ConfigOnly"</span><span class="token keyword">:</span> false,        <span class="token string">"Containers"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"0f3909e224c8d8b977979b0a38a5ff1b26106179a18e87f8bde7bb62023a2dd5"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"tomcat-net-02"</span>,                <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"f37105a2d780fe82974e4f198f6dd1f4b5737bfd91f51f47e6c4fb994b759040"</span>,                <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:c0:a8:00:03"</span>,                <span class="token string">"IPv4Address"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.3/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span>,            <span class="token string">"5a443e156cabadffd64e226fa728a387ad65ab65fba2314e3dd5c20cfd623073"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"tomcat-net-01"</span>,                <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"06c688456f25e0fd883ff4cda9138b38cd505cecd765573a85552c3d946f2279"</span>,                <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:c0:a8:00:02"</span>,                <span class="token string">"IPv4Address"</span><span class="token keyword">:</span> <span class="token string">"192.168.0.2/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"Options"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,        <span class="token string">"Labels"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#再次测试ping连接</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat-net-01 ping 192.168.0.3</span>PING 192.168.0.3 <span class="token punctuation">(</span>192.168.0.3<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 192.168.0.3: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.101 ms64 bytes from 192.168.0.3: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.082 ms^C--- 192.168.0.3 <span class="token function">ping</span> statistics ---2 packets transmitted, 2 received, 0% packet loss, <span class="token function">time</span> 999msrtt min/avg/max/mdev <span class="token operator">=</span> 0.082/0.091/0.101/0.013 ms<span class="token comment" spellcheck="true">#现在不使用--link也可以ping名字了</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat-net-01 ping tomcat-net-02</span>PING tomcat-net-02 <span class="token punctuation">(</span>192.168.0.3<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from tomcat-net-02.mynet <span class="token punctuation">(</span>192.168.0.3<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.067 ms64 bytes from tomcat-net-02.mynet <span class="token punctuation">(</span>192.168.0.3<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.079 ms64 bytes from tomcat-net-02.mynet <span class="token punctuation">(</span>192.168.0.3<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.094 ms^C--- tomcat-net-02 <span class="token function">ping</span> statistics ---3 packets transmitted, 3 received, 0% packet loss, <span class="token function">time</span> 1001msrtt min/avg/max/mdev <span class="token operator">=</span> 0.067/0.080/0.094/0.011 ms<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><p>自定义的网络，docker自动维护好了对应的关系，推荐平时这样使用网络。</p><blockquote><p>优点</p></blockquote><p>不同的集群使用不同的网络，保证集群是安全和健康的。</p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network --help</span>Usage:    docker network COMMANDManage networksCommands:<span class="token comment" spellcheck="true">#connect     Connect a container to a network</span>  connect     Connect a container to a network  create      Create a network  disconnect  Disconnect a container from a network  inspect     Display detailed information on one or <span class="token function">more</span> networks  <span class="token function">ls</span>          List networks  prune       Remove all unused networks  <span class="token function">rm</span>          Remove one or <span class="token function">more</span> networksRun <span class="token string">'docker network COMMAND --help'</span> <span class="token keyword">for</span> <span class="token function">more</span> information on a command.</code></pre><p><strong>connect</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network connect --help</span>Usage:    docker network connect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NETWORK CONTAINERConnect a container to a networkOptions:      --alias strings           Add network-scoped <span class="token function">alias</span> <span class="token keyword">for</span> the container      --driver-opt strings      driver options <span class="token keyword">for</span> the network      --ip string               IPv4 address <span class="token punctuation">(</span>e.g., 172.30.100.104<span class="token punctuation">)</span>      --ip6 string              IPv6 address <span class="token punctuation">(</span>e.g., 2001:db8::33<span class="token punctuation">)</span>      --link list               Add <span class="token function">link</span> to another container      --link-local-ip strings   Add a link-local address <span class="token keyword">for</span> the container</code></pre><p><img src="/archives/4a3d459a/image-20201126101012875.png" alt=""></p><p><strong>测试</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#测试打通tomcat01 -mynet</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network connect mynet tomcat01</span><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker network inspect mynet</span></code></pre><p><img src="/archives/4a3d459a/image-20201126100441544.png" alt=""></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat01 ping tomcat-net-01</span>PING tomcat-net-01 <span class="token punctuation">(</span>192.168.0.2<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from tomcat-net-01.mynet <span class="token punctuation">(</span>192.168.0.2<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.088 ms64 bytes from tomcat-net-01.mynet <span class="token punctuation">(</span>192.168.0.2<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.075 ms64 bytes from tomcat-net-01.mynet <span class="token punctuation">(</span>192.168.0.2<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>64 time<span class="token operator">=</span>0.076 ms^C--- tomcat-net-01 <span class="token function">ping</span> statistics ---3 packets transmitted, 3 received, 0% packet loss, <span class="token function">time</span> 1001msrtt min/avg/max/mdev <span class="token operator">=</span> 0.075/0.079/0.088/0.011 ms<span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><blockquote><p>结论</p></blockquote><p>假设要跨网络操作容器，需要使用<code>docker network connect</code>连通。</p><h2 id="部署Redis集群"><a href="#部署Redis集群" class="headerlink" title="部署Redis集群"></a>部署Redis集群</h2><p>1、创建网卡</p><pre class=" language-bash"><code class="language-bash">docker network create redis --subnet 172.38.0.0/16</code></pre><p>2、通过shell脚本创建6个redis配置</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 1 6<span class="token variable">)</span></span><span class="token punctuation">;</span> \<span class="token keyword">do</span> \<span class="token function">mkdir</span> -p /mydata/redis/node-<span class="token variable">${port}</span>/conf<span class="token function">touch</span> /mydata/redis/node-<span class="token variable">${port}</span>/conf/redis.conf<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> EOF <span class="token operator">></span>/mydata/redis/node-<span class="token variable">${port}</span>/conf/redis.confport 6379bind 0.0.0.0cluster-enabled <span class="token function">yes</span>cluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1<span class="token variable">${port}</span>cluster-announce-port 6379cluster-announce-bus-port 16379appendonly <span class="token function">yes</span>EOF<span class="token keyword">done</span></code></pre><p>3、启动</p><pre class=" language-bash"><code class="language-bash">docker run -p 637<span class="token variable">${port}</span>:6379 -p 1637<span class="token variable">${port}</span>:16379 --name redis-<span class="token variable">${port}</span> \-v /mydata/redis/node-<span class="token variable">${port}</span>/data:/data \-v /mydata/redis/node-<span class="token variable">${port}</span>/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.1<span class="token variable">${port}</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> \docker run -p 6371:6379 -p 16371:16379 --name redis-1 \-v /mydata/redis/node-1/data:/data \-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> docker run -p 6372:6379 -p 16372:16379 --name redis-2 \-v /mydata/redis/node-2/data:/data \-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> docker run -p 6373:6379 -p 16373:16379 --name redis-3 \-v /mydata/redis/node-3/data:/data \-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> docker run -p 6374:6379 -p 16374:16379 --name redis-4 \-v /mydata/redis/node-4/data:/data \-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span>docker run -p 6375:6379 -p 16375:16379 --name redis-5 \-v /mydata/redis/node-5/data:/data \-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span>docker run -p 6376:6379 -p 16376:16379 --name redis-6 \-v /mydata/redis/node-6/data:/data \-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span></code></pre><p>4、创建集群</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it redis-1 /bin/sh</span>/data <span class="token comment" spellcheck="true">#</span>/data <span class="token comment" spellcheck="true"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 -</span>-cluster-replicas 1/data <span class="token comment" spellcheck="true"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 -</span>-cluster-replicas 1<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token function">hash</span> slots allocation on 6 nodes<span class="token punctuation">..</span>.Master<span class="token punctuation">[</span>0<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 0 - 5460Master<span class="token punctuation">[</span>1<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 5461 - 10922Master<span class="token punctuation">[</span>2<span class="token punctuation">]</span> -<span class="token operator">></span> Slots 10923 - 16383Adding replica 172.38.0.15:6379 to 172.38.0.11:6379Adding replica 172.38.0.16:6379 to 172.38.0.12:6379Adding replica 172.38.0.14:6379 to 172.38.0.13:6379M: 4562280ea4f7c7e49fcadfc299d0c9912d767988 172.38.0.11:6379   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> masterM: d7f953003f939e0a6aec2796635d039acc61a538 172.38.0.12:6379   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> masterM: 8cd3da0e9c72dab60380e6ef03dfb66352434ac8 172.38.0.13:6379   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> masterS: 2f5df14d3bdb5c340a77cb0a59f564debc8474f8 172.38.0.14:6379   replicates 8cd3da0e9c72dab60380e6ef03dfb66352434ac8S: 39422e8958039c54b850539f8bff28b0e424b7f5 172.38.0.15:6379   replicates 4562280ea4f7c7e49fcadfc299d0c9912d767988S: f92d88b990e47738ccec9012b5b43d2ad1feae3d 172.38.0.16:6379   replicates d7f953003f939e0a6aec2796635d039acc61a538Can I <span class="token keyword">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each node<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to <span class="token function">join</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using node 172.38.0.11:6379<span class="token punctuation">)</span>M: 4562280ea4f7c7e49fcadfc299d0c9912d767988 172.38.0.11:6379   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 2f5df14d3bdb5c340a77cb0a59f564debc8474f8 172.38.0.14:6379   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 8cd3da0e9c72dab60380e6ef03dfb66352434ac8S: f92d88b990e47738ccec9012b5b43d2ad1feae3d 172.38.0.16:6379   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates d7f953003f939e0a6aec2796635d039acc61a538M: d7f953003f939e0a6aec2796635d039acc61a538 172.38.0.12:6379   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>M: 8cd3da0e9c72dab60380e6ef03dfb66352434ac8 172.38.0.13:6379   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 39422e8958039c54b850539f8bff28b0e424b7f5 172.38.0.15:6379   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 4562280ea4f7c7e49fcadfc299d0c9912d767988<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All 16384 slots covered./data <span class="token comment" spellcheck="true"># </span></code></pre><h1 id="十一、SpringBoot微服务打包Docker镜像"><a href="#十一、SpringBoot微服务打包Docker镜像" class="headerlink" title="十一、SpringBoot微服务打包Docker镜像"></a>十一、SpringBoot微服务打包Docker镜像</h1><p>1、构建SpringBoot项目。</p><p>2、打包应用。</p><pre><code>IDEA-&gt;右侧边栏Maven-&gt;项目名-&gt;Lifecycle-&gt;packageBUILD SUCCESS，即打包成功。</code></pre><p>3、编写Dockerfile。</p><pre><code>在打包成功的target目录下创建Dockerfile文件（代码高亮，需安装docker插件）dockerfile文件内容如下：FROM java:8COPY *.jar /app.jarCMD ["--server.port=8080"]EXPOSE 8080\ENTRYPOINT ["java","-jar","/app.jar"]</code></pre><p>4、构建镜像。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /home/</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>docker-test-volume  mysql  <span class="token function">test</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir idea</span><span class="token punctuation">[</span>root@lskj home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd idea/</span><span class="token punctuation">[</span>root@lskj idea<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span><span class="token punctuation">[</span>root@lskj idea<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#将打包好的jar包和Dockerfile文件上传至idea目录。</span><span class="token punctuation">[</span>root@lskj idea<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -t test .</span></code></pre><p>5、发布运行。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@lskj idea<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d --P --name test-springboot test</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/av838132893&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://lskjwp.gitee.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://lskjwp.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/8eda3648/"/>
    <id>https://lskjwp.gitee.io/archives/8eda3648/</id>
    <published>2020-11-20T04:02:30.000Z</published>
    <updated>2021-11-14T07:16:13.175Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1S54y1R7SB" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p><a href="http://c.biancheng.net/redis/" target="_blank" rel="noopener">Redis</a> 是当前互联网世界最为流行的 <a href="http://c.biancheng.net/nosql/" target="_blank" rel="noopener">NoSQL</a>（Not Only SQL）数据库。NoSQL 在互联网系统中的作用很大，因为它可以在很大程度上提高互联网系统的性能。</p><p>Redis 具备一定持久层的功能，也可以作为一种缓存工具。对于 NoSQL 数据库而言，作为持久层，它存储的数据是半结构化的，这就意味着计算机在读入内存中有更少的规则，读入速度更快。</p><p><strong>Redis</strong>和<strong>MongoDB</strong>是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以<strong>支持每秒十几万次的读/写操作</strong>，其性能远超数据库，并且还<strong>支持集群、分布式、主从同步等</strong>配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还<strong>支持一定的事务能力</strong>，这保证了高并发的场景下数据的安全和一致性。</p><h2 id="1-1、什么是NoSQL"><a href="#1-1、什么是NoSQL" class="headerlink" title="1-1、什么是NoSQL"></a>1-1、什么是NoSQL</h2><p>NoSQL泛指非关系型数据库。</p><p>关系型数据库：表格，行，列。（POI，一个开源的Java读写Excel、WORD等微软OLE2组件文档的项目。）</p><blockquote><p>NoSQL特点</p></blockquote><p>1、方便扩展（数据之间没有关系，很好扩展）。</p><p>2、大数据量、高性能（Redis，一秒读写8万次，读取11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高）。</p><p>3、数据是多类型的（不需要事先设计数据库，随取随用）。</p><p>4、传统RDBMS（一般指关系数据库管理系统）和NoSQL</p><pre><code>传统的RDBMS：- 结构化组织- SQL- 数据和关系都存在单独的表中（row col）- 数据操作，数据定义语言- 严格的一致性- 基础的事务- ...</code></pre><pre><code>NoSQL- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文件存储，图形数据库- 最终一致性- CAP定理和BASE- 高性能，高可用，高可扩展- ...</code></pre><blockquote><p>了解3V+3高</p><p><strong>大数据时代的3V：主要是描述问题的</strong></p><ol><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ol><p><strong>互联网需求的3高：主要是对程序的基本要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol></blockquote><h2 id="1-2、NoSQL四大分类"><a href="#1-2、NoSQL四大分类" class="headerlink" title="1-2、NoSQL四大分类"></a>1-2、NoSQL四大分类</h2><blockquote><p>KV键值对</p></blockquote><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><blockquote><p>文档型数据库（bson格式，与json一样）</p></blockquote><ul><li>MongoDB<ul><li>MongoDB是一个基于分布式文件存储的数据库（C++编写），主要用来处理大量的文档。</li><li>MongoDB是一个介于关系型数据库和菲关系型数据库中间的产品。</li><li>MongoDB是菲关系型数据库中功能最丰富的，最像关系型数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p>列存储数据库</p></blockquote><ul><li>HBase</li><li>分布式文件系统</li></ul><blockquote><p>图形关系数据库</p></blockquote><p>不是存图形，存放的是关系。</p><ul><li>Neo4j，InfoGrid…</li></ul><table><thead><tr><th align="center"><strong>分类</strong></th><th align="center"><strong>Examples举例</strong></th><th align="center">典型应用场景</th><th align="center">数据模型</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center"><strong>键值（key-value）</strong></td><td align="center">Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td align="center">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td align="center">Key 指向 Value 的键值对，通常用hash table来实现</td><td align="center">查找速度快</td><td align="center">数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td align="center"><strong>列存储数据库</strong></td><td align="center">Cassandra, HBase, Riak</td><td align="center">分布式的文件系统</td><td align="center">以列簇式存储，将同一列数据存在一起</td><td align="center">查找速度快，可扩展性强，更容易进行分布式扩展</td><td align="center">功能相对局限</td></tr><tr><td align="center"><strong>文档型数据库</strong></td><td align="center">CouchDB, MongoDb</td><td align="center">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td align="center">Key-Value对应的键值对，Value为结构化数据</td><td align="center">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td align="center">查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td align="center"><strong>图形(Graph)数据库</strong></td><td align="center">Neo4J, InfoGrid, Infinite Graph</td><td align="center">社交网络，推荐系统等。专注于构建关系图谱</td><td align="center">图结构</td><td align="center">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td align="center">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td></tr></tbody></table><h1 id="二、Redis"><a href="#二、Redis" class="headerlink" title="二、Redis"></a>二、Redis</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2-1、概述"></a>2-1、概述</h2><blockquote><p>什么是Redis？</p></blockquote><p><em>Redis</em>（Remote Dictionary Server )，即远程字典服务，是一个开源的，使用C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis有什么用？</p></blockquote><p>1、内存存储、持久化，内存中是断电即失。（持久化，rdb、aof）</p><p>2、效率高，可以用于高速缓存。</p><p>3、发布订阅系统。</p><p>4、地图信息分析。</p><p>5、计时器、计数器（浏览量）。</p><p>6、……</p><blockquote><p>特性</p></blockquote><p>1、多样的数据类型。</p><p>2、持久化。</p><p>3、集群。</p><p>4、事务。</p><p>5、……</p><p>官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>中文官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><p>下载地址：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><h2 id="2-2、window下安装"><a href="#2-2、window下安装" class="headerlink" title="2-2、window下安装"></a>2-2、window下安装</h2><p>1、下载地址：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a></p><p>2、解压压缩包。</p><p>3、进入解压后的目录，开启Redis（双击运行redis-server.exe）</p><p>4、使用Redis客户端连接Redis，打开客户端（运行redis-cli.exe）。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span>   <span class="token comment" spellcheck="true">#测试连接</span>PONG127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name lskj <span class="token comment" spellcheck="true"># set基本值（key value）</span>OK127.0.0.1:6379<span class="token operator">></span> get name <span class="token comment" spellcheck="true"># get key获取值</span><span class="token string">"lskj"</span>127.0.0.1:6379<span class="token operator">></span></code></pre><p><strong>Windows下使用简单，但redis推荐使用Linux开发。</strong></p><h2 id="2-3、Linux下安装"><a href="#2-3、Linux下安装" class="headerlink" title="2-3、Linux下安装"></a>2-3、Linux下安装</h2><p>1、下载地址：</p><ul><li>GitHub：<a href="https://github.com/redis/redis/releases" target="_blank" rel="noopener">https://github.com/redis/redis/releases</a></li><li>官网：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></li></ul><p>2、将下载好的压缩包解压（usr/local/）。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf redis-6.0.9.tar.gz</code></pre><p>3、进入解压后的文件目录，可以看到redis的配置文件<code>redis.conf</code>。</p><p>4、基本环境安装。</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++</code></pre><p><code>gcc -v</code>命令进行gcc版本查看，版本为4.4.7。</p><p>redis6.0+需要的gcc版本为5.3及以上，所以需要升级gcc版本。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 升级gcc到9以上</span>yum -y <span class="token function">install</span> centos-release-sclyum -y <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<span class="token comment" spellcheck="true"># 临时将此时的gcc版本改为9，退出xshell或者重启就会恢复到原来的gcc版本。</span>scl <span class="token function">enable</span> devtoolset-9 <span class="token function">bash</span><span class="token comment" spellcheck="true"># 永久改变</span><span class="token keyword">echo</span> <span class="token string">"source /opt/rh/devtoolset-9/enable"</span> <span class="token operator">>></span>/etc/profile<span class="token comment" spellcheck="true"># 此时查看gcc版本，便已升级</span>gcc -v</code></pre><p>继续执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><p><img src="/archives/8eda3648/image-20201116112545502.png" alt=""></p><blockquote><p><strong>清除之前编译的可执行文件及配置文件</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> clean</code></pre><p><strong>清除所有生成的文件</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> distclean</code></pre></blockquote><p>5、redis的默认安装路径：<code>usr/local/bin</code>。</p><blockquote><p><strong>前台启动</strong></p><pre class=" language-bash"><code class="language-bash">redis-server</code></pre><p><strong>后台启动</strong></p><pre class=" language-bash"><code class="language-bash">redis-server <span class="token operator">&amp;</span></code></pre><p><strong>根据配置文件启动</strong>：启动命令 配置文件 &amp;</p><pre class=" language-bash"><code class="language-bash">redis-server redis.conf <span class="token operator">&amp;</span></code></pre></blockquote><p>6、将redis配置文件，复制到<code>usr/local/bin/config</code>目录下。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> config<span class="token function">cp</span> /usr/local/redis-6.0.9/redis.conf config</code></pre><p>以后，可以使用复制的这个配置文件（redis.conf）进行启动。</p><p>7、redis默认不是后台启动的，需修改配置文件<code>redis.conf</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">################################# GENERAL #####################################</span><span class="token comment" spellcheck="true"># By default Redis does not run as a daemon. Use 'yes' if you need it.</span><span class="token comment" spellcheck="true"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span>daemonize <span class="token function">yes</span></code></pre><p>将<code>daemonize no</code>改为<code>daemonize yes</code>。</p><p>8、启动redis服务（回到bin目录下执行）。</p><pre class=" language-bash"><code class="language-bash">redis-server config/redis.conf</code></pre><p>通过指定的配置文件启动服务。</p><p>9、使用redis-cli进行连接测试。</p><pre class=" language-bash"><code class="language-bash">redis-cli -p 6379</code></pre><p><img src="/archives/8eda3648/image-20201116125602344.png" alt=""></p><p>10、查看redis的进程是否开启。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> redis</code></pre><p><img src="/archives/8eda3648/image-20201116130014276.png" alt=""></p><p>11、关闭redis服务。</p><p><img src="/archives/8eda3648/image-20201116130139355.png" alt=""></p><ul><li><p>shutdown：关闭redis。</p></li><li><p>exit：退出。</p></li></ul><p>12、再次查看进程是否存在。</p><p><img src="/archives/8eda3648/image-20201116130400915.png" alt=""></p><h1 id="三、测试性能"><a href="#三、测试性能" class="headerlink" title="三、测试性能"></a>三、测试性能</h1><p>redis-benchmark是一个压力测试工具。</p><p>redis 性能测试工具可选参数如下所示：</p><table><thead><tr><th align="center">序号</th><th align="center">选项</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>-h</strong></td><td align="center">指定服务器主机名</td><td align="center">127.0.0.1</td></tr><tr><td align="center">2</td><td align="center"><strong>-p</strong></td><td align="center">指定服务器端口</td><td align="center">6379</td></tr><tr><td align="center">3</td><td align="center"><strong>-s</strong></td><td align="center">指定服务器 socket</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"><strong>-c</strong></td><td align="center">指定并发连接数</td><td align="center">50</td></tr><tr><td align="center">5</td><td align="center"><strong>-n</strong></td><td align="center">指定请求数</td><td align="center">10000</td></tr><tr><td align="center">6</td><td align="center"><strong>-d</strong></td><td align="center">以字节的形式指定 SET/GET 值的数据大小</td><td align="center">2</td></tr><tr><td align="center">7</td><td align="center"><strong>-k</strong></td><td align="center">1=keep alive 0=reconnect</td><td align="center">1</td></tr><tr><td align="center">8</td><td align="center"><strong>-r</strong></td><td align="center">SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center"><strong>-P</strong></td><td align="center">通过管道传输 <numreq> 请求</numreq></td><td align="center">1</td></tr><tr><td align="center">10</td><td align="center"><strong>-q</strong></td><td align="center">强制退出 redis。仅显示 query/sec 值</td><td align="center"></td></tr><tr><td align="center">11</td><td align="center"><strong>–csv</strong></td><td align="center">以 CSV 格式输出</td><td align="center"></td></tr><tr><td align="center">12</td><td align="center"><strong>-l</strong></td><td align="center">生成循环，永久执行测试</td><td align="center"></td></tr><tr><td align="center">13</td><td align="center"><strong>-t</strong></td><td align="center">仅运行以逗号分隔的测试命令列表。</td><td align="center"></td></tr><tr><td align="center">14</td><td align="center"><strong>-I</strong></td><td align="center">Idle 模式。仅打开 N 个 idle 连接并等待。</td><td align="center"></td></tr></tbody></table><p><code>redis-benchmark 命令参数</code></p><p>测试：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 测试100个并发连接 100000个请求</span>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> PING_INLINE <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  100000 requests completed <span class="token keyword">in</span> 1.30 seconds <span class="token comment" spellcheck="true">#对10万个请求进行写入测试</span>  100 parallel clients <span class="token comment" spellcheck="true"># 100个并发客户端</span>  3 bytes payload <span class="token comment" spellcheck="true"># 每次写入3个字节</span>  keep alive: 1 <span class="token comment" spellcheck="true"># 只有一台服务器来处理这些请求，单机性能</span>  host configuration <span class="token string">"save"</span><span class="token keyword">:</span> 900 1 300 10 60 10000  host configuration <span class="token string">"appendonly"</span><span class="token keyword">:</span> no  multi-thread: no<span class="token punctuation">..</span>.99.72% <span class="token operator">&lt;=</span> 1.8 milliseconds99.78% <span class="token operator">&lt;=</span> 1.9 milliseconds99.85% <span class="token operator">&lt;=</span> 2 milliseconds100.00% <span class="token operator">&lt;=</span> 2 milliseconds  <span class="token comment" spellcheck="true"># 所有请求在3毫秒内处理完成</span>76804.91 requests per second  <span class="token comment" spellcheck="true">#每秒处理76804.91个请求</span></code></pre><h1 id="四、基础知识"><a href="#四、基础知识" class="headerlink" title="四、基础知识"></a>四、基础知识</h1><p>redis默认有16个数据库。默认使用的是第0个数据库。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Set the number of databases. The default database is DB 0, you can select</span><span class="token comment" spellcheck="true"># a different one on a per-connection basis using SELECT &lt;dbid> where</span><span class="token comment" spellcheck="true"># dbid is a number between 0 and 'databases'-1</span>databases 16</code></pre><blockquote><p>使用select进行切换数据库。</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1 <span class="token comment" spellcheck="true"># 切换数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> dbsize <span class="token comment" spellcheck="true"># 查看数据库大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> </code></pre><blockquote><p>查看数据库所有的key</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> keys * <span class="token comment" spellcheck="true"># 查看数据库所有的key</span>1<span class="token punctuation">)</span> <span class="token string">"key:__rand_int__"</span>2<span class="token punctuation">)</span> <span class="token string">"mylist"</span>3<span class="token punctuation">)</span> <span class="token string">"counter:__rand_int__"</span>4<span class="token punctuation">)</span> <span class="token string">"name"</span>5<span class="token punctuation">)</span> <span class="token string">"myhash"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span></code></pre><blockquote><p>清除当前数据库</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">set</span> name lskjOK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> flushdb <span class="token comment" spellcheck="true"># 清除当前数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> </code></pre><blockquote><p>清除全部数据库的内容</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 0OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"key:__rand_int__"</span>2<span class="token punctuation">)</span> <span class="token string">"mylist"</span>3<span class="token punctuation">)</span> <span class="token string">"counter:__rand_int__"</span>4<span class="token punctuation">)</span> <span class="token string">"name"</span>5<span class="token punctuation">)</span> <span class="token string">"myhash"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> flushall <span class="token comment" spellcheck="true"># 清除全部数据库的内容</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> 0OK127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>redis是单线程的</p></blockquote><p>redis是基于内存操作，CPU不是redis的性能瓶颈，redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了。</p><p>redis是用C语言写的。</p><blockquote><p>redis为什么是单线程，还怎样快？</p></blockquote><p>1、误区一：高性能的服务器一定是多线程的。</p><p>2、误区二：多线程（CPU上下文会切换）一定比单线程效率高。</p><p>redis是将所有的数据全部放在内存中的，所以使用单线程去操作就是最高的。多线程（CPU上下文切换：是耗时的操作），对于内存系统而言，如果没有上下文切换效率最高，多次读写都是在一个CPU上，就内存情况来看，这个是最佳的方案。</p><h1 id="五、五大数据类型"><a href="#五、五大数据类型" class="headerlink" title="五、五大数据类型"></a>五、五大数据类型</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<code>数据库</code>、<code>缓存</code>和<code>消息中间件</code>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p><h2 id="关于Key的操作命令"><a href="#关于Key的操作命令" class="headerlink" title="关于Key的操作命令"></a>关于Key的操作命令</h2><p><strong>1、查看数据库中的key</strong></p><blockquote><p><strong><code>*</code>匹配0个或多个字符，<code>?</code>匹配1个字符，<code>[]</code>匹配[]里面的1个字符</strong></p><p><code>keys k*</code>查看所有以k开头的key</p><p><code>keys k*y</code>查看所有以h开头、以y结尾的key</p><p><code>keys k?y</code>查看所有以h开头、以o结尾的、并且中间只有一个字符的key</p><p><code>keys h[abce]llo</code>查看所有以h开头、以llo结尾，并且h后面只能读取abc中的一个字符的key</p></blockquote><p><strong>2、判断key在数据库中是否存在</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">exists key <span class="token comment" spellcheck="true">#如果存在，则返回1；如果不存在，则返回0</span>exists key <span class="token punctuation">[</span>key key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#返回值是存在的key数量</span></code></pre><p><strong>3、移动指定key到指定的数据库实例</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">move key index</code></pre><p><strong>4、查看指定key的剩余生存时间</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">ttl key</code></pre><p>如果key没有设置生存时间，返回-1；如果key不存在，返回-2。</p><p><strong>5、设置key的最大生存时间（过期时间）</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">expire key seconds</code></pre><p><strong>6、查看指定key的数据类型</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">type</span> key</code></pre><p><strong>7、重命名key</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rename</span> key newkey</code></pre><p><strong>8、删除key</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">del key <span class="token punctuation">[</span>key key <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p>返回值是实际删除key的数量</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name lskjOK127.0.0.1:6379<span class="token operator">></span> keys * <span class="token comment" spellcheck="true">#查看所有的key的名字</span>1<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> age 20 <span class="token comment" spellcheck="true">#set key</span>OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"age"</span>2<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token operator">></span> exists name <span class="token comment" spellcheck="true">#判断当前的key是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> exists <span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> move name 1 <span class="token comment" spellcheck="true">#移除当前的key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"age"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name lskjOK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"age"</span>2<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token operator">></span> get name<span class="token string">"lskj"</span>127.0.0.1:6379<span class="token operator">></span> expire name 10 <span class="token comment" spellcheck="true"># 设置key的过期时间，单位为秒</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name <span class="token comment" spellcheck="true">#查看当前key的剩余时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">type</span> name <span class="token comment" spellcheck="true">#查看当前key对应的value的类型</span>string127.0.0.1:6379<span class="token operator">></span> <span class="token function">type</span> agestring127.0.0.1:6379<span class="token operator">></span> </code></pre><p>官网命令大全：<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>字符串类型。</p><p><strong>1、将string类型的数据设置到redis中</strong></p><p>如果key已经存在，则后来的value会将之前的value覆盖掉。</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> key value</code></pre><p><strong>2、从redis中获取string类型的数据</strong></p><pre class=" language-bash"><code class="language-bash">get key</code></pre><p><strong>3、追加字符串</strong></p><pre class=" language-bash"><code class="language-bash">append key value</code></pre><p>返回追加之后的字符串长度。如果key不存在，则新创建一个key，并且把value值设置为value。</p><p><strong>4、获取字符串数据的长度</strong></p><pre class=" language-bash"><code class="language-bash">strlen key</code></pre><p><strong>5、将字符串数值进行加1运算</strong></p><pre class=" language-bash"><code class="language-bash">incr key</code></pre><p>要求key所表示的value必须是数值，否则报错。</p><p>返回加1运算之后的数据。如果key不存在，首先设置一个key，值初始化为0，然后进行incr运算。</p><p><strong>6、将字符串数值进行减1运算</strong></p><pre class=" language-bash"><code class="language-bash">decr key</code></pre><p>要求key所表示的value必须是数值，否则报错。</p><p>返回减1运算之后的数据。如果key不存在，首先设置一个key，值初始化为0，然后进行decr运算。</p><p><strong>7、将字符串数值进行加offset运算</strong></p><pre class=" language-bash"><code class="language-bash">incrby key offset</code></pre><p>要求key所表示的value必须是数值，否则报错。</p><p>返回加offset运算之后的数据。如果key不存在，首先设置一个key，值初始化为0，然后进行incrby运算。</p><p><strong>8、将字符串数值进行减offset运算</strong></p><pre class=" language-bash"><code class="language-bash">decrby key offset</code></pre><p>要求key所表示的value必须是数值，否则报错。</p><p>返回减offset运算之后的数据。如果key不存在，首先设置一个key，值初始化为0，然后进行decrby运算。</p><p><strong>9、闭区间获取字符串中从startIndex到endIndex的字符组成的子字符串</strong></p><pre class=" language-bash"><code class="language-bash">getrange key startIndex endIndex</code></pre><p>下标自左向右，从0开始，依次往后。闭区间截取。</p><p>字符串中每一个下标也可以是负数，负数下标表示自右向左，从-1开始，一次往前，最右边的字符的下标为-1。</p><p><strong>10、用value从下标为startIndex开始的字符串</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">setrange key startIndex value</code></pre><p><strong>11、设置字符串数据的同时，设置它的最大生命周期</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">setex key seconds value</code></pre><p><strong>12、设置字符串类型的数据value到redis数据库中，当key不存在时设置成功，否则，放弃设置。</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">setnx key value</code></pre><p><strong>13、批量将string类型的数据设置到redis中</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">mset key1 value1 key2 value2 <span class="token punctuation">..</span>.</code></pre><p><strong>14、批量从redis中获取string类型的数据</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">mget key1 key2 key3 <span class="token punctuation">..</span>.</code></pre><p><strong>15、批量设置string类型的数据value到redis数据库中，当所有key都不存在时设置成功，否则（只有一个已经存在）全部放弃设置</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">msetnx key1 value1 key2 value2 <span class="token punctuation">..</span>.</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 v1 <span class="token comment" spellcheck="true">#设置值</span>OK127.0.0.1:6379<span class="token operator">></span> get key1 <span class="token comment" spellcheck="true">#获取值</span><span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> exists key1 <span class="token comment" spellcheck="true">#判断某一个key是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> append key1 <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#追加字符串，如果当前key不存在，就相当于setkey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello"</span>127.0.0.1:6379<span class="token operator">></span> strlen key1 <span class="token comment" spellcheck="true">#获取字符串的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> append key1 <span class="token string">",test!"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13127.0.0.1:6379<span class="token operator">></span> append key1 <span class="token string">",test!"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13127.0.0.1:6379<span class="token operator">></span> append name <span class="token string">"test"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"key1"</span>2<span class="token punctuation">)</span> <span class="token string">"name"</span>127.0.0.1:6379<span class="token operator">></span> get name<span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true">#步长 i+=</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0 <span class="token comment" spellcheck="true">#初始浏览量为0</span>OK127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incr views <span class="token comment" spellcheck="true">#自增1 浏览量+1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"2"</span>127.0.0.1:6379<span class="token operator">></span> decr views <span class="token comment" spellcheck="true">#自减1 浏览量—1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get views<span class="token string">"0"</span>127.0.0.1:6379<span class="token operator">></span> incrby views 10 <span class="token comment" spellcheck="true">#设置步长，指定增量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> decrby views 5<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true">#字符串范围 range</span>127.0.0.1:6379<span class="token operator">></span> flushdbOK127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 <span class="token string">"hello,test"</span> <span class="token comment" spellcheck="true">#设置key1的值</span>OK127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"hello,test"</span>127.0.0.1:6379<span class="token operator">></span> getrange key1 0 3 <span class="token comment" spellcheck="true">#截取字符串[0,3]</span><span class="token string">"hell"</span>127.0.0.1:6379<span class="token operator">></span> getrange key1 0 -1 <span class="token comment" spellcheck="true">#获取全部的字符串，与get key一样</span><span class="token string">"hello,test"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#替换</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key2 abcdefgOK127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"abcdefg"</span>127.0.0.1:6379<span class="token operator">></span> setrange key2 1 xx <span class="token comment" spellcheck="true">#替换指定位置开始的字符串</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefg"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># setex（set with expire） #设置过期时间</span><span class="token comment" spellcheck="true"># setnx （set if not exist） #不存在再设置（在分布式锁中常用）</span>127.0.0.1:6379<span class="token operator">></span> setex key3 30 <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#设置key3的值为hello，30秒后过期</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 24127.0.0.1:6379<span class="token operator">></span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 19127.0.0.1:6379<span class="token operator">></span> get key3<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"redis"</span> <span class="token comment" spellcheck="true">#若mykey不存在，创建mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"key2"</span>2<span class="token punctuation">)</span> <span class="token string">"key1"</span>3<span class="token punctuation">)</span> <span class="token string">"mykey"</span>127.0.0.1:6379<span class="token operator">></span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"MongoDB"</span> <span class="token comment" spellcheck="true">#若mykey存在，创建失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># mset</span><span class="token comment" spellcheck="true"># mget</span>127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> mset k1 v1 k2 v2 k3 v3 <span class="token comment" spellcheck="true">#同时设置多个值</span>OK127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k3"</span>2<span class="token punctuation">)</span> <span class="token string">"k2"</span>3<span class="token punctuation">)</span> <span class="token string">"k1"</span>127.0.0.1:6379<span class="token operator">></span> mget k1 k2 k3 <span class="token comment" spellcheck="true">#同时获取多个值</span>1<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span>127.0.0.1:6379<span class="token operator">></span> msetnx k1 v1 k4 v4 <span class="token comment" spellcheck="true">#msetnx是一个原子性操作，要么一起成功，要么一起失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#对象</span><span class="token comment" spellcheck="true"># set user:1 {name:zhangsan,age:20} #设置一个user:1对象 值为json字符来保存一个对象。</span><span class="token comment" spellcheck="true"># user:{id}:{filed} #这样的设计在redis中是可以的</span>127.0.0.1:6379<span class="token operator">></span> mset user:1:name zhangsan user:1:age 20OK127.0.0.1:6379<span class="token operator">></span> mget user:1:name user:1:age1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"20"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># getset #先get后再set</span>127.0.0.1:6379<span class="token operator">></span> getset db redis <span class="token comment" spellcheck="true">#若不存在值，则返回nil</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> getset db mongdb <span class="token comment" spellcheck="true">#若存在值，则获取原来的值，并设置新值</span><span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"mongdb"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p>String类型的使用：value除了是字符串，还可以是数字。（计数器、统计多单位的数量、粉丝数、对象缓存存储）</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>基本的数据类型，列表。在redis中，可以把list当成栈、队列、阻塞队列，元素可以重复。</p><ul><li>一个key有多个value</li><li>多个value之间有顺序，最左侧是表头，最右侧是表尾</li><li>每一个元素都有下标，表头元素的下标是0，依次往后排序，最后一个元素的下标是列表长度-1</li><li>每一个元素的下标又可以用负数表示，负下标表示从表尾计算，最后一个元素下标用-1表示</li><li>元素只在列表中的顺序或者下标由放入的顺序来决定</li></ul><p>所有的list命令都是以<code>l</code>开头的。redis命令不区分大小写。</p><p><strong>1、将一个或多个值一次插入到列表的表头（左侧）</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">lpush key value <span class="token punctuation">[</span>value value <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>2、获取指定列表中指定下标区间的元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">lrange key startIndex endIndex</code></pre><p><strong>3、将一个或者多个值依次插入到列表的表尾（右侧）</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">rpush key value <span class="token punctuation">[</span>value value <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>4、从指定列表中移除并且返回表头元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">lpop key</code></pre><p><strong>5、从指定列表中移除并且返回表尾元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">rpop key</code></pre><p><strong>6、获取指定列表中指定下标的元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">lindex key index</code></pre><p><strong>7、获取指定列表的长度</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">llen key</code></pre><p><strong>8、根据count的值移除指定列表中与value相等的数据</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">lrem key count value</code></pre><p>如果count大于0：从列表的左侧移除count个与value相等的数据。</p><p>如果count小于0：从列表的右侧移除count个与value相等的数据。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush list one <span class="token comment" spellcheck="true">#将一个值或多个值，插入到列表头部（左）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange list 0 -1 <span class="token comment" spellcheck="true">#获取list中的值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 1 <span class="token comment" spellcheck="true">#通过区间获取具体的值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> rpush list righr <span class="token comment" spellcheck="true">#将一个值或多个值，插入到列表尾部（右）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange list 0 11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"righr"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># lpop</span><span class="token comment" spellcheck="true"># rpop</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"righr"</span>127.0.0.1:6379<span class="token operator">></span> lpop list <span class="token comment" spellcheck="true">#移除list的第一个元素</span><span class="token string">"three"</span>127.0.0.1:6379<span class="token operator">></span> rpop list <span class="token comment" spellcheck="true">#移除list的最后一个元素</span><span class="token string">"righr"</span>127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># lindex</span>127.0.0.1:6379<span class="token operator">></span> lindex list 1 <span class="token comment" spellcheck="true">#通过下标获得list中的某一个值</span><span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lindex list 0<span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># llen</span>127.0.0.1:6379<span class="token operator">></span> lpush list one<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> llen list <span class="token comment" spellcheck="true">#返回列表的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># 移除指定的值</span><span class="token comment" spellcheck="true"># lrem</span>127.0.0.1:6379<span class="token operator">></span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>4<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 1 one <span class="token comment" spellcheck="true">#移除list集合中指定的个数的value，精确匹配</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> lrem list 1 three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrem list 2 three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lrange list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># trim</span>127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello3"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> ltrim mylist 1 2 <span class="token comment" spellcheck="true">#通过下标截取指定的长度，这个list已经被改变了，截断了，只剩下截取的元素</span>OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># rpoplpush #移除列表的最后一个元素，将它移动到心得列表中</span>127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> rpoplpush mylist myotherlist <span class="token comment" spellcheck="true">#移除列表的最后一个元素，将它移动到心得列表中</span><span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -1 <span class="token comment" spellcheck="true">#查看原来的列表</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>127.0.0.1:6379<span class="token operator">></span> lrange myotherlist 0 -1 <span class="token comment" spellcheck="true">#查看目标列表</span>1<span class="token punctuation">)</span> <span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># lset 将列表中指定下标的值替换为另外一个值，更新操作</span>127.0.0.1:6379<span class="token operator">></span> exists list <span class="token comment" spellcheck="true">#判断这个列表是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> lset list 0 item <span class="token comment" spellcheck="true">#若不存在列表，更新就会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR no such key127.0.0.1:6379<span class="token operator">></span> lpush list value<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange list 0 01<span class="token punctuation">)</span> <span class="token string">"value"</span>127.0.0.1:6379<span class="token operator">></span> lset list 0 item <span class="token comment" spellcheck="true">#若存在，更新当前下标的值</span>OK127.0.0.1:6379<span class="token operator">></span> lrange list 0 01<span class="token punctuation">)</span> <span class="token string">"item"</span>127.0.0.1:6379<span class="token operator">></span> lset list 1 other <span class="token comment" spellcheck="true">#若不存在，则会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR index out of range127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># linsety 将某一个具体的value插入到列表中某个元素的前面或后面</span>127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">"redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> linsert mylist before <span class="token string">"redis"</span> <span class="token string">",test"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">",test"</span>3<span class="token punctuation">)</span> <span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> linsert mylist after <span class="token string">"redis"</span> new<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">",test"</span>3<span class="token punctuation">)</span> <span class="token string">"redis"</span>4<span class="token punctuation">)</span> <span class="token string">"new"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after，left，right都可以插入值</li><li>若key不存在，创建新的链表</li><li>若key存在，新增内容</li><li>若移除了所有的值，空链表，也代表不存在</li><li>在两边插入或改动值，效率最高。中间元素，相对来说，效率会低一点</li></ul><p>消息排队，消息队列（Lpush Rpop），栈（Lpush Lpop）</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>集合类型。set中的值不能重复。单key多value（无序）。</p><ul><li>一个key对应多个value</li><li>value之间没有顺序，并且不能重复</li><li>元素没有下标</li><li>通过业务数据直接操作集合</li></ul><p><strong>1、将一个或多个元素添加到集合中</strong></p><p>命令：member也就是value</p><pre class=" language-bash"><code class="language-bash">sadd key member <span class="token punctuation">[</span>member member <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><ul><li>如果元素已经存在，则会忽略</li><li>返回成功加入的元素个数</li></ul><p><strong>2、获取指定集合中所有的元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">smembers key</code></pre><p><strong>3、判断指定元素在指定集合中是否存在</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">sismember key member</code></pre><ul><li>存在，返回1</li><li>不存在，返回0</li></ul><p><strong>4、获取指定集合的长度</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">scard key</code></pre><p><strong>5、移除指定集合中一个或多个元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">srem key member <span class="token punctuation">[</span>member member <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><ul><li>不存在，则会忽略</li><li>返回成功移除的个数</li></ul><p><strong>6、随机获取指定集合中的一个或多个元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">srandmember key <span class="token punctuation">[</span>count<span class="token punctuation">]</span></code></pre><ul><li>如果count大于0：随机获取的多个元素之间不能重复</li><li>如果count小于0：随机获取的多个元素之间可能重复</li></ul><p><strong>7、从指定集合中随机移除一个或多个元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">spop key <span class="token punctuation">[</span>count<span class="token punctuation">]</span></code></pre><p>返回移除的元素。</p><p><strong>8、将指定集合中的指定元素移动到另一个元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">smove <span class="token function">source</span> destination member</code></pre><p><strong>9、获取一个集合中，但是其它集合中没有的元素组成的新集合</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sdiff</span> key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>10、获取所有指定集合中都有的元素组成的集合</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">sinter key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>11、获取所有指定集合中所有元素组成的大集合</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">sunion key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#set集合中添加元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"test"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"lskj"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset <span class="token comment" spellcheck="true">#查看指定set的所有值</span>1<span class="token punctuation">)</span> <span class="token string">"lskj"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>3<span class="token punctuation">)</span> <span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> sismember myset hello <span class="token comment" spellcheck="true">#判断某一个值是否在set集合中</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sismember myset redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> scard myset <span class="token comment" spellcheck="true">#获取set集合中的内容元素个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"test"</span> <span class="token comment" spellcheck="true">#将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"test_2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> srem myset <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#移除set集合中的指定元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"lskj"</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span>3<span class="token punctuation">)</span> <span class="token string">"test_2"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># set无序不重复集合，抽随机</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset <span class="token comment" spellcheck="true">#随机抽选出一个元素</span><span class="token string">"lskj"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset<span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> srandmember myset 2 <span class="token comment" spellcheck="true">#随机抽选出指定个数的袁术</span>1<span class="token punctuation">)</span> <span class="token string">"lskj"</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true">#删除指定的key，随机删除一个key</span>127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"lskj"</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span>3<span class="token punctuation">)</span> <span class="token string">"test_2"</span>127.0.0.1:6379<span class="token operator">></span> spop myset <span class="token comment" spellcheck="true">#随机删除set集合中的元素</span><span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> spop myset<span class="token string">"lskj"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"test_2"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># 将一个指定的值，移动到另一个set集合中</span>127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"test"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset <span class="token string">"test_2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset2 <span class="token string">"t"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset2 <span class="token string">"t2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smove myset myset2 <span class="token string">"test_2"</span> <span class="token comment" spellcheck="true"># 将一个指定的值，移动到另一个set集合中</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> smembers myset21<span class="token punctuation">)</span> <span class="token string">"test_2"</span>2<span class="token punctuation">)</span> <span class="token string">"t2"</span>3<span class="token punctuation">)</span> <span class="token string">"t"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># 一些视频网站中，存在共同关注（并集）</span><span class="token comment" spellcheck="true"># 数字集合类：差集、交集、并集</span>127.0.0.1:6379<span class="token operator">></span> sadd key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> <span class="token function">sdiff</span> key1 key2  <span class="token comment" spellcheck="true">#差集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"a"</span>127.0.0.1:6379<span class="token operator">></span> sinter key1 key2 <span class="token comment" spellcheck="true">#交集（共同关注、好友就可以这样实现）</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> sunion key1 key2 <span class="token comment" spellcheck="true">#并集</span>1<span class="token punctuation">)</span> <span class="token string">"e"</span>2<span class="token punctuation">)</span> <span class="token string">"a"</span>3<span class="token punctuation">)</span> <span class="token string">"c"</span>4<span class="token punctuation">)</span> <span class="token string">"b"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p>B站，A用户将所有关注的人放在一个set集合中，将粉丝也放在一个set集合中。</p><p>共同关注、共同爱好、二度好友、推荐好友（六度分割理论）</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>哈希，map集合，key-map集合=&gt;<code>key-&lt;key-value&gt;</code>。</p><p>hash本质和String类型无太大区别，还是一个key-value。</p><p><strong>1、将一个field-value对设置到哈希表中</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hset key field value</code></pre><p>如果key field已经存在，则value会把以前的值覆盖掉。</p><p><strong>2、获取指定哈希表中指定field的值</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hget key field</code></pre><p><strong>3、批量将多个field-value对设置到哈希表中</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hmset key field value <span class="token punctuation">[</span>field value <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>4、批量获取指定哈希表中的field的值</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hmget key field <span class="token punctuation">[</span>field <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>5、获取指定哈希表中所有的field和value</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hgetall key</code></pre><p><strong>6、从指定哈希表中删除一个或者多个field</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hdel key field <span class="token punctuation">[</span>field <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>7、获取指定哈希表中所有的field个数</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hlen key</code></pre><p><strong>8、判断指定哈希表中是否存在某一个field</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hexists key field</code></pre><p><strong>9、获取指定哈希表中所有的field列表</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hkeys key</code></pre><p><strong>10、获取指定哈希表中所有的value列表</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hvals key</code></pre><p><strong>11、对指定哈希表中指定的field的值进行整数加法运算</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hincrby key field int</code></pre><p><strong>12、对指定哈希表中指定的field的值进行浮点数加入运算</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hincrbyfloat key field float</code></pre><p><strong>13、将一个field-value对设置到哈希表中，当key-field已经存在时，则放弃设置；否则，设置filed-value</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">hsetnx key field value</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash field1 <span class="token function">test</span> <span class="token comment" spellcheck="true">#set一个具体key-value</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hget myhash field1 <span class="token comment" spellcheck="true">#获取一个字段值</span><span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> hmset myhash field1 <span class="token string">"t1"</span> field2 <span class="token string">"t"</span> <span class="token comment" spellcheck="true">#set多个key-value</span>OK127.0.0.1:6379<span class="token operator">></span> hmget myhash field1 field2 <span class="token comment" spellcheck="true">#获取多个字段值</span>1<span class="token punctuation">)</span> <span class="token string">"t1"</span>2<span class="token punctuation">)</span> <span class="token string">"t"</span>127.0.0.1:6379<span class="token operator">></span> hgetall myhash <span class="token comment" spellcheck="true">#获取全部的数据</span>1<span class="token punctuation">)</span> <span class="token string">"field1"</span>2<span class="token punctuation">)</span> <span class="token string">"t1"</span>3<span class="token punctuation">)</span> <span class="token string">"field2"</span>4<span class="token punctuation">)</span> <span class="token string">"t"</span>127.0.0.1:6379<span class="token operator">></span> hdel myhash field1 <span class="token comment" spellcheck="true">#删除hash指定key字段，对应的value值也一同删除了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hgetall myhash1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"t"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> hmset myhash field1 hello field2 worldOK127.0.0.1:6379<span class="token operator">></span> hgetall myhash1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"field1"</span>4<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> hlen myhash <span class="token comment" spellcheck="true">#获取hash表的字段数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> hexists myhash field1 <span class="token comment" spellcheck="true">#判断hash中指定字段是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hexists myhash field3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># 只获取所有的field</span><span class="token comment" spellcheck="true"># 只获取所有的value</span>127.0.0.1:6379<span class="token operator">></span> hkeys myhash <span class="token comment" spellcheck="true"># 只获取所有的field</span>1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"field1"</span>127.0.0.1:6379<span class="token operator">></span> hvals myhash <span class="token comment" spellcheck="true"># 只获取所有的value</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> hset myhash field3 5 <span class="token comment" spellcheck="true">#指定增量为5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hincrby myhash field3 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> hincrby myhash field3 -1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 5127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 hello <span class="token comment" spellcheck="true">#若不存在，可以设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hsetnx myhash field4 redis <span class="token comment" spellcheck="true">#若存在，则不能设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> </code></pre><p>hash可以存储变更的数据，特别是用户信息之类的，以及变动的信息。hash更适合于对象的存储，String更加适合字符串存储。</p><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>有序集合。在set的基础上，增加了一个值（set k1 v1，zset k1 score1 v1）</p><p>有序集合zset和集合set一样也是string类型元素的集合，且不允许重复的成员。不同的是zset的每个元素都会关联一个分数（分数可以重复），redis通过份数来为集合中的成员进行从小到大的排序。</p><p>有序集合中每一个元素都有顺序，所以也有下标。但有序集合中元素的排序规则又与列表中元素的排序规则不一样。</p><p><strong>1、将一个或多个member及其score值加入到有序集合</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zadd key score member <span class="token punctuation">[</span>score member <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p>如果元素已经存在，则把分数覆盖。</p><p><strong>2、获取指定有序集合中指定下标区间的元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zrange key startIndex endIndex <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span></code></pre><p><strong>3、获取指定有序集合中指定分数区间（闭区间）的元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zrangebyscore key mix max <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span></code></pre><p><strong>4、删除指定有序集合中一个或多个元素</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zrem key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p><strong>5、获取指定有序集合中所有元素的个数</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zcard key</code></pre><p><strong>6、获取指定有序集合中指定元素的排名（排名从0开始）</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zrank key member</code></pre><p><strong>7、获取指定有序集合中分数在指定区间内（闭区间）的元素的个数</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zcount key min max</code></pre><p><strong>8、获取指定有序集合中指定元素的分数</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zscore key member</code></pre><p><strong>9、获取指定有序集合中指定元素的排名（按照分数从大到小的排名）</strong></p><p>命令：</p><pre class=" language-bash"><code class="language-bash">zrevrank key member</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd myset 1 one <span class="token comment" spellcheck="true">#添加一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 two 3 three <span class="token comment" spellcheck="true">#添加多个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> zrange myset 0 -11<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"three"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># 排序如何实现</span>127.0.0.1:6379<span class="token operator">></span> zadd salary 2500 zhangsan <span class="token comment" spellcheck="true">#添加三个员工</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 5000 lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd salary 1500 wanger<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf <span class="token comment" spellcheck="true">#显示全部的员工，从小到大</span>1<span class="token punctuation">)</span> <span class="token string">"wanger"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf +inf withscores <span class="token comment" spellcheck="true">#显示全部的员工，并附带成绩score</span>1<span class="token punctuation">)</span> <span class="token string">"wanger"</span>2<span class="token punctuation">)</span> <span class="token string">"1500"</span>3<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>4<span class="token punctuation">)</span> <span class="token string">"2500"</span>5<span class="token punctuation">)</span> <span class="token string">"lisi"</span>6<span class="token punctuation">)</span> <span class="token string">"5000"</span>127.0.0.1:6379<span class="token operator">></span> zrevrange salary 0 -1 <span class="token comment" spellcheck="true">#从大到小进行排序</span>1<span class="token punctuation">)</span> <span class="token string">"lisi"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> zrangebyscore salary -inf 2500 withscores <span class="token comment" spellcheck="true">#显示工资小于2500的员工（升序）</span>1<span class="token punctuation">)</span> <span class="token string">"wanger"</span>2<span class="token punctuation">)</span> <span class="token string">"1500"</span>3<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>4<span class="token punctuation">)</span> <span class="token string">"2500"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span><span class="token comment" spellcheck="true"># rem移除元素</span>127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"wanger"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>127.0.0.1:6379<span class="token operator">></span> zrem salary wanger <span class="token comment" spellcheck="true">#移除有序集合中指定的元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"lisi"</span>127.0.0.1:6379<span class="token operator">></span> zcard salary <span class="token comment" spellcheck="true">#获取有序集合中的个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#####################################################</span>127.0.0.1:6379<span class="token operator">></span> zadd myset 1 hello 2 redis 3 <span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> zcount myset 1 3 <span class="token comment" spellcheck="true">#获取指定区间的成员数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> zcount myset 1 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> </code></pre><p>排行榜应用实现，存储班级成绩表、员工工资表排序。</p><h1 id="六、三种特殊数据类型"><a href="#六、三种特殊数据类型" class="headerlink" title="六、三种特殊数据类型"></a>六、三种特殊数据类型</h1><h2 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h2><p>地理位置。redis的Geo在redis3.2版本就推了。这个功能可以推算地理位置的信息、两地之间的距离以及方圆几里的人。</p><p><strong>城市经纬度查询：</strong></p><p><a href="http://www.gjw123.com/tools-gps" target="_blank" rel="noopener">http://www.gjw123.com/tools-gps</a></p><blockquote><p>geoadd</p></blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><p>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># getadd 添加地理位置</span><span class="token comment" spellcheck="true"># 规则：两极无法直接添加，一般会下载城市数据，直接通过java程序一次性导入。</span><span class="token comment" spellcheck="true"># 参数 key 值（经度、纬度、名称）先经度再纬度</span>127.0.0.1:6379<span class="token operator">></span> geoadd china:city 116.40 39.90 beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 121.47 31.23 shanghai<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 106.50 29.53 chongqing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 114.05 22.54 shenzhen<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 120.16 30.24 hangzhou<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> geoadd china:city 108.96 34.26 xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>geopos</p></blockquote><p>获得当前定位：一定是一个坐标值。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geopos china:city beijing <span class="token comment" spellcheck="true">#获取指定城市的经度和纬度</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   2<span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span>127.0.0.1:6379<span class="token operator">></span> geopos china:city beijing chongqing1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   2<span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>   2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>geodist</p></blockquote><p>返回两个给定位置之间的距离。</p><p>如果两个位置之间的其中一个不存在， 那么命令返回空值。</p><p>指定单位的参数 unit 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing chongqing <span class="token comment" spellcheck="true">#查看北京到重庆的直线距离</span><span class="token string">"1464070.8051"</span>127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing chongqing km<span class="token string">"1464.0708"</span>127.0.0.1:6379<span class="token operator">></span> geodist china:city beijing shanghai km <span class="token comment" spellcheck="true">#查看北京到上海的直线距离</span><span class="token string">"1067.3788"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>georadius</p></blockquote><p>以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p><p>附近的人，通过半径来查询。（所有的数据应都录入，结果才会更精确）</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 1000 km <span class="token comment" spellcheck="true">#获取经纬度为100 30为中心，寻找方圆1000km内的城市</span>1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"xian"</span>3<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>4<span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"xian"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km withdist <span class="token comment" spellcheck="true">#显示到中心距离的位置</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> <span class="token string">"341.9374"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"xian"</span>   2<span class="token punctuation">)</span> <span class="token string">"483.8340"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km withcoord <span class="token comment" spellcheck="true">#显示其它的位置信息</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"xian"</span>   2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      2<span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>127.0.0.1:6379<span class="token operator">></span> georadius china:city 110 30 500 km withcoord count 1 <span class="token comment" spellcheck="true">#筛选出1条查询的结果</span>1<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      2<span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>georadiusbymember</p></blockquote><p>找出位于指定元素周围的其它元素。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city beijing 1000 km1<span class="token punctuation">)</span> <span class="token string">"beijing"</span>2<span class="token punctuation">)</span> <span class="token string">"xian"</span>127.0.0.1:6379<span class="token operator">></span> georadiusbymember china:city shanghai 500 km1<span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>2<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>geohash</p></blockquote><p>返回一个或多个位置元素的 <a href="https://en.wikipedia.org/wiki/Geohash" target="_blank" rel="noopener">Geohash</a> 表示。该命令将返回11个字符的Geohash字符串</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将二维的经纬度转换成一维的字符串，如果两个字符串与接近，则距离越远。</span>127.0.0.1:6379<span class="token operator">></span> geohash china:city beijing chongqing1<span class="token punctuation">)</span> <span class="token string">"wx4fbxxfke0"</span>2<span class="token punctuation">)</span> <span class="token string">"wm5xzrybty0"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><p>geo底层的实现原理其实就是Zset。可以使用Zset命令来操作geo。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -1 <span class="token comment" spellcheck="true">#查看地图中全部元素</span>1<span class="token punctuation">)</span> <span class="token string">"chongqing"</span>2<span class="token punctuation">)</span> <span class="token string">"xian"</span>3<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>4<span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>5<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>6<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> zrem china:city chongqing <span class="token comment" spellcheck="true">#移除指定元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zrange china:city 0 -11<span class="token punctuation">)</span> <span class="token string">"xian"</span>2<span class="token punctuation">)</span> <span class="token string">"shenzhen"</span>3<span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>4<span class="token punctuation">)</span> <span class="token string">"shanghai"</span>5<span class="token punctuation">)</span> <span class="token string">"beijing"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><h2 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h2><blockquote><p>什么是基数？</p><p>不重复的元素，可以接受误差。</p><p>例如：A{1,3,<strong>5</strong>,7,9,<strong>5</strong>}，B{1,<strong>5</strong>,3} 基数为2</p></blockquote><p>redis2.8.9版本就更新了Hyperloglog数据结构。</p><p>Redis Hyperloglog基数统计的算法。（优点：占用的内存是固定的。若从内存角度来比较的话，Hyperloglog首选）</p><p><strong>网页的UV（一个人访问一个网站多次，但还是算作一个人）</strong></p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> pfadd mykey a b c d e f g h i j <span class="token comment" spellcheck="true">#创建第1组元素mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey <span class="token comment" spellcheck="true">#统计mykey元素的基数数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> pfadd mykey2 i j z x c <span class="token function">v</span> b n m <span class="token comment" spellcheck="true">#创建第1组元素mykey2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9127.0.0.1:6379<span class="token operator">></span> pfmerge mykey3 mykey mykey2 <span class="token comment" spellcheck="true">#合并两组元素mykey mykey2 -> mykey3并集</span>OK127.0.0.1:6379<span class="token operator">></span> pfcount mykey3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 15127.0.0.1:6379<span class="token operator">></span> </code></pre><p>如果允许容错，那么一定可以使用Hyperloglog。</p><p>若不允许容错，就使用set或自定义的数据类型。</p><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><blockquote><p>位存储</p></blockquote><p>统计用户信息：活跃与不活跃，登录与未登录，打卡与未打卡。两个状态的，都可以使用bitmap。</p><p>bitmap位图，数据结构。都是操作二进制位来进行记录，就只有0和1两个状态。</p><blockquote><p>测试</p></blockquote><p>使用bitmap来记录周一到周日的打卡。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> setbit sign 0 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 1 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 2 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 3 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 4 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 5 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 6 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> </code></pre><p>查看某一天是否打卡</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> getbit sign 3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> getbit sign 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> </code></pre><p>统计操作，统计打卡的天数</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> bitcount sign <span class="token comment" spellcheck="true">#统计一周的打卡记录，可以看出是否有全勤</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> </code></pre><h1 id="七、事务"><a href="#七、事务" class="headerlink" title="七、事务"></a>七、事务</h1><p>要么同时成功，要么同时失败。=&gt;原子性</p><p><strong>Redis单条命令是保证原子性的，但是事务不保证原子性。</strong></p><p>Redis事务本质：一组命令的集合。一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行。（一次性、顺序性、排他性 =&gt;执行一系列的命令）</p><p>Redis事务没有隔离级别的概念。</p><p>所有的命令在事务中，并没有直接被执行。只有发起执行命令时才会执行，Exex。</p><p>redis事务：</p><ul><li>开启事务（multi）</li><li>命令入队（…）</li><li>执行事务（exec）</li></ul><blockquote><p>正常执行事务</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi <span class="token comment" spellcheck="true">#开启事务</span>OK<span class="token comment" spellcheck="true">#命令入队</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> get k2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span> <span class="token comment" spellcheck="true">#执行事务</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> <span class="token string">"v2"</span>4<span class="token punctuation">)</span> OK127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>放弃事务（discard）</p></blockquote><p>清除所有已经压入队列中的命令，并且结束整个事务。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multi <span class="token comment" spellcheck="true">#开启事务</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> discard <span class="token comment" spellcheck="true">#取消事务，事务队列中的命令都不会被执行</span>OK127.0.0.1:6379<span class="token operator">></span> get k4 <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>编译型异常</p></blockquote><p>（代码有问题，命令有错），事务中所有的命令都不会被执行，能够保证事务的原子性。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> getset k3 <span class="token comment" spellcheck="true">#错误的命令</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token function">command</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 v4QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k5 v5QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span> <span class="token comment" spellcheck="true">#执行事务报错，所有的命令都不会被执行</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.127.0.0.1:6379<span class="token operator">></span> get k5<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>运行时异常</p></blockquote><p>如果事务队列中代码逻辑存在错误，那么执行命令时，其它命令是可以正常执行的，错误命令抛出异常，不能够保证事务的原子性。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 <span class="token string">"v1"</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> incr k1 <span class="token comment" spellcheck="true">#会执行失败</span>QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> get k3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range <span class="token comment" spellcheck="true">#虽然第一条命令报错，但是依旧能正常执行</span>2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> OK4<span class="token punctuation">)</span> <span class="token string">"v3"</span>127.0.0.1:6379<span class="token operator">></span> get k2<span class="token string">"v2"</span>127.0.0.1:6379<span class="token operator">></span> get k1<span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>监控：Watch（面试常问）</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>非常悲观，认为什么时候都会出问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>非常乐观，认为什么时候都不会出问题，所以不会上锁。更新数据时，判断一下，在此期间，是否有人修改过这个数据。</li><li>获取version</li><li>更新时，比较version</li></ul><blockquote><p>Redis的监控测试</p></blockquote><p>正常执行成功：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 100OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> out 0OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money <span class="token comment" spellcheck="true">#监视money对象</span>OK127.0.0.1:6379<span class="token operator">></span> multi <span class="token comment" spellcheck="true">#事务正常结束，数据期间没有发生变动，这时可正常执行成功。</span>OK127.0.0.1:6379<span class="token operator">></span> decrby money 20QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 20QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 802<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 20127.0.0.1:6379<span class="token operator">></span> </code></pre><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money <span class="token comment" spellcheck="true">#监视money</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 10QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 10QUEUED<span class="token comment" spellcheck="true">#先别执行exec 因为此时watch后的值还是原来的值</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span> <span class="token comment" spellcheck="true">#执行之前，另外一个线程，修改了值，这时就会导致事务执行失败</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> <span class="token comment" spellcheck="true">#另外修改money的线程</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 1000</code></pre><p>若修改失败，获取最新的值即可。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> unwatch <span class="token comment" spellcheck="true">#解锁</span>OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money <span class="token comment" spellcheck="true">#获取最新的值，再次监视</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> decrby money 10QUEUED127.0.0.1:6379<span class="token operator">></span> incrby out 10QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span> <span class="token comment" spellcheck="true">#比对监视的值是否发生了变化</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 9902<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 30127.0.0.1:6379<span class="token operator">></span> </code></pre><p><strong>每次提交执行exec后都会自动释放锁，不管是否成功</strong></p><p>1、如果发现事务执行失败，就先解锁。</p><p>2、获取最新的值，再次监视，select version</p><p>3、比对监视的值，是否发生了变化，若无变化，可执行成功。若有变化，则执行失败。</p><p><strong>单独的隔离操作</strong>：事务中的所有命令都会序列化、顺序地执行。事务在执行过程中，不会被其它客户端发来的命令请求所打断，除非使用watch命令监控某些键。</p><p><strong>不保证事务的原子性</strong>：redis同一个事务中如果一条命令执行失败，其后的命令仍然可能会执行，redis的事务没有回滚。redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为redis不需要事务回滚的能力。</p><h1 id="八、Jedis"><a href="#八、Jedis" class="headerlink" title="八、Jedis"></a>八、Jedis</h1><p>使用java来操作Redis。</p><p>Jedis是Redis官方推荐的java连接开发工具。使用java操作Redis中间件。</p><blockquote><p>测试</p></blockquote><p>1、新建一个空项目redis，并创建一个普通maven。</p><p>2、导入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入Jedis包--></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--fastjson--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>3、编码测试。</p><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、new Jedis对象</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行测试，输出<code>PONG</code>。</p><p><strong>常用API</strong></p><blockquote><p>key操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKey</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、new Jedis对象</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(jedis.ping());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断某个键是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'username','lskj'>的键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'password','lskj'>的键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"系统中所有的键如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键password："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断建password是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看键username所存储的值的类型："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随即返回key空间的一个key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">randomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出改名后的name："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按索引查询："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除当前选择数据库中的所有key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中key的数目："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除所有数据库中的所有key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>String</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加数据&lt;k1,v1>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加数据&lt;k2,v2>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加数据&lt;k3,v3>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键k2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取键k2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改k1："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取k1的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在k3后面加入值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取k3的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加多个健值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">"k01"</span><span class="token punctuation">,</span><span class="token string">"v01"</span><span class="token punctuation">,</span><span class="token string">"k02"</span><span class="token punctuation">,</span><span class="token string">"v02"</span><span class="token punctuation">,</span><span class="token string">"k03"</span><span class="token punctuation">,</span><span class="token string">"v03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个健值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"k01"</span><span class="token punctuation">,</span><span class="token string">"k02"</span><span class="token punctuation">,</span><span class="token string">"k03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个健值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"k01"</span><span class="token punctuation">,</span><span class="token string">"k02"</span><span class="token punctuation">,</span><span class="token string">"k03"</span><span class="token punctuation">,</span><span class="token string">"k04"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k01"</span><span class="token punctuation">,</span><span class="token string">"k02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"k01"</span><span class="token punctuation">,</span><span class="token string">"k02"</span><span class="token punctuation">,</span><span class="token string">"k03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========新增键值对，防止覆盖原来的值=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增键值对&lt;k1,v1>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增键值对&lt;k2,v2>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增键值对&lt;k2,v2>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2_new"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k1 = "</span> <span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k2 = "</span> <span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========新增键值对，并设置有效时间=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增键值对&lt;k3,v3>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k3 = "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6秒过后，k3 = "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========获取原值，更新为新值=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取k2的值，并将其设置为v2_getset："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2_getset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此时，k2 = "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得k2的值的字串[2-4]："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>List</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========添加一个list：collections=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token string">"ArrayList"</span><span class="token punctuation">,</span><span class="token string">"Vector"</span><span class="token punctuation">,</span><span class="token string">"Stack"</span><span class="token punctuation">,</span><span class="token string">"HashMap"</span><span class="token punctuation">,</span><span class="token string">"WeakHashMap"</span><span class="token punctuation">,</span><span class="token string">"LinkedHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token string">"HashSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token string">"TreeSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token string">"TreeMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections中0-3区间的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除列表指定的值，第二个参数为删除的个数（有重复时），后面add进去的值先被删除，类似于出栈</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定元素个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrem</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除下标0-3区间之外的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（左端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections添加元素，从列表右端，与lpush相对应："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"collection"</span><span class="token punctuation">,</span><span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（右端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改collections指定下标1的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lset</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的长度："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取collections下标为2的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lindex</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========添加一个list：sortedList=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序前："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList进行排序："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Set</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========向集合eleSet中添加元素（不重复）=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个元素e0："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除两个元素e7和e6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机移除集合eleSet中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机移除集合eleSet中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet中包含所有的元素的个数为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">scard</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e3是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e6是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加集合eleSet1："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加集合eleSet2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中e4删除，并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet3"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中e2删除，并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet3"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet3中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========集合运算========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleS1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleS2中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1与eleSet2的交集："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sinter</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1与eleSet2的并集："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sunion</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1与eleSet2的差集："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sdiff</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求交集，并将交集保存到eleS4集合中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sinterstore</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">,</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet4中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Hash</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHash</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token string">"v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k4"</span><span class="token punctuation">,</span><span class="token string">"v4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加名称（key）为hash的hash元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向hash中添加&lt;k5,v5>："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k5"</span><span class="token punctuation">,</span><span class="token string">"v5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有值为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hvals</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将k6保存的值加上一个整数，如果k6不存在，则添加k6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k6"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将k6保存的值加上一个整数，如果k6不存在，则添加k6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k6"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个或者多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hdel</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对的个数为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hlen</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在k2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在k3："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中k3的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中k3，k4的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"k3"</span><span class="token punctuation">,</span><span class="token string">"k4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>事务</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTransaction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启事务</span>        Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jedis.watch(result);</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//int i = 1/0;</span>            multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//放弃事务</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭连接</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="九、SpringBoot整合"><a href="#九、SpringBoot整合" class="headerlink" title="九、SpringBoot整合"></a>九、SpringBoot整合</h1><p>SpringBoot操作数据：spring-data jpa jdbc MongoDB redis。</p><p>在SpringBoot2.x后，原来使用的Jedis被替换成了lettuce。</p><p>Jedis：底层采用直连，多个线程操作的话，不安全。若想要避免不安全，须使用jedis pool连接池，更像BIO模式。</p><p>lettuce：底层采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。可以减少x线程数量，更像NIO模式。</p><p>RedisAutoConfiguration源码查看</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RedisAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"redisTemplate"</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可以自定义一个redisTemplate来替换这个默认的</span>    <span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认的RedisTemplate没有过多的设置，redis对象都是需要序列化</span>        <span class="token comment" spellcheck="true">//两个泛型都是Object类型的，后面使用需要强制转换为&lt;String,Object></span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>  <span class="token comment" spellcheck="true">//由于String是redis中最常使用的类型，所以单独提出来一个bean</span>    <span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>整合测试</p></blockquote><ul><li><p>导入依赖</p></li><li><p>配置连接</p></li><li><p>测试</p></li></ul><p>1、新建一个Spring Initializr Module。</p><p>2、选中Developer=&gt;Spring Boot DevTools、Lombok、Spring Configuration Processor</p><p>Web=&gt;Spring Web</p><p>NoSQL=&gt;Spring Data Redis [Access+Driver]。</p><p>依赖（已导入）：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--操作redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、配置连接。</p><p><strong>application.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置Redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span></code></pre><p>4、测试。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//redisTemplate 操作不同的数据类型</span>    <span class="token comment" spellcheck="true">//opsForValue操作字符串，类似String</span>    <span class="token comment" spellcheck="true">//redisTemplate.opsForValue()</span>    <span class="token comment" spellcheck="true">//除了基本的操作，常用的方法也可直接通过redisTemplate操作，如事务、基本的CRUD</span>    <span class="token comment" spellcheck="true">//获取redis的连接对象</span>    <span class="token comment" spellcheck="true">/*RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();        connection.flushDb();*/</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>RedisTemplate.java</p></blockquote><p>RedisTemplate.java中序列化配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> RedisSerializer keySerializer <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> RedisSerializer valueSerializer <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> RedisSerializer hashKeySerializer <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> RedisSerializer hashValueSerializer <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><p>RedisTemplate.java默认序列化方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>defaultSerializer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认序列化方式是JDK序列化，后面可能会使用json来序列化</span>    defaultSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkSerializationRedisSerializer</span><span class="token punctuation">(</span>        classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>自定义redisTemplate</p></blockquote><p>关于对象的保存需要序列化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnSingleCandidate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义redisTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为了方便开发，一般直接使用&lt;String,Object></span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化配置</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> objectJackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectJackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String的序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>objectJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Redis工具类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =============================common============================</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     * @param key  键     * @param time 时间(秒)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     * @param key   键     * @param delta 要增加几(大于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     * @param key   键     * @param delta 要减少几(小于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     * @param key  键 不能为null     * @param item 项 不能为null     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     * @param key 键     * @param map 对应多个键值     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     * @param key 键     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * @param key   键     * @param value 值     * @param time  时间(秒)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="十、Redis-conf"><a href="#十、Redis-conf" class="headerlink" title="十、Redis.conf"></a>十、Redis.conf</h1><p>启动redis时，是通过redis.conf这个配置文件来启动的。</p><p>如果不使用配置文件，redis会按照默认的参数运行。</p><p>如果使用配置文件，在启动redis服务时必须指定所使用的配置文件。</p><blockquote><p>单位</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Note on units: when memory size is needed, it is possible to specify</span><span class="token comment" spellcheck="true"># it in the usual form of 1k 5GB 4M and so forth:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1k => 1000 bytes</span><span class="token comment" spellcheck="true"># 1kb => 1024 bytes</span><span class="token comment" spellcheck="true"># 1m => 1000000 bytes</span><span class="token comment" spellcheck="true"># 1mb => 1024*1024 bytes</span><span class="token comment" spellcheck="true"># 1g => 1000000000 bytes</span><span class="token comment" spellcheck="true"># 1gb => 1024*1024*1024 bytes</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><span class="token comment" spellcheck="true"># 配置文件unit单位对大小写不敏感。</span></code></pre><blockquote><p>包含</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">################################## INCLUDES ###################################</span><span class="token comment" spellcheck="true"># Include one or more other config files here.  This is useful if you</span><span class="token comment" spellcheck="true"># have a standard template that goes to all Redis servers but also need</span><span class="token comment" spellcheck="true"># to customize a few per-server settings.  Include files can include</span><span class="token comment" spellcheck="true"># other files, so use this wisely.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that option "include" won't be rewritten by command "CONFIG REWRITE"</span><span class="token comment" spellcheck="true"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><span class="token comment" spellcheck="true"># line as value of a configuration directive, you'd better put includes</span><span class="token comment" spellcheck="true"># at the beginning of this file to avoid overwriting config change at runtime.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If instead you are interested in using includes to override configuration</span><span class="token comment" spellcheck="true"># options, it is better to use include as the last line.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># include /path/to/local.conf</span><span class="token comment" spellcheck="true"># include /path/to/other.conf</span></code></pre><blockquote><p>网络</p></blockquote><pre class=" language-bash"><code class="language-bash">bind 127.0.0.1 <span class="token comment" spellcheck="true">#绑定ip</span>protected-mode <span class="token function">yes</span> <span class="token comment" spellcheck="true">#保护模式</span>port 6379 <span class="token comment" spellcheck="true">#端口设置，默认使用6379</span></code></pre><p><strong>tcp-keepalive</strong>：TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，加入设置为60秒，则server端会没60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。如果设置为0，则不会进行保活检测。</p><p>如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip。</p><pre><code>redis-cli -h ip -p portredis-cli -h ip -p port shutdown</code></pre><blockquote><p>通用GENERAL</p></blockquote><pre class=" language-bash"><code class="language-bash">daemonize <span class="token function">yes</span> <span class="token comment" spellcheck="true">#以守护进程的方式运行，默认是no，需要手动设置为yes</span>pidfile /var/run/redis_6379.pid <span class="token comment" spellcheck="true">#若以后台方式运行，就需要指定一个pid文件</span><span class="token comment" spellcheck="true"># 日志</span><span class="token comment" spellcheck="true"># Specify the server verbosity level.</span><span class="token comment" spellcheck="true"># This can be one of:</span><span class="token comment" spellcheck="true"># debug (a lot of information, useful for development/testing)</span><span class="token comment" spellcheck="true"># verbose (many rarely useful info, but not a mess like the debug level)</span><span class="token comment" spellcheck="true"># notice (moderately verbose, what you want in production probably)</span><span class="token comment" spellcheck="true"># warning (only very important / critical messages are logged)</span>loglevel noticelogfile <span class="token string">""</span> <span class="token comment" spellcheck="true">#日志文件位置名</span>database 16 <span class="token comment" spellcheck="true">#数据库的数量，默认是16个数据库</span>always-show-logo <span class="token function">yes</span> <span class="token comment" spellcheck="true">#是否总是显示logo</span></code></pre><p><strong>loglevel</strong>：配置日志级别，开发阶段配置debug，上线阶段配置为notice或warning。</p><p><strong>logfile</strong>：指定日志文件名，如果不指定，redis只进行标准输出。需要保证日志文件所在的目录必须存在，文件可以不存在。redis在运行过程中，会输出一些日志信息。默认情况下，这些日志信息会输出到控制台。可以使用logfile配置日志文件，使redis把日志信息输出到指定文件中。</p><p><strong>databases</strong>：配置redis服务默认创建的数据库实例个数，默认值是16。</p><blockquote><p>快照</p></blockquote><p>持久化，在规定时间内，执行了多少次操作，则会持久化到文件.rdb .aof。</p><p>redis是内存数据库，若没有持久化，那么数据断电即失。</p><pre class=" language-bash"><code class="language-bash">save 900 1 <span class="token comment" spellcheck="true">#若在900秒内，如果至少有1个key进行修改，便进行持久化操作</span>save 300 10 <span class="token comment" spellcheck="true">#若在300秒内，如果至少有10个key进行修改，便进行持久化操作</span>save 60 10000 <span class="token comment" spellcheck="true">#若在60秒内，如果至少有10000个key进行修改，便进行持久化操作</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment" spellcheck="true">#持久化若出错，是否还需要继续工作</span>rdbcompression <span class="token function">yes</span> <span class="token comment" spellcheck="true">#是否压缩 rdb 文件，需要消耗一些CPU资源</span>rdbchecksum <span class="token function">yes</span> <span class="token comment" spellcheck="true">#保存rdb文件时，进行错误的检查校验</span><span class="token function">dir</span> ./ <span class="token comment" spellcheck="true">#rdb文件保存目录</span></code></pre><blockquote><p>SECURITY安全</p></blockquote><p><strong>requirepass</strong>：配置redis的访问密码。默认不配置密码，即访问不需要密码验证。此配置项需要在protected-mode=yes时起作用。</p><p>redis默认没有密码。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get requirepass <span class="token comment" spellcheck="true">#获取redis的密码</span>1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">""</span>127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> requirepass <span class="token string">"redis"</span> <span class="token comment" spellcheck="true">#设置redis密码</span>OK<span class="token comment" spellcheck="true">#重启redis后，测试ping</span><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-server config/redis.conf</span><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-cli</span>127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span> <span class="token comment" spellcheck="true">#执行命令没有权限</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.127.0.0.1:6379<span class="token operator">></span> auth redis 使用密码授权（登录）OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">ping</span>PONG127.0.0.1:6379<span class="token operator">></span> config get requirepass1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span></code></pre><blockquote><p>CLIENTS 限制</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># maxclients 10000 #设置能连接上redis的最大客户端数量</span><span class="token comment" spellcheck="true"># maxmemory &lt;bytes> #redis配置最大的内存数量</span><span class="token comment" spellcheck="true"># maxmemory-policy noeviction #内存达到上限之后的处理策略</span></code></pre><p><strong>maxmemory-policy 六种方式</strong></p><ul><li><p>volatile-lru：只对设置了过期时间的key进行LRU（默认值） </p></li><li><p>allkeys-lru ： 删除lru算法的key  </p></li><li><p>volatile-random：随机删除即将过期key  </p></li><li><p>allkeys-random：随机删除  </p></li><li><p>volatile-ttl ： 删除即将过期的  </p></li><li><p>noeviction ： 永不过期，返回错误</p></li></ul><blockquote><p>APPEND ONLY模式 aof配置</p></blockquote><pre class=" language-bash"><code class="language-bash">appendonly no <span class="token comment" spellcheck="true">#默认是不开启aof模式，默认使用的rdb方式持久化，多数情况下，rdb完全够用。</span>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment" spellcheck="true">#持久化的文件名字 .rdb</span><span class="token comment" spellcheck="true"># appendfsync always #每次修改都会sync，消耗性能</span>appendfsync everysec <span class="token comment" spellcheck="true">#每秒执行一次sync，可能会丢失这1秒的数据</span><span class="token comment" spellcheck="true"># appendfsync no #不执行sync，这时操作系统自已同步数据，速度最快</span></code></pre><h1 id="十一、Redis持久化"><a href="#十一、Redis持久化" class="headerlink" title="十一、Redis持久化"></a>十一、Redis持久化</h1><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，一旦服务器进程退出，服务器中的数据库状态也会消失。故Redis提供了持久化功能。</p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p>在指定的时间间隔内将内存中的数据集快照写入磁盘（Snapshot快照），它恢复时是将快照文件直接读到内存里。</p><p>在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，RDB方式要比AOF方式更加高效。RDB的缺点是最后一次持久化后的数据可能会丢失。</p><p>在主从复制中，rdb用来备用的，置放于从机上。</p><p><strong>rdb保存的文件是dump.rdb</strong>（有时在生产环境中，会将这个文件进行备份）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># The filename where to dump the DB</span>dbfilename dump.rdb</code></pre><p><strong>dbfilename</strong>：redis持久化数据生成的文件名，默认是dump.rdb，可自行配置。</p><p><strong>dir</strong>：redis持久化数据生成文件保存的目录，默认是<code>./</code>即redis的启动目录，可自行配置。</p><p><code>save &lt;seconds&gt; &lt;changes&gt;</code>：配置持久化策略。</p><p>测试：只要60s内修改5次key，就会触发rdb操作。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#   save ""</span><span class="token comment" spellcheck="true">#save 900 1</span><span class="token comment" spellcheck="true">#save 300 10</span><span class="token comment" spellcheck="true">#save 60 10000</span>sava 60 5</code></pre><blockquote><p>触发机制</p></blockquote><ul><li>save的规则满足的情况下，会自动触发rdb规则。</li><li>执行flushall命令，也会触发rdb规则。</li><li>退出redis，也会产生rdb文件。</li></ul><p>备份就自动生成一个<code>dump.rdb</code>文件。</p><blockquote><p>怎样恢复rdb文件？</p></blockquote><p>1、只需要将rdb文件存放在redis启动目录，redis启动时，会自动检查dump.rdb文件，并恢复其中的数据。</p><p>2、查看需要存放的位置。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get <span class="token function">dir</span>1<span class="token punctuation">)</span> <span class="token string">"dir"</span>2<span class="token punctuation">)</span> <span class="token string">"/usr/local/bin"</span> <span class="token comment" spellcheck="true">#若这个目录下存在dump.rdb文件，启动时就会自动恢复其中的数据</span>127.0.0.1:6379<span class="token operator">></span></code></pre><blockquote><p>优点：</p></blockquote><ul><li>适合大规模的数据恢复。</li><li>对数据的完整性要求不高。</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>需要一定的时间间隔进行操作，若redis意外宕机，最后一次修改的数据就没有了。</li><li>fork进程时，会占用一定的内存空间。</li></ul><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>将所有写操作的命令进行记录，恢复时，把这个文件全部执行一遍。</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只允许追加文件，不可以改写文件，redis启动时，会读取该文件，并重新构建数据。换句话来说，redis重启的话，就根据日志文件的内容将写指令从头到尾执行一次，以完成数据的恢复工作。</p><p><strong>aof保存的是appendonly.aof文件</strong></p><pre class=" language-bash"><code class="language-bash">appendonly no <span class="token comment" spellcheck="true">#默认不开启，需手动配置</span></code></pre><p>只需将appendonly的no改为yes，就开启了aof。重启redis，便生效。</p><p><code>appendonly.aof</code>文件记录了所有写操作。若这个aof文件有错误，此时redis是无法启动的，需要修复这个aof文件。</p><p>redis提供了<code>redis-check-aof --fix</code>工具。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#redis-check-aof --fix appendonly.aof</span></code></pre><p>若文件正常，重启redis即可恢复。</p><blockquote><p>重写规则</p></blockquote><pre class=" language-bash"><code class="language-bash">no-appendfsync-on-rewrite no <span class="token comment" spellcheck="true">#重写时是否可以运用appendsync，默认no，可以保证数据的安全性</span>auto-aof-rewrite-percentage 100 <span class="token comment" spellcheck="true">#设置重写的基准百分比</span>auto-aof-rewrite-min-size 64mb <span class="token comment" spellcheck="true">#设置重写的基准值</span></code></pre><p>aof默认是文件的无限制追加，文件会越来越大。</p><p>若aof文件大于64M，fork一个新的进程将文件进行重写。</p><p><strong>优缺点：</strong></p><pre class=" language-bash"><code class="language-bash">appendonly no <span class="token comment" spellcheck="true">#默认是不开启aof模式，默认使用的rdb方式持久化，多数情况下，rdb完全够用。</span>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment" spellcheck="true">#持久化的文件名字 .rdb</span><span class="token comment" spellcheck="true"># appendfsync always #同步持久化，每次发生数据变化会立刻写入到磁盘中，消耗性能但数据完整性比较好（慢，安全）</span>appendfsync everysec <span class="token comment" spellcheck="true">#默认值，每秒执行一次sync，可能会丢失这1秒的数据</span><span class="token comment" spellcheck="true"># appendfsync no #不执行sync，不及时同步，这时操作系统自已同步数据，速度最快</span></code></pre><blockquote><p>优点：</p></blockquote><ul><li>每次修改都同步，文件的完整性更好。</li><li>每秒同步一次，可能会丢失一秒的数据。</li><li>从不同步，效率最高。</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>相对于数据来说，aof远大于rdb，修复速度也比rdb慢。</li><li>aof运行效率比rdb慢，故redis默认的配置是rdb持久化。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、RDB持久化方式能够在指定的时间间隔内对数据进行快照保存。</p><p>2、AOF持久化方式记录每次对服务器的写操作，当服务器重启时，会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾，redis还能对aof文件进行后台重写，使得aof文件的体积不至于过大。</p><p>3、只做缓存，如果只希望数据在服务器运行时存在，可不使用任何持久化。</p><p>4、同时开启两种持久化方式：</p><ul><li>在任何情况下，当redis重启时，会优先载入aof文件来恢复原始数据，因为通常情况下，aof文件保存的数据要比rdb文件保存的数据集更完整。</li><li>RDB的数据不实时，同时使用两者时，服务器重启也只会找aof文件，那是否只使用aof呢？rdb更适合用于备份数据库（AOF在不断变化，不便于备份），快速重启，而且不会有aof可能潜在的bug，留着作为一个万一的手段。</li></ul><p>5、性能建议：</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次即可，只保留<code>save 900 1</code>这条规则。</li><li>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒的数据，启动脚本较简单，只load自己的aof文件就可以了，代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF，仅靠Master-Slave Repllcation实现高可用性也可以，能省调一大笔IO，也减少了rewrite时带来的系统波动和。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/.Slave中的RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h1 id="十二、Redis发布订阅"><a href="#十二、Redis发布订阅" class="headerlink" title="十二、Redis发布订阅"></a>十二、Redis发布订阅</h1><p> Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。</p><p>Redis客户端可以订阅任意数量的频道。消息的发布者往频道上发布消息，所有订阅此频道的客户端都能接收到消息。</p><blockquote><p>订阅发布命令</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">命令及描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="https://www.runoob.com/redis/pub-sub-psubscribe.html" target="_blank" rel="noopener">PSUBSCRIBE pattern [pattern …]</a> 订阅一个或多个符合给定模式的频道。</td></tr><tr><td align="center">2</td><td align="center">[PUBSUB subcommand [argument [argument …]]](<a href="https://www.runoob.com/redis/pub-sub-pubsub.html" target="_blank" rel="noopener">https://www.runoob.com/redis/pub-sub-pubsub.html</a>) 查看订阅与发布系统状态。</td></tr><tr><td align="center">3</td><td align="center"><a href="https://www.runoob.com/redis/pub-sub-publish.html" target="_blank" rel="noopener">PUBLISH channel message</a> 将信息发送到指定的频道。</td></tr><tr><td align="center">4</td><td align="center">[PUNSUBSCRIBE [pattern [pattern …]]](<a href="https://www.runoob.com/redis/pub-sub-punsubscribe.html" target="_blank" rel="noopener">https://www.runoob.com/redis/pub-sub-punsubscribe.html</a>) 退订所有给定模式的频道。</td></tr><tr><td align="center">5</td><td align="center"><a href="https://www.runoob.com/redis/pub-sub-subscribe.html" target="_blank" rel="noopener">SUBSCRIBE channel [channel …]</a> 订阅给定的一个或多个频道的信息。</td></tr><tr><td align="center">6</td><td align="center">[UNSUBSCRIBE [channel [channel …]]](<a href="https://www.runoob.com/redis/pub-sub-unsubscribe.html" target="_blank" rel="noopener">https://www.runoob.com/redis/pub-sub-unsubscribe.html</a>) 指退订给定的频道。</td></tr></tbody></table><blockquote><p>测试</p></blockquote><p>订阅端：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> subscribe <span class="token function">test</span> <span class="token comment" spellcheck="true">#订阅一个频道 test</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true">#等待读取推送的消息</span>1<span class="token punctuation">)</span> <span class="token string">"message"</span> <span class="token comment" spellcheck="true">#消息</span>2<span class="token punctuation">)</span> <span class="token string">"test"</span> <span class="token comment" spellcheck="true">#那个频道的消息</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#消息的具体内容</span></code></pre><p>发送端：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> publish <span class="token function">test</span> <span class="token string">"hello"</span> <span class="token comment" spellcheck="true">#发布者发布消息到频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> </code></pre><blockquote><p>原理</p></blockquote><p>Redis是使用C实现的。Redis通过publish、subscribe和psubscribe等命令实现发布和订阅功能。</p><p>通过subscribe命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个channel（频道），而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。subscribe命令的关键，就是将客户端添加到给定channel的订阅链表中。</p><p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><p>pub/sub从字面上理解就是发布（publish）与订阅（subscribe），在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的及时聊天，群聊等功能。</p><blockquote><p>使用场景</p></blockquote><ul><li>实时消息系统</li><li>实时聊天。（频道当做聊天室，将信息回显给所有人）</li></ul><h1 id="十三、Redis主从复制"><a href="#十三、Redis主从复制" class="headerlink" title="十三、Redis主从复制"></a>十三、Redis主从复制</h1><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器（主机数据更新后根据配置和策略，自动同步到从机的master/slave机制）。前者称为主节点（master/leader），后者称为从节点（slave/follower）。</p><p>主少从多，主写从读，读写分离，主写同步复制到从。</p><p><strong>数据的复制是单向的，只能由主节点到从节点。</strong>Master以写为主，Slave以读为主。</p><p><strong>默认情况下，每台Redis服务器都是主节点</strong>，且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p><p>主从复制的作用主要包括：</p><ul><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时，应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载。尤其是在写少读多的情况下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是不可行的的（可能会宕机），原因如下：</p><ul><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大。</li><li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有的内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</li></ul><p>电商网站上的商品，一般都是一次上传，无数次浏览（多读多写）。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不需要配置主库。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> info replication <span class="token comment" spellcheck="true">#查看当前库的信息</span><span class="token comment" spellcheck="true"># Replication</span>role:master <span class="token comment" spellcheck="true">#角色 master</span>connected_slaves:0 <span class="token comment" spellcheck="true">#无从机</span>master_replid:0dca53cfb9da266d2e3fe67cae0ff67afb2ab72emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0127.0.0.1:6379<span class="token operator">></span> </code></pre><p>复制三个配置文件，然后修改对应的信息。</p><pre class=" language-bash"><code class="language-bash">port 6380pidfile /var/run/redis_6380.pidlogfile <span class="token string">"6380.log"</span>dbfilename dump6380.rdb</code></pre><p>修改完成后，使用3个配置文件分别启动3个redis服务器，可通过进程信息查看。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef|grep redis</span>root     25557     1  0 10:32 ?        00:00:47 redis-server 127.0.0.1:6379   root     26302     1  0 21:27 ?        00:00:00 redis-server 127.0.0.1:6380     root     26308     1  0 21:27 ?        00:00:00 redis-server 127.0.0.1:6381     root     26316 26242  0 21:29 pts/4    00:00:00 <span class="token function">grep</span> redis<span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p>默认情况下，每台Redis服务器都是主节点。一般情况下只用配置从机即可。</p><p>一主（79）二从（80、81）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#从机80</span>127.0.0.1:6380<span class="token operator">></span> slaveof 127.0.0.1 6379 <span class="token comment" spellcheck="true">#slaveof host 6379 找谁作为主机</span>OK127.0.0.1:6380<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:slave <span class="token comment" spellcheck="true">#当前角色是从机</span>master_host:127.0.0.1 <span class="token comment" spellcheck="true">#主机信息</span>master_port:6379master_link_status:upmaster_last_io_seconds_ago:5master_sync_in_progress:0slave_repl_offset:14slave_priority:100slave_read_only:1connected_slaves:0master_replid:988a7eba9f0c5df73c20486eb2ce0efba8275880master_replid2:0000000000000000000000000000000000000000master_repl_offset:14second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:14127.0.0.1:6380<span class="token operator">></span><span class="token comment" spellcheck="true">#从机81</span>127.0.0.1:6381<span class="token operator">></span> slaveof 127.0.0.1 6379OK127.0.0.1:6381<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:slavemaster_host:127.0.0.1master_port:6379master_link_status:upmaster_last_io_seconds_ago:2master_sync_in_progress:0slave_repl_offset:294slave_priority:100slave_read_only:1connected_slaves:0master_replid:988a7eba9f0c5df73c20486eb2ce0efba8275880master_replid2:0000000000000000000000000000000000000000master_repl_offset:294second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:281repl_backlog_histlen:14127.0.0.1:6381<span class="token operator">></span> <span class="token comment" spellcheck="true">#在主机中查看</span><span class="token comment" spellcheck="true"># Replication</span>role:master<span class="token comment" spellcheck="true">#多了从机的配置</span>connected_slaves:2slave0:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6380,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>308,lag<span class="token operator">=</span>0slave1:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6381,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>308,lag<span class="token operator">=</span>1master_replid:988a7eba9f0c5df73c20486eb2ce0efba8275880master_replid2:0000000000000000000000000000000000000000master_repl_offset:308second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:308127.0.0.1:6379<span class="token operator">></span> </code></pre><p>真实的主从配置应在配置文件中配置，才能实现永久配置，现在使用的命令配置，只是暂时的。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">################################# REPLICATION #################################</span><span class="token comment" spellcheck="true"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><span class="token comment" spellcheck="true"># another Redis server. A few things to understand ASAP about Redis replication.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   +------------------+      +---------------+</span><span class="token comment" spellcheck="true">#   |      Master      | ---> |    Replica    |</span><span class="token comment" spellcheck="true">#   | (receive writes) |      |  (exact copy) |</span><span class="token comment" spellcheck="true">#   +------------------+      +---------------+</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) Redis replication is asynchronous, but you can configure a master to</span><span class="token comment" spellcheck="true">#    stop accepting writes if it appears to be not connected with at least</span><span class="token comment" spellcheck="true">#    a given number of replicas.</span><span class="token comment" spellcheck="true"># 2) Redis replicas are able to perform a partial resynchronization with the</span><span class="token comment" spellcheck="true">#    master if the replication link is lost for a relatively small amount of</span><span class="token comment" spellcheck="true">#    time. You may want to configure the replication backlog size (see the next</span><span class="token comment" spellcheck="true">#    sections of this file) with a sensible value depending on your needs.</span><span class="token comment" spellcheck="true"># 3) Replication is automatic and does not need user intervention. After a</span><span class="token comment" spellcheck="true">#    network partition replicas automatically try to reconnect to masters</span><span class="token comment" spellcheck="true">#    and resynchronize with them.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># replicaof &lt;masterip> &lt;masterport></span><span class="token comment" spellcheck="true"># If the master is password protected (using the "requirepass" configuration</span><span class="token comment" spellcheck="true"># directive below) it is possible to tell the replica to authenticate before</span><span class="token comment" spellcheck="true"># starting the replication synchronization process, otherwise the master will</span><span class="token comment" spellcheck="true"># refuse the replica request.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># masterauth &lt;master-password></span></code></pre><p>主机可以写，从机不能写只能读。主机中的所有信息和数据，都会自动被从机保存。</p><p>主机写：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK127.0.0.1:6379<span class="token operator">></span> get k1<span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span></code></pre><p>从机只能读：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6380<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"k1"</span>127.0.0.1:6380<span class="token operator">></span> get k1<span class="token string">"v1"</span>127.0.0.1:6380<span class="token operator">></span> <span class="token keyword">set</span> k2 v2<span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can't <span class="token function">write</span> against a <span class="token function">read</span> only replica.127.0.0.1:6380<span class="token operator">></span> </code></pre><blockquote><p>测试</p></blockquote><p>主机断开连接，从机依旧连接到主机，但是没有写操作，若主机恢复连接，从机依旧可以获取到主机写的信息。</p><p>如果是使用命令配置的主从，这时如果重启，从机就变回主机了。只要变为从机（连接上主机），立马就可以从主机中获取值。</p><p>从机宕机，从机少一个从机，其它从机不受影响。从机恢复，需要重新设置其主从关系。</p><blockquote><p>复制原理</p></blockquote><p>Slave启动成功连接到master后会发送一个sync同步命令。</p><p>Master接到命令，启动后台的存盘进程，同时收集所有接收的用于修改数据库集命令，在后台进程执行完毕之后，<strong>master将传送整个数据文件到slave，并完成一次完全同步。</strong></p><p><strong>全量复制</strong>：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。一旦主从关系确定，会自动把主库上已有的数据同步复制到从库。</p><p><strong>增量复制</strong>：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。主库写数据会自动同步到从库。</p><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。数据在从机中一定可以被看到。</p><p><img src="/archives/8eda3648/image-20201119220551365.png" alt=""></p><p>上一个主机连接下一个从机，这样也可以完成主从复制。</p><p><strong>若现在主机断开了，这时，能否选择一个主机出来？</strong></p><p>如果主机断开了，可以使用命令<code>slaveof no one</code>让本机（从机）成为主机（断开原来的主从关系），其它的结点就可以手动连接到最新的这个主节点（手动）。</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6381<span class="token operator">></span> slave no one<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR unknown <span class="token function">command</span> <span class="token variable"><span class="token variable">`</span>slave<span class="token variable">`</span></span>, with args beginning with: <span class="token variable"><span class="token variable">`</span>no<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>one<span class="token variable">`</span></span>, 127.0.0.1:6381<span class="token operator">></span> <span class="token function">clear</span>127.0.0.1:6381<span class="token operator">></span> slaveof no oneOK127.0.0.1:6381<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:masterconnected_slaves:0master_replid:5e38c48495d98c1c1b51234103752e1915d10c85master_replid2:988a7eba9f0c5df73c20486eb2ce0efba8275880master_repl_offset:3024second_repl_offset:3025repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:281repl_backlog_histlen:2744127.0.0.1:6381<span class="token operator">></span> </code></pre><p>一台主机可以配置多台从机，一台从机又可以配置多台从机，从而形成一个庞大的集群结构。</p><p>这样减轻了一台主机的压力，但是增加了服务间的延迟时间。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>自动选择主机的模式。</p><p>主从切换技术的方法是，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内不可用。这不是一种推荐的方式，更多时候，优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵）架构来解决这个问题。</p><p>谋权篡位的自动版，能够后台监控主机是否故障，如果故障了就根据投票数自动将从库转换为主库。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p><img src="/archives/8eda3648/image-20201119225607550.png" alt=""></p><p>这里的哨兵有两个作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其它从服务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="/archives/8eda3648/image-20201119230640534.png" alt=""></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测主服务器不可用，并且数量达到一定值时，哨兵之间就会进行一次投票，投票的结果又一个哨兵发起，进行failover【故障转移】操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><blockquote><p>测试</p></blockquote><p>1、配置哨兵配置文件sentinel.conf（redis安装目录下，可创建其它命名的配置文件）。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#sentinel monitor 被监控的名称 host port 数字</span>sentinel monitor myredis 127.0.0.1 6379 1</code></pre><p>后面的数字，代表主机挂了，slave投票看谁接替称为主机，票数最多者，就会成为主机。</p><p>2、启动哨兵。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ config<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim sentinel.conf</span><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ config<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd ..</span><span class="token punctuation">[</span>root@iZ2zehx0enix3ec7e1pfuqZ bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-sentinel config/sentinel.conf </span>27294:X 20 Nov 2020 10:04:01.922 <span class="token comment" spellcheck="true"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span>27294:X 20 Nov 2020 10:04:01.922 <span class="token comment" spellcheck="true"># Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=27294, just started</span>27294:X 20 Nov 2020 10:04:01.922 <span class="token comment" spellcheck="true"># Configuration loaded</span>                _._                                                             _.-``__ <span class="token string">''</span>-._                                                   _.-`<span class="token variable"><span class="token variable">`</span>    <span class="token variable">`</span></span><span class="token keyword">.</span>  `_.  <span class="token string">''</span>-._           Redis 6.0.9 <span class="token punctuation">(</span>00000000/0<span class="token punctuation">)</span> 64 bit  .-`<span class="token variable"><span class="token variable">`</span> .-<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token keyword">.</span>  <span class="token variable">`</span></span>``\/    _.,_ <span class="token string">''</span>-._                                    <span class="token punctuation">(</span>    <span class="token string">'      ,       .-<span class="token variable"><span class="token variable">`</span>  <span class="token operator">|</span> <span class="token variable">`</span></span>,    )     Running in sentinel mode |<span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-...-<span class="token variable"><span class="token variable">`</span> __<span class="token punctuation">..</span>.-.<span class="token variable">`</span></span>`-._|'</span>` _.-<span class="token string">'|     Port: 26379 |    <span class="token variable"><span class="token variable">`</span>-._   <span class="token variable">`</span></span>._    /     _.-'</span>    <span class="token operator">|</span>     PID: 27294  <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._  `-./  _.-<span class="token string">'    _.-'</span>                                    <span class="token operator">|</span><span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._    `-.__.-<span class="token string">'    _.-'</span>_.-<span class="token string">'|                                   |    <span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._        _.-'</span>_.-<span class="token string">'    |           http://redis.io          <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._`-.__.-'</span>_.-<span class="token string">'    _.-'</span>                                    <span class="token operator">|</span><span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._    `-.__.-<span class="token string">'    _.-'</span>_.-<span class="token string">'|                                   |    <span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._        _.-'</span>_.-<span class="token string">'    |                                    <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._`-.__.-'</span>_.-<span class="token string">'    _.-'</span>                                         <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-.__.-<span class="token string">'    _.-'</span>                                                 `-._        _.-<span class="token string">'                                                         `-.__.-'</span>                                               27294:X 20 Nov 2020 10:04:01.923 <span class="token comment" spellcheck="true"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span>27294:X 20 Nov 2020 10:04:01.927 <span class="token comment" spellcheck="true"># Sentinel ID is 70676cdcefbce6df0e7dfc918d3a43f73f1d8544</span>27294:X 20 Nov 2020 10:04:01.927 <span class="token comment" spellcheck="true"># +monitor master myredis 127.0.0.1 6379 quorum 1</span>27294:X 20 Nov 2020 10:04:01.928 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:04:01.931 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</code></pre><p>如果master节点断开，这时就会从从机中随机选择一个服务器。（这里有一个投票算法）</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6381<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:masterconnected_slaves:1slave0:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6380,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>80383,lag<span class="token operator">=</span>1master_replid:1cefe2fe33f522f486f8f0acc0d2c2a21243ec72master_replid2:988a7eba9f0c5df73c20486eb2ce0efba8275880master_repl_offset:80383second_repl_offset:77679repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:3459repl_backlog_histlen:76925127.0.0.1:6381<span class="token operator">></span></code></pre><p>哨兵日志：</p><pre class=" language-bash"><code class="language-bash">27294:X 20 Nov 2020 10:04:01.927 <span class="token comment" spellcheck="true"># Sentinel ID is 70676cdcefbce6df0e7dfc918d3a43f73f1d8544</span>27294:X 20 Nov 2020 10:04:01.927 <span class="token comment" spellcheck="true"># +monitor master myredis 127.0.0.1 6379 quorum 1</span>27294:X 20 Nov 2020 10:04:01.928 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:04:01.931 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:30.573 <span class="token comment" spellcheck="true"># +sdown master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:30.573 <span class="token comment" spellcheck="true"># +odown master myredis 127.0.0.1 6379 #quorum 1/1</span>27294:X 20 Nov 2020 10:08:30.573 <span class="token comment" spellcheck="true"># +new-epoch 1</span>27294:X 20 Nov 2020 10:08:30.573 <span class="token comment" spellcheck="true"># +try-failover master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:30.577 <span class="token comment" spellcheck="true"># +vote-for-leader 70676cdcefbce6df0e7dfc918d3a43f73f1d8544 1</span>27294:X 20 Nov 2020 10:08:30.577 <span class="token comment" spellcheck="true"># +elected-leader master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:30.577 <span class="token comment" spellcheck="true"># +failover-state-select-slave master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:30.654 <span class="token comment" spellcheck="true"># +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:30.654 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:30.725 * +failover-state-wait-promotion slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:31.096 <span class="token comment" spellcheck="true"># +promoted-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:31.096 <span class="token comment" spellcheck="true"># +failover-state-reconf-slaves master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:31.182 * +slave-reconf-sent slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:32.105 * +slave-reconf-inprog slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:32.105 * +slave-reconf-done slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 637927294:X 20 Nov 2020 10:08:32.160 <span class="token comment" spellcheck="true"># +failover-end master myredis 127.0.0.1 6379</span>27294:X 20 Nov 2020 10:08:32.160 <span class="token comment" spellcheck="true"># +switch-master myredis 127.0.0.1 6379 127.0.0.1 6381</span>27294:X 20 Nov 2020 10:08:32.160 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 638127294:X 20 Nov 2020 10:08:32.160 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 638127294:X 20 Nov 2020 10:09:02.244 <span class="token comment" spellcheck="true"># +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span></code></pre><p>如果主机重新连接回来，只能归并到新的主机下作为从机，这就是哨兵模式的规则。</p><blockquote><p>哨兵模式</p></blockquote><p>优点：</p><ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有。</li><li>主从可以切换，故障可以转移，系统的可用性更好。</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮。</li></ul><p>缺点：</p><ul><li>Redis不易在线扩容，集群容量一旦达到上限，在线扩容十分麻烦。</li><li>实现哨兵模式的配置比较繁琐，里面有很多配置项。</li></ul><blockquote><p>哨兵模式的全部配置</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Example sentinel.conf</span><span class="token comment" spellcheck="true"># 哨兵sentinel实例运行的端口 默认26379</span>port 26379<span class="token comment" spellcheck="true"># 哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment" spellcheck="true"># 哨兵sentinel监控的redis主节点的 ip port </span><span class="token comment" spellcheck="true"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment" spellcheck="true"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><span class="token comment" spellcheck="true"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster 127.0.0.1 6379 1<span class="token comment" spellcheck="true"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment" spellcheck="true"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment" spellcheck="true"># sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment" spellcheck="true"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment" spellcheck="true"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster 30000<span class="token comment" spellcheck="true"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span>这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。<span class="token comment" spellcheck="true"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster 1<span class="token comment" spellcheck="true"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><span class="token comment" spellcheck="true">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment" spellcheck="true">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment" spellcheck="true">#3.当想要取消一个正在进行的failover所需要的时间。  </span><span class="token comment" spellcheck="true">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment" spellcheck="true"># 默认三分钟</span><span class="token comment" spellcheck="true"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster 180000<span class="token comment" spellcheck="true"># SCRIPTS EXECUTION</span><span class="token comment" spellcheck="true">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment" spellcheck="true">#对于脚本的运行结果有以下规则：</span><span class="token comment" spellcheck="true">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment" spellcheck="true">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment" spellcheck="true">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment" spellcheck="true">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment" spellcheck="true">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><span class="token comment" spellcheck="true">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><span class="token comment" spellcheck="true">#一个是事件的类型，</span><span class="token comment" spellcheck="true">#一个是事件的描述。</span><span class="token comment" spellcheck="true">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment" spellcheck="true">#通知脚本</span><span class="token comment" spellcheck="true"># sentinel notification-script &lt;master-name> &lt;script-path></span>  sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment" spellcheck="true"># 客户端重新配置主节点参数脚本</span><span class="token comment" spellcheck="true"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment" spellcheck="true"># 以下参数将会在调用脚本时传给脚本:</span><span class="token comment" spellcheck="true"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment" spellcheck="true"># 目前&lt;state>总是“failover”,</span><span class="token comment" spellcheck="true"># &lt;role>是“leader”或者“observer”中的一个。 </span><span class="token comment" spellcheck="true"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment" spellcheck="true"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment" spellcheck="true"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</code></pre><p>如果有哨兵集群，还需配置每个哨兵端口。</p><h1 id="十四、Redis缓存穿透和雪崩"><a href="#十四、Redis缓存穿透和雪崩" class="headerlink" title="十四、Redis缓存穿透和雪崩"></a>十四、Redis缓存穿透和雪崩</h1><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p><img src="/archives/8eda3648/image-20201120104339283.png" alt=""></p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再到数据库中进行查找。数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。</p><p>网络安全中有人恶意使用这种手段进行攻击被称为洪水攻击。</p><p><strong>缓存穿透是因数据查找不到导致的。</strong></p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong>（BloomFilter）</p><p>布隆过滤器是一种数据结构，对所有可能查询的参数一hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p><img src="/archives/8eda3648/image-20201120111015067.png" alt=""></p><p>将数据库中所有的查询条件，放入布隆过滤器中，当一个查询请求过来时，先经过布隆过滤器进行查，如果判断请求查询值存在，则继续查；如果判断请求查询不存在，直接丢弃。</p><p><strong>缓存空对象</strong></p><p>将数据库中的空值也缓存到缓存层中，这样查询该空值就不会再访问DB，而是直接在缓存层访问就行。</p><p>但是这样有个弊端就是缓存太多空值占用了更多的空间，可以通过给缓存层空值设立一个较短的过期时间来解决，例如60s。</p><p>使用该方法存在以下两个问题：</p><ul><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键。</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>简单来说，缓存击穿就是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><p><strong>缓存击穿是由于一个数据（热点数据）找的人太多导致的。</strong></p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面来看，没有设置过期时间，所以就不会出现热点key过期后产生的问题。</p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p><p><strong>加互斥锁</strong></p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p><p>分布式锁：使用分布式锁，保证对于每个key，同时只有一个线程去查询后端服务，其它线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。</p><p>换句话说，大量的key设置了相同的过期时间 或者 Redis 服务器宕机，导致在缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩。</p><p>与缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到，从而查数据库。</p><p>其中集中过期，倒不是最致命的，比较致命的缓存雪崩是缓存服务器某个结点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，此时，数据库也是可以顶住压力的，无非就是对数据库产生周期性的压力而已。而缓存服务器结点的宕机，对数据库造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong></p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p><p>例如，在双十一那天，多增加几台redis（会或者停掉一些服务），保证主要的服务可用。</p><p><strong>限流降级</strong></p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1S54y1R7SB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://lskjwp.gitee.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://lskjwp.gitee.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/cee9589/"/>
    <id>https://lskjwp.gitee.io/archives/cee9589/</id>
    <published>2020-11-15T08:11:05.000Z</published>
    <updated>2021-11-14T07:16:13.023Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV17E411N7KN" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>MybatisPlus（简称MP）是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>官网：<a href="https://baomidou.com/" target="_blank" rel="noopener">https://baomidou.com/</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h1 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h1><p>地址：<a href="https://baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B" target="_blank" rel="noopener">https://baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B</a></p><p>使用第三方组件：</p><p>1、导入对应的依赖。</p><p>2、研究依赖如何配置。</p><p>3、代码如何编写。</p><p>4、提高扩展技术能力。</p><h2 id="2-1、步骤"><a href="#2-1、步骤" class="headerlink" title="2-1、步骤"></a>2-1、步骤</h2><p>1、创建数据库mybatis_plus。</p><p>2、创建user表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>真实开发中，version（乐观锁）、deleted（逻辑删除）</p><p>3、编写项目，初始化项目（SpringBoot）。</p><p>4、导入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 数据库驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mybatis-plus 并非官方的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>说明：使用mybatis-plus可以节省大量的代码，尽量不要同时导入mybatis和mybatis-plus，因为存在版本的差异。</p><p>5、连接数据库。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接配置</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useSSL-false&amp;useUnicode=true&amp;characterEncoding=utf-8</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><p>6、pojo-&gt;mapper接口-&gt;使用</p><p>（pojo-&gt;dao（连接mybatis，配置mapper.xml）-&gt;servive-&gt;controller）</p><p><strong>pojo</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>mapper接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在对应的mapper上实现基本的接口BaseMapper</span><span class="token annotation punctuation">@Repository</span>  <span class="token comment" spellcheck="true">//代表持久层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有的CRUD操作都已经编写完成了，不需要像以前一样配置很多文件了</span><span class="token punctuation">}</span></code></pre><p>需要在主启动类上去扫描mapper包下的所有接口：<code>@MapperScan("com.lskj.mapper")</code></p><p><strong>测试类中测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minidev<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisPlusApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承了BaseMapper，所有的方法都来自父类，也可编写自定义扩展方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询全部用户</span>        <span class="token comment" spellcheck="true">//参数是一个wrapper，条件构造器</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>User(id=1, name=Jone, age=18, email=test1@baomidou.com)User(id=2, name=Jack, age=20, email=test2@baomidou.com)User(id=3, name=Tom, age=28, email=test3@baomidou.com)User(id=4, name=Sandy, age=21, email=test4@baomidou.com)User(id=5, name=Billie, age=24, email=test5@baomidou.com)</code></pre><h1 id="三、配置日志"><a href="#三、配置日志" class="headerlink" title="三、配置日志"></a>三、配置日志</h1><p>现在所有的SQL是不可见的，想要知道是怎样执行的，需要查看日志。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置日志</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><p>配置完成后，继续运行测试类进行查看。</p><pre><code>==&gt;  Preparing: SELECT id,name,age,email FROM user ==&gt; Parameters: &lt;==    Columns: id, name, age, email&lt;==        Row: 1, Jone, 18, test1@baomidou.com&lt;==        Row: 2, Jack, 20, test2@baomidou.com&lt;==        Row: 3, Tom, 28, test3@baomidou.com&lt;==        Row: 4, Sandy, 21, test4@baomidou.com&lt;==        Row: 5, Billie, 24, test5@baomidou.com&lt;==      Total: 5</code></pre><h1 id="四、CRUD扩展"><a href="#四、CRUD扩展" class="headerlink" title="四、CRUD扩展"></a>四、CRUD扩展</h1><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试插入</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> insertResult <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自动生成id</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>insertResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//受影响的行数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//id会自动回填</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>==&gt;  Preparing: INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? ) ==&gt; Parameters: 1327604736777629698(Long), test(String), 20(Integer), test@qq.com(String)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3b4a1a75]1User(id=1327604736777629698, name=test, age=20, email=test@qq.com)</code></pre><p>数据库插入的id默认值，全局唯一id</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><blockquote><p>默认<code>ID_WORKER</code>全局唯一id。</p></blockquote><p>分布式系统唯一id生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html" target="_blank" rel="noopener">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><p><strong>雪花算法（snowflake）：</strong>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><blockquote><p>主键自增</p></blockquote><p>需要配置主键自增：</p><p>1、实体类字段上<code>@TableId(type = IdType.AUTO)</code>。</p><p>2、数据库字段一定要自增。</p><blockquote><p>其它</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> IdType <span class="token punctuation">{</span>    <span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//数据库id自增</span>    <span class="token function">NONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//未设置主键</span>    <span class="token function">INPUT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//手动输入</span>    <span class="token function">ID_WORKER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//默认的全局id</span>    <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//全局唯一id uuid</span>    <span class="token function">ID_WORKER_STR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ID_WORKER 字符串表示法</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试</p></blockquote><p><strong>User.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对应数据库中的主键（uuid、自增id、雪花算法、redis、zookeeper）</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//一旦手动输入id之后，就需要自己配置id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试插入</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> insertResult <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自动生成id</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>insertResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//受影响的行数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//id会自动回填</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>==&gt;  Preparing: INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? ) ==&gt; Parameters: 6(Long), test(String), 20(Integer), test@qq.com(String)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@53b1a3f8]1User(id=6, name=test, age=20, email=test@qq.com)</code></pre><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试更新</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test_update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//updateById 但是参数是一个 对象</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>==&gt;  Preparing: UPDATE user SET name=?, age=? WHERE id=? ==&gt; Parameters: test_update(String), 18(Integer), 6(Long)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58af5076]1</code></pre><h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><p>创建时间、修改时间。这些操作一般都是自动化完成的，不希望手动更新。</p><p>阿里巴巴开发手册：所有的数据库表：gmt_create、gmt_modified几乎所有的表都要配置上，而且需要自动化。</p><blockquote><p>方式一：数据库级别（工作中不允许修改数据库）</p></blockquote><p>1、在表中新增字段create_time，update_time</p><p><img src="/archives/cee9589/image-20201114221212322.png" alt=""></p><p>2、再次测试插入方法，需先把实体类同步。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对应数据库中的主键（uuid、自增id、雪花算法、redis、zookeeper）</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//一旦手动输入id之后，就需要自己配置id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试更新：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试更新</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test_update_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//updateById 但是参数是一个 对象</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>==&gt;  Preparing: UPDATE user SET name=?, age=? WHERE id=? ==&gt; Parameters: test_update_2(String), 19(Integer), 6(Long)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7209ffb5]1</code></pre><p><img src="/archives/cee9589/image-20201114221852896.png" alt=""></p><blockquote><p>方式二：代码级别</p></blockquote><p>1、删除数据库的默认值、更新操作。</p><p><img src="/archives/cee9589/image-20201114222012228.png" alt=""></p><p>2、实体类字段属性上需要增加注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对应数据库中的主键（uuid、自增id、雪花算法、redis、zookeeper）</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//一旦手动输入id之后，就需要自己配置id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字段添加填充内容</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、编写处理器来处理这个注解即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>handler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj * @create 2020/11/14 - 22:24 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//不要忘记把处理器加到IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//插入时的填充策略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新时的填充策略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、测试插入。</p><p>5、测试更新，注意观察时间。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p>乐观锁：顾名思义，十分乐观，总是认为不会出现问题，无论做什么都不上锁。若出现问题，再次更新值测试。</p><p>悲观锁：顾名思义，十分悲观，总是认为总是出现问题，无论做什么都会上锁，再去操作。</p></blockquote><p><strong>乐观锁</strong></p><blockquote><p>当要更新一条记录的时候，希望这条记录没有被别人更新<br>乐观锁实现方式：</p><blockquote><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul></blockquote></blockquote><blockquote><p>测试MP的乐观锁插件</p></blockquote><p>1、给数据库增加version字段。</p><p><img src="/archives/cee9589/image-20201115100533102.png" alt=""></p><p>2、给实体类加对应的字段。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span>  <span class="token comment" spellcheck="true">//乐观锁Version注解</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre><blockquote><p>说明:</p></blockquote><ul><li><strong>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</strong></li><li>整数类型下 <code>newVersion = oldVersion + 1</code></li><li><code>newVersion</code> 会回写到 <code>entity</code> 中</li><li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法</li><li><strong>在 <code>update(entity, wrapper)</code> 方法下, <code>wrapper</code> 不能复用!!!</strong></li></ul><p>3、注册组件。（将主启动类上的扫描组件拿过来了）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.lskj.mapper"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//扫描mapper文件夹</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册乐观锁插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、测试。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、查询用户信息</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、修改用户信息</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"testOptimisticLocker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test_locker@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3、执行更新操作</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试乐观锁   失败（多线程下）</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLocker_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//线程1</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"testOptimisticLocker01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test_locker@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线程2</span>    User user02 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"testOptimisticLocker02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user02<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test_locker@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自旋锁来多次尝试提交</span>    userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//若没有乐观锁就会覆盖插队线程的值</span><span class="token punctuation">}</span></code></pre><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试批量查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByBatchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试条件查询 使用map</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义查询</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>1、使用原始limit进行分页。</p><p>2、使用第三方插件，pageHelper。</p><p>3、MP内置了分页插件。</p><blockquote><p>使用</p></blockquote><p>1、配置拦截器组件即可。</p><p><strong>MybatisPlusConfig.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、直接使用Page对象即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试分页查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//参数一：当前页，参数二：页面大小</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>基本删除</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>8L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过id删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过id批量删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过id批量删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过map删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过map删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><blockquote><p>物理删除：从数据库中直接移除</p><p>逻辑删除：在数据库中并没有删除，而是通过一个变量来让它失效</p></blockquote><p>管理员可以查看被删除的记录。（防止数据的丢失，类似于回收站）</p><blockquote><p>说明:</p><p>只对自动注入的sql起效:</p><ul><li>插入: 不作限制</li><li>查找: 追加where条件过滤掉已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li><li>更新: 追加where条件防止更新到已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li><li>删除: 转变为 更新</li></ul><p>例如:</p><ul><li>删除: <code>update user set deleted=1 where id = 1 and deleted=0</code></li><li>查找: <code>select id,name,deleted from user where deleted=0</code></li></ul><p>字段类型支持说明:</p><ul><li>支持所有数据类型(推荐使用 <code>Integer</code>,<code>Boolean</code>,<code>LocalDateTime</code>)</li><li>如果数据库字段使用<code>datetime</code>,逻辑未删除值和已删除值支持配置为字符串<code>null</code>,另一个值支持配置为函数来获取值如<code>now()</code></li></ul><p>附录:</p><ul><li>逻辑删除是为了方便数据恢复和保护数据本身价值等等的一种方案，但实际就是删除。</li><li>如果你需要频繁查出来看就不应使用逻辑删除，而是以一个状态去表示。</li></ul></blockquote><p>测试：</p><p>1、在数据表中增加一个deleted字段。</p><p><img src="/archives/cee9589/image-20201115113816264.png" alt=""></p><p>2、实体类中增加属性。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span>  <span class="token comment" spellcheck="true">//逻辑删除</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre><p>3、配置。</p><p><strong>MybatisPlusConfig.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//逻辑删除组件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>配置逻辑删除（application.properties）</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置逻辑删除</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre><p>4、测试删除。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过id删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>走的是更新操作，并非是删除操作。</p><pre><code>==&gt;  Preparing: UPDATE user SET deleted=1 WHERE id=? AND deleted=0 ==&gt; Parameters: 1(Long)&lt;==    Updates: 1Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@40247d48]通过id删除成功！</code></pre><p>记录依旧在，但数据库中deleted的值已经更新变化为1。</p><blockquote><p>通过查询进行查看。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>结果：</strong></p><pre><code>==&gt;  Preparing: SELECT id,name,age,email,version,deleted,create_time,update_time FROM user WHERE id=? AND deleted=0 ==&gt; Parameters: 1(Long)&lt;==      Total: 0Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@315105f]null</code></pre><p>查询时会自动过滤被逻辑删除的字段。</p><h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><p>MP提供性能分析插件，如果超时就会停止运行。</p><p>性能分析拦截器，用于输出每条SQL语句及其执行时间。</p><p>1、导入插件。</p><p><strong>MybatisPlusConfig.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SQL执行效率插件</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置dev test环境开启，保证效率</span><span class="token keyword">public</span> PerformanceInterceptor <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    PerformanceInterceptor performanceInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setMaxTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置SQL执行的最大时间，若超时则不执行</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//SQL格式化</span>    <span class="token keyword">return</span> performanceInterceptor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要在SpringBoot中配置环境为dev或test环境。</p><p><strong>application.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 设置开发环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><p>2、测试。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果：</p><pre><code>==&gt;  Preparing: SELECT id,name,age,email,version,deleted,create_time,update_time FROM user WHERE id=? AND deleted=0 ==&gt; Parameters: 1(Long)&lt;==      Total: 0 Time：34 ms - ID：com.lskj.mapper.UserMapper.selectByIdExecute SQL：    SELECT        id,        name,        age,        email,        version,        deleted,        create_time,        update_time     FROM        user     WHERE        id=1         AND deleted=0Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@502a4156]null</code></pre><p>若超过规定的时间就会抛出异常。</p><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p>写一些复杂的SQL就可以使用Wrapper来代替。</p><p><a href="https://baomidou.com/guide/wrapper.html#abstractwrapper" target="_blank" rel="noopener">https://baomidou.com/guide/wrapper.html#abstractwrapper</a></p><blockquote><p>测试一：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询name不为空的用户，同时邮箱也不为空，并且年龄大于等于20</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试二：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询名字为 test的用户</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询一个数据，出现多个结果使用List或Map</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试三：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询年龄在20-25岁之间的用户</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//区间20-25</span>    Integer count <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询结果数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试四：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模糊查询</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper        <span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//name中不含e =>左和右 %e%</span>        <span class="token comment" spellcheck="true">//.likeLeft("email","t"); //%t</span>        <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//t%</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试五：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//id 在子查询中查出来</span>    wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"select id from user where id&lt;3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectObjs</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试六：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过id进行排序</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//降序</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h2><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity（pojo）、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p><a href="https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</a></p><p>测试：</p><blockquote><p>MyBatis-Plus 从 <code>3.0.3</code> 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖。</p></blockquote><p>1、导入代码生成器依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis-plus 并非官方的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- velocity模板引擎，mybatis-plus代码生成器需要--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、编写配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代码生成器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要构建一个 代码自动生成器 对象</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置策略</span>        <span class="token comment" spellcheck="true">//1、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath<span class="token operator">+</span><span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"AuthorName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%Service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//去掉Service的I前缀</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、设置数据源</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=UTC&amp;useSSL-false&amp;useUnicode=true&amp;characterEncoding=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、包的配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"mybatisPlus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.lskj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置要映射的表名</span>        <span class="token comment" spellcheck="true">//strategy.setInclude("t_user","t_dept");</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自动Lombok</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动填充配置</span>        TableFill gmtCreate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill gmtModified <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乐观锁</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//localhoat:8080/test_t_01</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV17E411N7KN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://lskjwp.gitee.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://lskjwp.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/afea1789/"/>
    <id>https://lskjwp.gitee.io/archives/afea1789/</id>
    <published>2020-11-01T10:26:34.000Z</published>
    <updated>2021-12-12T06:15:46.914Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/av75233634" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1、什么是Spring"><a href="#1、什么是Spring" class="headerlink" title="1、什么是Spring"></a>1、什么是Spring</h2><p>Spring是一个开源框架。Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</p><p><strong>Spring是如何简化Java开发？</strong></p><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><ul><li>基于POJO的轻量级和最小侵入性编程；</li><li>通过IOC，依赖注入（DI）和面向接口实现松耦合；</li><li>基于切面（AOP）和惯例进行声明式编程；</li><li>通过切面和模板减少样式代码</li></ul><h2 id="2、什么是SpringBoot"><a href="#2、什么是SpringBoot" class="headerlink" title="2、什么是SpringBoot"></a>2、什么是SpringBoot</h2><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p><strong>SpringBoot的特性</strong></p><p>● 能够快速创建基于Spring的应用程序</p><p>● 能够直接使用java main方法启动内嵌的Tomcat服务器运行SpringBoot程序，不需要部署war包文件</p><p>● 提供约定的starter POM来简化Maven配置，让Maven的配置变得简单</p><p>● 自动化配置，根据项目的Maven依赖配置，Springboot自动配置Spring、Spring mvc等</p><p>● 提供了程序的健康检查等功能</p><p>● 基本可以完全不使用XML配置文件，采用注解配置</p><p><strong>SpringBoot四大核心</strong></p><ul><li><p>自动配置：针对很多Spring应用程序和常见的应用功能，SpringBoot能自动提供相关配置</p></li><li><p>起步依赖：告诉SpringBoot需要什么功能，它就能引入需要的依赖库</p></li><li><p>Actuator：让你能够深入运行中的SpringBoot应用程序，一探SpringBoot程序的内部信息</p></li><li><p>命令行界面：这是SpringBoot的可选特性，主要针对Groovy语言使用；</p></li></ul><p>Groovy是一种基于JVM(Java虚拟机) 的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与Java代码很好地结合，也能用于扩展现有代码，由于其运行在JVM上的特性，Groovy可以使用其他Java语言编写的库。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h1 id="二、微服务"><a href="#二、微服务" class="headerlink" title="二、微服务"></a>二、微服务</h1><h2 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h2><p>微服务是一种架构风格，它要求在开发一个应用时，这个应用必须构建成一系列小服务的组合，可以通过http的方式进行互通。</p><h2 id="2、单体应用架构"><a href="#2、单体应用架构" class="headerlink" title="2、单体应用架构"></a>2、单体应用架构</h2><p>所谓单体应用架构（all in one）是指，将一个应用中的所有应用服务都封装在一个应用中。</p><p>无论是ERP、CRM或其他系统，都把数据库访问、web访问…各个功能放到一个war包内。</p><ul><li>优点：易于开发和测试，方便部署；当需要扩展时，只需要将war复制多份，然后放到多个服务器上，再做负载均衡即可。</li><li>缺点：哪怕要修改一个非常小的地方，都需要停掉整个服务，重新打包、部署这个应用war包。特别是对于一个大型应用，不可能把所有内容都放在一个应用里面，这样如何维护、如何分工合作都是问题。</li></ul><h2 id="3、微服务架构"><a href="#3、微服务架构" class="headerlink" title="3、微服务架构"></a>3、微服务架构</h2><p>all in one的架构方式，把所有的功能单元放在一个应用里面。然后把整个应用部署到服务器上。如果负载能力不行，将整个应用进行水平复制，进行扩展，然后在负载均衡。</p><p>所谓微服务架构，就是打破之前all in one的架构方式，把每个功能元素独立出来。把独立出来的功能元素动态组合，需要的功能元素才去拿来组合，需要多一些时间时可以整个多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p><p>优点：</p><ul><li>节省了调用资源。</li><li>每个功能元素的服务都是一个可替换的、可独立升级的软件代码。</li></ul><h1 id="三、第一个SpringBoot程序"><a href="#三、第一个SpringBoot程序" class="headerlink" title="三、第一个SpringBoot程序"></a>三、第一个SpringBoot程序</h1><p>Spring官方提供了非常方便的工具让我们快速构建应用</p><p>Spring Initializr：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p><p><strong>项目创建方式一：</strong>使用Spring Initializr 的 Web页面创建项目</p><p>1、打开  <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p><p>2、填写项目信息</p><p>3、点击”Generate Project“按钮生成项目；下载此项目</p><p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p><p><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目</p><p>1、创建一个新项目</p><p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>3、填写项目信息</p><p>4、选择初始化的组件（初学勾选 Web 即可）</p><p>5、填写项目路径</p><p>6、等待项目构建成功</p><p><strong>项目结构分析：</strong></p><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><p>1、程序的主启动类</p><p>2、一个 application.properties 配置文件</p><p>3、一个 测试类</p><p>4、一个 pom.xml</p><p><strong>resources目录</strong></p><ul><li><p>static：存放静态资源，如图片、CSS、JavaScript等。</p></li><li><p>templates：存放web页面的模板文件。</p></li><li><p>application.properties/application.yml：用于存放程序的各种依赖模块的配置信息，比如服务端口、数据库连接配置等。</p></li></ul><h1 id="四、运行原理"><a href="#四、运行原理" class="headerlink" title="四、运行原理"></a>四、运行原理</h1><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><h3 id="1-1、父依赖"><a href="#1-1、父依赖" class="headerlink" title="1-1、父依赖"></a>1-1、父依赖</h3><p>spring-boot-dependencies：核心依赖在父工程中。</p><p>在写或者引入一些SpringBoot依赖的时候，不需要指定版本，因为有这些版本仓库。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>键盘按住<code>CTRL</code>点击<code>spring-boot-starter-parent</code>，发现还有一个父依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>以后导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本。</strong></p><h3 id="1-2、启动器"><a href="#1-2、启动器" class="headerlink" title="1-2、启动器"></a>1-2、启动器</h3><p><strong>spring-boot-starter</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>启动器：简单来说，就是SpringBoot的启动场景。</p><p>比如spring-boot-starter-web，会自动导入web环境所有的依赖。</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 需要用什么功能就导入什么样的场景启动器即可 。</p><h3 id="1-3、主程序"><a href="#1-3、主程序" class="headerlink" title="1-3、主程序"></a>1-3、主程序</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@SpringBootApplication：标注这个类是一个springboot的应用</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//springboot项目代码必须放在放到SpringbootApplication类所在的同级目录或下级目录</span>        <span class="token comment" spellcheck="true">//将springboot应用启动</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot01Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@SpringBootApplication</code><strong>注解</strong></p><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。</p><p>进入该注解，看到还有其它注解：</p><ul><li><p><code>@ComponentScan</code></p><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中。</p></li><li><p><code>@SpringBootConfiguration</code></p><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类。</p><p>继续进去这个注解查看：</p><ul><li><code>@Configuration</code>说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件<ul><li><code>@Component</code> 说明启动类本身也是Spring中的一个组件而已，负责启动应用</li></ul></li></ul></li><li><p><code>@EnableAutoConfiguration</code>：<strong>开启自动配置功能</strong></p><p>进入该注解可以看到一下注解：</p><ul><li><p><code>@AutoConfigurationPackage</code> ：自动配置包</p><ul><li><p><code>@import</code> ：Spring底层注解<code>@import</code>， 给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器</p></li></ul></li><li><p><code>@Import({AutoConfigurationImportSelector.class})</code>：给容器导入组件</p><p>AutoConfigurationImportSelector ：自动配置导入选择器</p><p><strong>AutoConfigurationImportSelector.class</strong></p><p>1、这个类中有一个这样的方法</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 获得候选的配置</span>   <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span>       <span class="token comment" spellcheck="true">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span>       List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> configurations<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>2、这个方法又调用了  SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里它又调用了 loadSpringFactories 方法</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、继续点击查看 loadSpringFactories 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>MultiValueMap<span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//去获取一个资源 "META-INF/spring.factories"</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span> <span class="token operator">:</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LinkedMultiValueMap result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将读取到的资源遍历，封装成为一个Properties</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                URL url <span class="token operator">=</span> <span class="token punctuation">(</span>URL<span class="token punctuation">)</span>urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UrlResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator var6 <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>var6<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String factoryClassName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> var9 <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> var10 <span class="token operator">=</span> var9<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var11 <span class="token operator">&lt;</span> var10<span class="token punctuation">;</span> <span class="token operator">++</span>var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String factoryName <span class="token operator">=</span> var9<span class="token punctuation">[</span>var11<span class="token punctuation">]</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> factoryName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location [META-INF/spring.factories]"</span><span class="token punctuation">,</span> var13<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Properties properties = PropertiesLoaderUtils.loadProperties(resource);</code>所有资源加载到配置类中。</p><p>4、发现一个多次出现的文件：spring.factories</p><p><code>META-INF/spring.factories</code>：自动配置的核心文件</p><p><img src="/archives/afea1789/image-20200920150941189.png" alt=""></p><p>在该文件自动配置类中随便点击一个看看，例如：<code>WebMvcAutoConfiguration</code></p><p>可以发现里面一个个的都是JavaConfig配置类，而且都注入了一些Bean。</p><p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 <code>@Configuration</code>的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p></li></ul></li></ul><p><img src="/archives/afea1789/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86.svg" alt="自动配置原理"></p><p>思考：这么多自动配置为什么有些没有生效，需要导入对应的start才能有作用。</p><p>自动配置类中的核心注解：<code>@ConditionalOnXXX</code> =&gt; 如果这里面的条件都满足才会生效。</p><p><strong>结论：</strong></p><p>springboot所有自动配置都是在启动的时候扫描并加载，<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定生效，要判断条件是否成立。只要导入了对应的start，就有对应的启动器了。有了启动器，自动装配就会生效，然后就配置成功。</p><ol><li>SpringBoot在启动的时候，从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值；</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>以前需要自动配置的东西，现在springboot帮助做了；</li><li>整合JavaEE，解决方案和自动配置都在<code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>这个jar包中；</li><li>它会把所有需要导入的组件，以类名的方式返回 ，这些组件就会被添加到容器；</li><li>容器中也会存在非常多的<code>xxxAutoConfiguration</code>的文件（<code>@Bean</code>），就是这些类给容器中导入了这个场景需要的所有组件，并自动配置，<code>@Configuration</code>，<code>JavaConfig</code>；</li><li>有了自动配置类 ， 免去了手动编写配置注入功能组件等的工作。</li></ol><h2 id="2、SpringApplication"><a href="#2、SpringApplication" class="headerlink" title="2、SpringApplication"></a>2、SpringApplication</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@SpringBootApplication：标注这个类是一个springboot的应用：启动类下的所有资源被导入</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将springboot应用启动</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot01Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1、SpringApplication"><a href="#2-1、SpringApplication" class="headerlink" title="2-1、SpringApplication"></a>2-1、SpringApplication</h3><p><strong>SpringApplication这个类主要做了以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p><p>3、找出所有的应用程序监听器，设置到listeners属性中</p><p>4、推断并设置main方法的定义类，找到运行的主类</p><p>查看构造器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2、run方法流程分析"><a href="#2-2、run方法流程分析" class="headerlink" title="2-2、run方法流程分析"></a>2-2、run方法流程分析</h3><p><strong>SpringApplication.run分析</strong></p><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行。</p><p><img src="/archives/afea1789/1418974-20200309184347408-1065424525.png" alt=""></p><h1 id="五、yaml配置注入"><a href="#五、yaml配置注入" class="headerlink" title="五、yaml配置注入"></a>五、yaml配置注入</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p><ul><li>语法结构 ：<code>key=value</code></li></ul></li><li><p>application.yml</p><ul><li>语法结构 ：<code>key: value</code></li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给自动配置好了。</p><p>如果<strong>application.properties</strong>、<strong>application.yml</strong>同时存在，两个文件都有效，但是application.properties的优先级会比application.yml高。</p><h2 id="2、yaml概述"><a href="#2、yaml概述" class="headerlink" title="2、yaml概述"></a>2、yaml概述</h2><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><h2 id="3、yaml基础语法"><a href="#3、yaml基础语法" class="headerlink" title="3、yaml基础语法"></a>3、yaml基础语法</h2><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值 [数字,布尔值,字符串]</strong></p><p>字面量直接写在后面就可以,字符串默认不用加上双引号或者单引号；</p><pre><code>k: v</code></pre><p>注意：</p><ul><li><p><code>""</code>双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p><code>''</code>单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><pre><code>#对象、Map格式k:     v1:    v2:</code></pre><p>在下一行来写对象的属性和值得关系，<strong>注意缩进</strong>。例如：</p><pre><code>student:    name: 张三    age: 3</code></pre><p>行内写法：</p><pre><code>student: {name: 张三,age: 3}</code></pre><p><strong>数组（ List、set ）</strong></p><p>用 <code>-</code> 值表示数组中的一个元素。例如：</p><pre><code>pets: - cat - dog - pig</code></pre><p>行内写法：</p><pre><code>pets: [cat,dog,pig]</code></pre><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口。</p><pre><code>server:  port: 8081</code></pre><h2 id="4、注入配置文件"><a href="#4、注入配置文件" class="headerlink" title="4、注入配置文件"></a>4、注入配置文件</h2><p>yaml文件更强大的地方在于，他可以给实体类直接注入匹配值。</p><h3 id="4-1、yaml注入配置文件"><a href="#4-1、yaml注入配置文件" class="headerlink" title="4-1、yaml注入配置文件"></a>4-1、yaml注入配置文件</h3><p>1、在springboot项目中的resources目录下新建一个文件 application.yml；</p><p>2、编写一个实体类 Dog；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...有参、无参构造，get、set、toString()方法</span><span class="token punctuation">}</span></code></pre><p>3、使用注解<code>@Value</code>给bean注入属性值的 ；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">//注册bean到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...有参、无参构造，get、set、toString()方法</span><span class="token punctuation">}</span></code></pre><p>4、在SpringBoot的测试类下注入Dog并输出一下；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot01ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、再编写一个复杂一点的实体类：Person 类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...有参、无参构造，get、set、toString()方法  </span><span class="token punctuation">}</span></code></pre><p>6、使用yaml配置的方式进行注入，编写一个yaml配置；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> lskj  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2020/09/21  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>  <span class="token key atrule">lists</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> code    <span class="token punctuation">-</span> play    <span class="token punctuation">-</span> music  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 小黑    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>7、注入到Person类中；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>@ConfigurationProperties</code>作用：将配置文件中配置的每一个属性的值，映射到这个组件中；告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定。</p><p>参数 <code>prefix = “person”</code>: 将配置文件中的person下面的所有属性一一对应。</p><p>只有这个组件是容器中的组件，才能使用容器提供的<code>@ConfigurationProperties</code>功能。</p><p>8、IDEA 提示，springboot配置注解处理器没有找到。可以查看文档，找到一个依赖！（打开网页后，版本改成2.1.9.RELEASE，依赖在最后一部分开头哪里）</p><p><img src="/archives/afea1789/image-20200921153630810.png" alt=""></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --></span><span class="token comment" spellcheck="true">&lt;!--解决使用@ConfigurationProperties注解出现警告问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>重启过后，可能上面的依赖会报红，刷新一下Maven。</p><p>9、在测试类中测试一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot01ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token comment" spellcheck="true">//private Dog dog;</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2、加载指定的配置文件"><a href="#4-2、加载指定的配置文件" class="headerlink" title="4-2、加载指定的配置文件"></a>4-2、加载指定的配置文件</h3><p>*<em><code>@PropertySource</code> *</em>：加载指定的配置文件；</p><p><strong><code>@configurationProperties</code></strong>：默认从全局配置文件中获取值；</p><p>1、在<code>resources</code>目录下新建一个<code>person.properties</code>文件。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">lskj</span></code></pre><p>2、在Person中指定加载<code>person.properties</code>文件。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//@ConfigurationProperties(prefix = "person")</span><span class="token comment" spellcheck="true">//加载指定的配置文件</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:person.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//SPEL表达式取出配置文件的值</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean happy<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p><code>properties</code>配置文件在写中文的时候，会有乱码 ， 需要去IDEA中设置编码格式为<code>UTF-8</code>。</p><p>3、在测试类进行测试。</p><h2 id="5、配置文件占位符"><a href="#5、配置文件占位符" class="headerlink" title="5、配置文件占位符"></a>5、配置文件占位符</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> lskj$<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#随机uuid</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#随机int</span>  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2020/09/21  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>  <span class="token key atrule">lists</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> code    <span class="token punctuation">-</span> play    <span class="token punctuation">-</span> music  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>person.hello<span class="token punctuation">:</span>other<span class="token punctuation">}</span>_小黑    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>需注释掉加载指定文件中的<code>@PropertySource</code>和<code>@Value</code>，去掉<code>@ConfigurationProperties</code>的注释。</p><p>在测试类中进行测试。</p><h2 id="6、对比"><a href="#6、对比" class="headerlink" title="6、对比"></a>6、对比</h2><p><code>@Value</code>使用起来并不友好。需要为每个属性单独注解赋值，比较麻烦。</p><table><thead><tr><th align="center"></th><th align="center">@ConfigurationProperties</th><th align="center">@Value</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">批量注入配置文件中的属性</td><td align="center">一个个指定</td></tr><tr><td align="center">松散绑定（松散语法）</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">SpEL</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">JSR303数据校验</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">复杂类型封装</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><p>1、<code>@ConfigurationProperties</code>只需要写一次即可 ， <code>@Value</code>则需要每个字段都添加</p><p>2、松散绑定：这个什么意思呢? 比如yml中写的<code>last-name</code>，这个和<code>lastName</code>是一样的， <code>-</code>后面跟着的字母默认是大写的。这就是松散绑定。</p><p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><p><strong>结论：</strong></p><ul><li><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p></li><li><p>如果在某个业务中，只需要获取配置文件中的某个值，可以使用一下<code>@value</code>；</p></li><li><p>如果说编写了一个JavaBean来和配置文件进行一一映射，就直接<code>@configurationProperties</code>。</p></li></ul><h1 id="六、JSR303数据校验及多环境切换"><a href="#六、JSR303数据校验及多环境切换" class="headerlink" title="六、JSR303数据校验及多环境切换"></a>六、JSR303数据校验及多环境切换</h1><h2 id="1、JSR303数据校验"><a href="#1、JSR303数据校验" class="headerlink" title="1、JSR303数据校验"></a>1、JSR303数据校验</h2><p>Springboot中可以用<code>@validated</code>来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p><p>写个注解让name只支持Email格式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//注册bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span>  <span class="token comment" spellcheck="true">//数据校验</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//name必须是邮箱格式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>若<code>@Email</code>注解报红需导入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>运行结果 ：default message [不是一个合法的电子邮件地址];</p><p><strong>使用数据校验，可以保证数据的正确性；</strong></p><p><strong>常见参数</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"名字不能为空"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"年龄最大不能查过120"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span>空检查<span class="token annotation punctuation">@Null</span>       验证对象是否为null<span class="token annotation punctuation">@NotNull</span>    验证对象是否不为null<span class="token punctuation">,</span> 无法查检长度为<span class="token number">0</span>的字符串<span class="token annotation punctuation">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="token number">0</span><span class="token punctuation">,</span>只对字符串<span class="token punctuation">,</span>且会去掉前后空格<span class="token punctuation">.</span><span class="token annotation punctuation">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY<span class="token punctuation">.</span>Booelan检查<span class="token annotation punctuation">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="token boolean">true</span>  <span class="token annotation punctuation">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="token boolean">false</span>  长度检查<span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> 验证对象（Array<span class="token punctuation">,</span>Collection<span class="token punctuation">,</span>Map<span class="token punctuation">,</span>String）长度是否在给定的范围之内  <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token punctuation">)</span> string is between min and max included<span class="token punctuation">.</span>日期检查<span class="token annotation punctuation">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  <span class="token annotation punctuation">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  <span class="token annotation punctuation">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</code></pre><h2 id="2、多环境切换"><a href="#2、多环境切换" class="headerlink" title="2、多环境切换"></a>2、多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境。</p><h3 id="2-1、多配置文件"><a href="#2-1、多配置文件" class="headerlink" title="2-1、多配置文件"></a>2-1、多配置文件</h3><p>在实际开发的过程中，我们的项目会经历很多的阶段(开发-&gt;测试-&gt;上线)，每个阶段的配置也会不同，例如：端口、上下文根、数据库等，那么这个时候为了方便在不同的环境之间切换，SpringBoot提供了多环境配置。</p><p>在主配置文件编写时，文件名可以是 <code>application-{profile}.properties/yml</code> , 用来指定多个环境版本。</p><ul><li><code>application-test.properties</code>代表测试环境配置</li><li><code>application-dev.properties</code> 代表开发环境配置</li><li><code>application-ready.properties</code>代表准生产环境配置</li><li><code>application-product.properties</code>代表生产环境配置</li></ul><p>但是Springboot并不会直接启动这些配置文件，它<code>默认使用application.properties主配置文件</code>；</p><p>需要通过一个配置来选择需要激活的环境（在总配置文件application.properties进行环境的激活）：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#激活开发环境</span><span class="token comment" spellcheck="true">#spring.profiles.active=dev</span><span class="token comment" spellcheck="true">#激活测试环境</span><span class="token comment" spellcheck="true">#spring.profiles.active=test</span><span class="token comment" spellcheck="true">#激活生产环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">product</span></code></pre><h3 id="2-2、yaml的多文档块"><a href="#2-2、yaml的多文档块" class="headerlink" title="2-2、yaml的多文档块"></a>2-2、yaml的多文档块</h3><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true">#选择要激活那个环境块</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#配置环境的名称</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#配置环境的名称</span></code></pre><p><strong>如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h3 id="2-3、配置文件加载位置"><a href="#2-3、配置文件加载位置" class="headerlink" title="2-3、配置文件加载位置"></a>2-3、配置文件加载位置</h3><p><strong>外部加载配置文件的方式十分多，选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p><strong>官方外部配置文件说明参考文档：</strong></p><pre><code>Config locations are searched in reverse order. By default, the configured locations are classpath:/,classpath:/config/,file:./,file:./config/*/,file:./config/. The resulting search order is the following:file:./config/file:./config/*/file:./classpath:/config/classpath:/</code></pre><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><pre><code>优先级1：项目路径下的config文件夹配置文件优先级2：项目路径下的config文件夹下的配置文件优先级3：项目路径下配置文件优先级4：资源路径下的config文件夹配置文件优先级5：资源路径下配置文件</code></pre><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题：</p><pre><code>#配置项目的访问路径server.servlet.context-path=/kuang</code></pre><p>指定位置加载配置文件，还可以通过spring.config.location来改变默认的配置文件位置。</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高。</p><pre><code>java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</code></pre><h1 id="七、自动配置原理"><a href="#七、自动配置原理" class="headerlink" title="七、自动配置原理"></a>七、自动配置原理</h1><p><a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/htmlsingle/#appendix" target="_blank" rel="noopener">SpringBoot官方文档</a></p><h2 id="1、分析自动配置原理"><a href="#1、分析自动配置原理" class="headerlink" title="1、分析自动配置原理"></a>1、分析自动配置原理</h2><p>以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">/*    启动指定类的ConfigurationProperties功能；    进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；    并把HttpProperties加入到ioc容器中*/</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*    Spring底层@Conditional注解    根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；    这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效*/</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*    判断配置文件中是否存在某个配置：spring.http.encoding.enabled；    如果不存在，判断也是成立的    即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的。*/</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span>    value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"enabled"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Encoding properties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>    <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//。。。。。。。</span><span class="token punctuation">}</span></code></pre><p><strong>根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// .....</span>    <span class="token comment" spellcheck="true">/*        去配置文件里面试试前缀，会有提示。例如：spring.http.encoding.        这就是自动装配的原理。    */</span><span class="token punctuation">}</span></code></pre><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、看需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、再来看这个自动配置类中到底配置了哪些组件；（只要要用的组件存在在其中，就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h2 id="2、-Conditional"><a href="#2、-Conditional" class="headerlink" title="2、@Conditional"></a>2、@Conditional</h2><p><strong>自动配置类必须在一定的条件下才能生效。</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效。</p><p><img src="/archives/afea1789/20180901101723169.png" alt=""></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>怎么知道哪些自动配置类生效？</p><p><strong>可以通过启用 debug=true属性。来让控制台打印自动配置报告。</strong></p><p>这样，就可以很方便的知道，哪些自动配置类生效。</p><p>Debug，默认是false<br>True，表示开启Spring boot的debug模式。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#开启SpringBoot debug模式</span><span class="token attr-name">debug</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.http.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token attr-name">spring.http.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p><strong>打印信息</strong></p><p>Positive matches<br>匹配成功<br>表示，启用的自动配置类</p><p>Negative matches<br>没有匹配成功<br>表示，没有启用的自动配置类</p><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong> </p><h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>启动器模块是一个 空 jar 文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库。</p><p>官方命名：</p><ul><li>前缀：spring-boot-starter-xxx</li><li>比如：spring-boot-starter-web….</li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h2 id="1、编写启动器"><a href="#1、编写启动器" class="headerlink" title="1、编写启动器"></a>1、编写启动器</h2><p>1、新建一个空项目spring-boot-starter-diy。</p><p>2、新建一个普通Maven模块test-spring-boot-starter。</p><p>3、新建一个SpringBoot模块test-spring-boot-starter-autoconfigure。</p><p>4、在starter（test-spring-boot-starter）中导入autoconfigure依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 启动器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  引入自动配置模块 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>test-spring-boot-starter-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>5、将atuoconfigure项目下多余的文件删除。</p><p>6、编写一个service。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    TestProperties testProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> TestProperties <span class="token function">getTestProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> testProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTestProperties</span><span class="token punctuation">(</span>TestProperties testProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>testProperties <span class="token operator">=</span> testProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> testProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name <span class="token operator">+</span> testProperties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7、编写配置类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"test.test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String prefix<span class="token punctuation">;</span>    <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrefix</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuffix</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>8、编写自动配置类并注入bean。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnWebApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>EnableConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span>  <span class="token comment" spellcheck="true">//wev应用生效</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>TestProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    TestProperties testProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TestService <span class="token function">testService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        TestService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setTestProperties</span><span class="token punctuation">(</span>testProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> service<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>9、在resources下编写META-INF/spring-factories。</p><pre><code># Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.lskj.TestServiceAutoConfiguration</code></pre><p>10、编写完成后，将其安装到maven仓库中。</p><ul><li>点击右侧边栏的 Maven</li><li>点击test-spring-boot-starter和autoconfigure下的Lifecycle/install</li></ul><p><strong>新建项目测试自定义的启动器</strong></p><p>1、新建一个SpringBoot项目starter-test（勾选上web模块）。</p><p>2、导入自定义的启动器。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>test-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、编写controller，进行测试自定义的接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>TestService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    TestService testService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> testService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"DiyStarter Test!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、编写配置文件application.properties。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">test.test.prefix</span><span class="token punctuation">=</span><span class="token attr-value">"This is Perfix!"</span><span class="token attr-name">test.test.suffix</span><span class="token punctuation">=</span><span class="token attr-value">"This is SUffix!"</span></code></pre><p>5、启动项目进行测试。</p><p>访问<a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a></p><pre><code>"This is Perfix!"DiyStarter Test!"This is SUffix!"</code></pre><h1 id="九、Web开发静态资源处理"><a href="#九、Web开发静态资源处理" class="headerlink" title="九、Web开发静态资源处理"></a>九、Web开发静态资源处理</h1><h2 id="1、静态资源处理"><a href="#1、静态资源处理" class="headerlink" title="1、静态资源处理"></a>1、静态资源处理</h2><h3 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h3><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类中。</p><p>其中的<code>addResourceHandlers</code>方法：添加资源处理。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已禁用默认资源处理</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 缓存控制</span>    Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// webjars 配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态资源配置</span>    String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所有的<code>/webjars/**</code> ， 都需要去<code>classpath:/META-INF/resources/webjars/</code>找对应的资源。</p><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjars</a>：本质就是以jar包的方式引入静态资源 。</p><p>使用SpringBoot需要使用Webjars，如使用jQuery，只要引入jQuery对应版本的pom依赖即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入的jQuery.js文件在<code>Maven:org.webjars:jquery:3.5.1/jquery-3.5.1/META-INF/resources/webjars/jquery/3.5.1</code>下。</p><p>如需访问，只要是静态资源，SpringBoot就会去对应的路径寻找资源，例如访问jquery.js文件。</p><pre><code>http://localhost:8080/webjars/jquery/3.5.1/jquery.js</code></pre><h3 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h3><p>导入自己需要的静态资源，应去找staticPathPattern发现第二种映射规则 ：<code>/**</code>, 访问当前的项目任意资源，它会去找 resourceProperties 这个类。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 进入方法</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 找到对应的值</span><span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations <span class="token operator">=</span> CLASSPATH_RESOURCE_LOCATIONS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 找到路径</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span>     <span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>ResourceProperties 可以设置和我们静态资源有关的参数。</p><p>上述代码中的数组指向了它会去寻找资源的文件夹。</p><p>故以下四个目录存放的静态资源可以被识别：</p><pre><code>"classpath:/META-INF/resources/""classpath:/resources/""classpath:/static/""classpath:/public/"</code></pre><p>在resources根目录下新建对应的文件夹，都可以存放需要使用的静态文件。</p><p>比如访问<code>http://localhost:8080/test.js</code>，它就可以去以上文件夹中寻找对应的静态资源文件。</p><pre><code>优先级：resources&gt;static(默认)&gt;public</code></pre><h3 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h3><p>一旦自定义了静态文件夹的路径，原来的自动配置都会失效。</p><p><strong>application.properties</strong></p><pre><code>spring.resources.static-locations=classpath:/test/,classpath:/lskj/</code></pre><h2 id="2、首页处理"><a href="#2、首页处理" class="headerlink" title="2、首页处理"></a>2、首页处理</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">,</span>                                                           FormattingConversionService mvcConversionService<span class="token punctuation">,</span>                                                           ResourceUrlProvider mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    WelcomePageHandlerMapping welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// getWelcomePage 获得欢迎页</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Optional<span class="token operator">&lt;</span>Resource<span class="token operator">></span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> locations <span class="token operator">=</span> <span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ::是java8 中新引入的运算符</span>    <span class="token comment" spellcheck="true">// Class::function的时候function是属于Class的，应该是静态方法。</span>    <span class="token comment" spellcheck="true">// this::function的funtion是属于这个对象的。</span>    <span class="token comment" spellcheck="true">// 简而言之，就是一种语法糖而已，是一种简写</span>    <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getIndexHtml<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>isReadable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 欢迎页就是一个location下的的 index.html 而已</span><span class="token keyword">private</span> Resource <span class="token function">getIndexHtml</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location <span class="token operator">+</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被<code>/**</code> 映射。</p><p>比如访问  <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><h1 id="十、Thymeleaf模板引擎"><a href="#十、Thymeleaf模板引擎" class="headerlink" title="十、Thymeleaf模板引擎"></a>十、Thymeleaf模板引擎</h1><p>SpringBoot项目默认推荐使用的前端引擎是thymeleaf。</p><blockquote><p><strong>SpringBoot使用JSP框架</strong></p><p>如果需要使用jsp，需要引入springboot内嵌Tomcat对jsp的解析依赖。使用springboot集成jsp，需手动指定jsp最后编译的路径，而且springboot集成jsp编译jsp的路径是springboot规定好的位置<code>META-INF/resources</code>。</p><p><strong>pom.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入Spring Boot内嵌的Tomcat对JSP的解析包，不加解析不了jsp页面--></span>    <span class="token comment" spellcheck="true">&lt;!--如果只是使用JSP页面，可以只添加该依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果要使用servlet必须添加该以下两个依赖--></span>    <span class="token comment" spellcheck="true">&lt;!-- servlet依赖的jar包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jsp依赖jar包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果使用JSTL必须添加该依赖--></span>    <span class="token comment" spellcheck="true">&lt;!--jstl标签依赖的jar包start--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--源文件夹--></span>            <span class="token comment" spellcheck="true">&lt;!--webapp文件夹是自定义创建来存放jsp，创建后打开项目结构-Modules-项目-Web-通过+号进行添加Web Resource Directory，并点击Create Artifact-应用--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--指定编译到META—INF/resources--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--指定源文件夹中的哪个资源需要进行编译--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>在<strong>application.properties</strong>配置文件中配置视图解析器。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置视图解析器</span><span class="token attr-name">spring.mvc.view.perfix</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span></code></pre></blockquote><h2 id="1、认识Thymeleaf"><a href="#1、认识Thymeleaf" class="headerlink" title="1、认识Thymeleaf"></a>1、认识Thymeleaf</h2><p>Thymeleaf是一个流行的模板引擎，该模板引擎采用Java语言开发。</p><p>模板引擎是一个技术名词，是跨领域平台的概念。模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想</p><p>Thymeleaf 对网络环境不存在严格的要求，既能用于Web环境下，也能用于非Web环境下。在非Web环境下，他能直接显示模板上的静态数据;在Web环境下，它能像Jsp一样从后台接收数据并替换掉模板上的静态数据。它是基于HTML的，以HTML标签为载体，Thymeleaf要寄托在HTML标签下实现。</p><p>Spring Boot 集成了Thymeleaf模板技术，并且Spring Boot官方也推荐使用Thymeleaf来替代JSP技术，Thymeleaf是另外的一种模板技术，它本身并不属于Spring Boot，Spring Boot只是很好地集成这种模板技术，作为前端页面的数据展示，在过去的Java Web开发中，我们往往会选择使用Jsp去完成页面的动态渲染，但是jsp需要翻译编译运行，效率低。</p><p>Thymeleaf的官方网站：<a href="http://www.thymeleaf.org" target="_blank" rel="noopener">http://www.thymeleaf.org</a></p><p>Thymeleaf官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><h2 id="2、引入Thymeleaf"><a href="#2、引入Thymeleaf" class="headerlink" title="2、引入Thymeleaf"></a>2、引入Thymeleaf</h2><p>Thymeleaf -&gt;Github：<a href="https://github.com/thymeleaf/thymeleaf" target="_blank" rel="noopener">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p><p>Spring官方文档中找到对应的版本，在Starters下找到<code>spring-boot-starter-thymeleaf</code>依赖后，pom.xml文件中引入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>在application.properties中设置thymeleaf参数。</strong></p><pre class=" language-xml"><code class="language-xml">#设置thymeleaf页面缓存失效spring.thymeleaf.cache=false#thymeleaf模版前缀，默认值,可选项spring.thymeleaf.prefix=classpath:/templates/#thymeleaf模版后缀，默认值,可选项spring.thymeleaf.suffix=.html</code></pre><h2 id="3、Thymeleaf分析"><a href="#3、Thymeleaf分析" class="headerlink" title="3、Thymeleaf分析"></a>3、Thymeleaf分析</h2><p><strong>ThymeleafProperties</strong>自动配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkTemplateLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String prefix <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String suffix <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String mode <span class="token operator">=</span> <span class="token string">"HTML"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset encoding<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述代码中可看到默认的前缀和后缀。而我们只需要把html页面放在类路径下的templates目录下，thymeleaf就可以自动渲染了。</p><p>总结：使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可。</p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>1.编写一个TestController。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在templates目录下的页面，只能通过controller来跳转</span><span class="token comment" spellcheck="true">//这个需要模板引擎的支持，thymeleaf</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.在templates目录下编写一个测试页面test.html。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3.启动项目，<a href="http://localhost:8080/test请求测试。" target="_blank" rel="noopener">http://localhost:8080/test请求测试。</a></p><h2 id="5、Thymeleaf语法"><a href="#5、Thymeleaf语法" class="headerlink" title="5、Thymeleaf语法"></a>5、Thymeleaf语法</h2><p>1、使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>所有的html元素都可以被thymeleaf替换接管（th:元素名）</p><p>2、修改测试请求，增加数据传输。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token string">"test text!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、test.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${text}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>4、启动，访问测试。</p><h3 id="thymeleaf常见属性"><a href="#thymeleaf常见属性" class="headerlink" title="thymeleaf常见属性"></a>thymeleaf常见属性</h3><p>thymeleaf大部分属性和html的一样，只不过是其前面多了一个<code>th:</code>前缀。</p><p>使用到的静态资源存放在static文件夹下。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/jquery-1.7.2.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/image/test.jpg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${test}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">th:</span>type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${id}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--    th:atrr属性也是给HTML中某元素的某属性赋值    使用该属性的好处是可以给html中没有定义的属性动态的赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">=</span>${id}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--thymeleaf没有对应的th标签，所以${user.id}不能被识别--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">zhangsan</span><span class="token attr-value"><span class="token punctuation">=</span>${user.id}</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--通过th:attr对自定义的属性赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">=</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    值不是从后台获取的，可以不使用thymeleaf属性--></span>&lt;form id="register" th:action="@{'/register"th:method="post">    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    用户密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:object属性用于数据对象绑定，通常用于选择变量表达式（星号表达式）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:style设置样式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token string">'color:red'</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一个红色的span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:each既可以循环遍历集合，也可以循环遍历数组和Map    user：当前循环的对象变量名称    userStat：当前循环对象状态的变量，通过该变量可以获取以下信息        index: 当前迭代对象的index(从0开始计算)        count: 当前迭代对象的个数(从1开始计算)这两个用的较多        size: 被迭代对象的大小        current: 当前迭代变量        even/odd: 布尔值，当前循环是否是偶数/奇数(从0开始计算)        first: 布尔值，当前循环是否是第一个        last: 布尔值，当前循环是否是最后一个    循环体信息xxxStat也可以不定义，则默认采用迭代变量加上Stat后缀    ${userList}：当前循环的集合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user,userStat:${userList}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userStat.index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map:${userMap}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${map.key}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${map.value}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${map.value.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${map.value.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex eq 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex eq 0}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:unless：与th:if相反，即条件判断取反--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex ne 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    一旦某个case判断值为true，剩余的case则都当做false，“*”表示默认的case，前面的case都不匹配时候，执行默认的case--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${testType}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:inline 有三个取值类型 (text, javascript 和 none)        内敛文本=> th:inline="text" 可以让Thymeleaf表达式不依赖于html标签，直接使用内敛表达式[[表达式]]即可获取动态数据，要求在父级标签上加th:inline = “text”属性        内敛脚本=> th:inline="javascript" 在js代码中获取后台的动态数据--></span>标准变量表达式用户数据的展示：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--以上代码可以使用内敛文本代替--></span>内敛表达式 用户数据的展示：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    [[${user.id}]]    [[${user.name}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"欢迎"</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"用户！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th align="center">功能</th><th align="center">属性</th></tr></thead><tbody><tr><td align="center">片段包含</td><td align="center">th:insert</td></tr><tr><td align="center"></td><td align="center">th:replace</td></tr><tr><td align="center">遍历</td><td align="center">th:each</td></tr><tr><td align="center">条件判断</td><td align="center">th:if</td></tr><tr><td align="center"></td><td align="center">th:unless</td></tr><tr><td align="center"></td><td align="center">th:swith</td></tr><tr><td align="center"></td><td align="center">th:case</td></tr><tr><td align="center">声明变量</td><td align="center">th:object</td></tr><tr><td align="center"></td><td align="center">th:with</td></tr><tr><td align="center">任意属性修改</td><td align="center">th:attr</td></tr><tr><td align="center"></td><td align="center">th:attrprepend</td></tr><tr><td align="center"></td><td align="center">th:attrappend</td></tr><tr><td align="center">修改制定属性默认值</td><td align="center">th:value</td></tr><tr><td align="center"></td><td align="center">th:href</td></tr><tr><td align="center"></td><td align="center">th:src</td></tr><tr><td align="center"></td><td align="center">…</td></tr><tr><td align="center">修改标签体内容</td><td align="center">th:text(转义特殊字符)</td></tr><tr><td align="center"></td><td align="center">th:utext(不转义特殊字符)</td></tr><tr><td align="center">声明片段</td><td align="center">th:fragment</td></tr><tr><td align="center">片段删除</td><td align="center">th:remove</td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p><strong>标准变量表达式</strong><code>${...}</code>，标准变量表达式用于访问容器(tomcat)上下文环境中的变量，功能和EL中的 <code>${}</code>相同。Thymeleaf 中的变量表达式使用<code>${变量名}</code> 的方式获取Controller中model其中的数据。</p><p><strong>选择变量表达式</strong><code>*{...}</code>，也叫星号变量表达式，使用<code>th:object</code>属性来绑定对象，不推荐使用。选择变量表达式<code>*{...}</code>是另一种类似于标准变量表达式<code>${...}</code>表示变量的方法；选择变量表达式在执行时是在选择的对象上求解，而<code>${...}</code>是在上下文的变量Model上求解，这种写法比标准变量表达式繁琐。</p><p><strong>URL表达式</strong><code>@{...}</code>，主要用于链接、地址的展示。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${data}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    th:object属性用于数据对象绑定，通常用于选择变量表达式（星号表达式）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{http://localhost:8080/test}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/test?username<span class="token punctuation">=</span><span class="token punctuation">'</span>+${username}+<span class="token punctuation">'</span>&amp;password<span class="token punctuation">=</span><span class="token punctuation">'</span>+${password}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/test(username<span class="token punctuation">=</span>${username},password<span class="token punctuation">=</span>${password})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/test/<span class="token punctuation">'</span>+${id}+<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+${username}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请求路径为RESTful风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre><code>Simple expressions:（表达式语法）Variable Expressions: ${...}：获取变量值；OGNL；    1）、获取对象的属性、调用方法    2）、使用内置的基本对象：#18         #ctx : the context object.         #vars: the context variables.         #locale : the context locale.         #request : (only in Web Contexts) the HttpServletRequest object.         #response : (only in Web Contexts) the HttpServletResponse object.         #session : (only in Web Contexts) the HttpSession object.         #servletContext : (only in Web Contexts) the ServletContext object.    3）、内置的一些工具对象：　　　　　　#execInfo : information about the template being processed.　　　　　　#uris : methods for escaping parts of URLs/URIs　　　　　　#conversions : methods for executing the configured conversion service (if any).　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.　　　　　　#numbers : methods for formatting numeric objects.　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.　　　　　　#objects : methods for objects in general.　　　　　　#bools : methods for boolean evaluation.　　　　　　#arrays : methods for arrays.　　　　　　#lists : methods for lists.　　　　　　#sets : methods for sets.　　　　　　#maps : methods for maps.　　　　　　#aggregates : methods for creating aggregates on arrays or collections.==================================================================================  Selection Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；  Message Expressions: #{...}：获取国际化内容  Link URL Expressions: @{...}：定义URL；  Fragment Expressions: ~{...}：片段引用表达式Literals（字面量）      Text literals: 'one text' , 'Another one!' ,…      Number literals: 0 , 34 , 3.0 , 12.3 ,…      Boolean literals: true , false      Null literal: null      Literal tokens: one , sometext , main ,…Text operations:（文本操作）    String concatenation: +    Literal substitutions: |The name is ${name}|Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , notComparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )Conditional operators:条件运算（三元运算符）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)Special tokens:    No-Operation: _</code></pre><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量：对应数据类型的合法取值，可以在html页面直接使用，不需要后台传递。</p><p><strong>1、文本字面量</strong></p><p>用单引号包围的字符串为文本字面量。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/user/<span class="token punctuation">'</span>+${user.id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p><strong>2、数字字面量</strong></p><pre class=" language-html"><code class="language-html">现在是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2021<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>1+1=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1+1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p><strong>3、boolean字面量</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isOk <span class="token punctuation">=</span><span class="token punctuation">=</span> true}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span></code></pre><p><strong>4、null字面量</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isOk <span class="token punctuation">=</span><span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>isOk为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${isOk !<span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>isOk不为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>thymeleaf字符串拼接</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--一种是字面量使用加号拼接--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>当前是第<span class="token punctuation">'</span>+${currentPage}+<span class="token punctuation">'</span>页 ,共<span class="token punctuation">'</span>+${total}+<span class="token punctuation">'</span>页<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--另一种更优雅的方式，使用“|”减少了字符串的拼接的加号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|当前是第${currentPage}页,共${total}页|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算：<code>+</code>,<code>-</code>, <code>*</code> , <code>/</code> , <code>%</code></p><p>关系比较: <code>&gt;</code> ,<code>&lt;</code> , <code>&gt;=</code>,<code>&lt;=</code> ( gt , lt , ge , le )</p><p>相等判断：<code>==</code>,<code>!=</code>( eq , ne )</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex eq 1 ? <span class="token punctuation">'</span>男<span class="token punctuation">'</span> : <span class="token punctuation">'</span>女<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${sex <span class="token punctuation">=</span><span class="token punctuation">=</span> 1 ? <span class="token punctuation">'</span>男<span class="token punctuation">'</span> : <span class="token punctuation">'</span>女<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="表达式基本对象与功能对象"><a href="#表达式基本对象与功能对象" class="headerlink" title="表达式基本对象与功能对象"></a>表达式基本对象与功能对象</h3><p>模板引擎提供了一组内置的对象，这些内置的对象可以直接在模板中使用，这些对象由<code>#</code>号开始引用、比较常用的内置对象。</p><blockquote><p><code>#request</code>，相当于httpServletRequest对象，这是3.x版本，若是2.x版本使用<code>#httpServletRequest</code>。</p><ul><li><p>在页面获取应用的上下文根，一般在js中请求路径中加上，避免404</p><pre><code>${#request.getContextPath()}</code></pre></li><li><p>如果后台将数据传到request中，可以通过该方式在页面上获取</p><pre><code>${#request.getAttribute("xxx")}</code></pre></li></ul></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> contextPath <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> contextPath <span class="token operator">+</span> <span class="token string">"/user/userInfo"</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong><code>#session</code></strong>，相当于HttpSession对象，这是3.x版本，若是2.x版本使用<code>#httpSession</code></p><ul><li>在后台ThymeleafController中的方法中向session中放数据</li></ul><pre class=" language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requtst<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>在前端页面中从session中取数据</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getArrtibute(<span class="token punctuation">'</span>site<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--从session中获取值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>data<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sapn</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#httpSession.getAttribute(<span class="token punctuation">'</span>data<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sapn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.data}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//获取协议名称</span>    <span class="token keyword">var</span> scheme <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#<span class="token punctuation">{</span>request<span class="token punctuation">.</span>getScheme<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取服务器名称</span>    <span class="token keyword">var</span> serverName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#<span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取服务器端口</span>    <span class="token keyword">var</span> serverPort <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#<span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取上下文根</span>    <span class="token keyword">var</span> contextPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> requestURL <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#httpServletRequest<span class="token punctuation">.</span>requestURL<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求的参数</span>    <span class="token keyword">var</span> queryString <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>#httpServletRequest<span class="token punctuation">.</span>queryString<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> requestAddress <span class="token operator">=</span> requestURL <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> queryString<span class="token punctuation">;</span>               </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>Thymeleaf表达式功能对象</strong></p><p>模板引擎提供的一组功能性内置对象，可以在模板中直接使用这些对象提供的功能方法；</p><p>工作中常使用的数据类型，如集合，时间，数值，可以使用Thymeleaf的提供的功能性对象来处理它们；</p><p>内置功能对象前都需要加<code>#</code>号，内置对象一般都以<code>s</code>结尾；</p><p>官方手册：<a href="http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><ul><li><p><code>#dates</code>: java.util.Date对象的实用方法;</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${time}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(time,<span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>#calendars</code>: 和dates类似, 但是 java.util.Calendar 对象;</p></li><li><p><code>#numbers</code>: 格式化数字对象的实用方法;</p></li><li><p><code>#strings</code>: 字符串对象的实用方法： contains, startsWith, prepending/appending等;</p></li><li><p><code>#objects</code>: 对objects操作的实用方法;</p></li><li><p><code>#bools</code>: 对布尔值求值的实用方法;</p></li><li><p><code>#arrays</code>: 数组的实用方法;</p></li><li><p><code>#lists</code>: list的实用方法，比如<code>#sets</code>: set的实用方法;<code>#maps</code>: map的实用方法;<code>#aggregates</code>: 对数组或集合创建聚合的实用方法。</p></li></ul><h1 id="十一、MVC自动配置原理"><a href="#十一、MVC自动配置原理" class="headerlink" title="十一、MVC自动配置原理"></a>十一、MVC自动配置原理</h1><p>官方文档地址：<a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><h2 id="11-1、内容协商视图解析器"><a href="#11-1、内容协商视图解析器" class="headerlink" title="11-1、内容协商视图解析器"></a>11-1、内容协商视图解析器</h2><p><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></p><p>自动配置了ViewResolver，就是SpringMVC的视图解析器，即根据方法的返回值取得视图对象（view），然后由视图对象决定如何渲染（转发，重定向）。</p><p>源码：<strong>WebMvcAutoConfiguration</strong>-&gt;ContentNegotiatingViewResolver</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>ViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"viewResolver"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> ContentNegotiatingViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> ContentNegotiatingViewResolver <span class="token function">viewResolver</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ContentNegotiatingViewResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentNegotiatingViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolver<span class="token punctuation">.</span><span class="token function">setContentNegotiationManager</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ContentNegotiationManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ContentNegotiatingViewResolver uses all the other view resolvers to locate---->ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span>    <span class="token comment" spellcheck="true">// a view so it should have a high precedence</span>    resolver<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resolver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>点进<strong>ContentNegotiatingViewResolver</strong>类，找到对应的解析视图代码。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span> <span class="token comment" spellcheck="true">//注解说明：@Nullable 即参数可为null</span><span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    RequestAttributes attrs <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>attrs <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">,</span> <span class="token string">"No current ServletRequestAttributes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>MediaType<span class="token operator">></span> requestedMediaTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>attrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestedMediaTypes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取候选的试图对象</span>        List<span class="token operator">&lt;</span>View<span class="token operator">></span> candidateViews <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCandidateViews</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选择一个最适合的视图对象，然后把这个对象返回</span>        View bestView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBestView</span><span class="token punctuation">(</span>candidateViews<span class="token punctuation">,</span> requestedMediaTypes<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bestView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> bestView<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>getCandidateViews方法中是把所有的视图解析器拿来进行while循环，挨个解析！</p><pre class=" language-java"><code class="language-java">Iterator var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p><p>给容器中添加一个视图解析器，这个类就会自动的将它组合进来。</p><p>1、写一个视图解析器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ViewResolver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全面扩展 SpringMVC  DispatchServlet</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//再加上@EnableWebMvc该注释，全面接管SpringMVC</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ViewResolver实现了视图解析器接口的类，可以把它看做视图解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ViewResolver <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自定义一个视图解析器</span>    <span class="token comment" spellcheck="true">//静态内部类，视图解析器需要实现ViewResolver接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、观察自定义的视图解析器是否起作用。</p><p>给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中。</p><p>3、启动项目，访问<a href="http://localhost:8080，看Debug信息。" target="_blank" rel="noopener">http://localhost:8080，看Debug信息。</a></p><p>找到this-&gt;（viewResolvers）视图解析器，可看到自定义的视图解析器。</p><p>综上，如果想要使用自定义的东西，只需要给容器中添加这个组件即可。</p><h2 id="11-2、转换器和格式化器"><a href="#11-2、转换器和格式化器" class="headerlink" title="11-2、转换器和格式化器"></a>11-2、转换器和格式化器</h2><p>格式转化器（在WebMvcAutoConfiguration类中）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FormattingConversionService <span class="token function">mvcConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Format format <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WebConversionService conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebConversionService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeFormatters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                               <span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeFormat</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateTimeFormat</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">getDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addFormatters</span><span class="token punctuation">(</span>conversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>点进getDateTime()</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**         * Date-time format to use, for example `yyyy-MM-dd HH:mm:ss`.         */</span><span class="token keyword">private</span> String dateTime<span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">getDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在Properites文件中，刻进行自动配置。</p><p>如果配置了自定义格式化方式，就会注册到Bean中生效，可以在配置文件中配置日期格式化的规则。</p><pre><code>#自定义的配置日期格式化spring.mvc.format.date=</code></pre><h2 id="11-3、修改SpringBoot的默认配置"><a href="#11-3、修改SpringBoot的默认配置" class="headerlink" title="11-3、修改SpringBoot的默认配置"></a>11-3、修改SpringBoot的默认配置</h2><p>SpringBoot在自动配置很多组件时，先看容器中是否有用户自己配置的（如果用户自己配置@bean），若存在则使用用户配置的，若不存在就使用自动配置的。</p><p>如果有些组件可以存在多个，例如视图解析器，就将用户配置的与默认的组合起来。</p><h3 id="扩展使用SpringMVC"><a href="#扩展使用SpringMVC" class="headerlink" title="扩展使用SpringMVC"></a>扩展使用SpringMVC</h3><p>编写一个@Configuration注解类，并且类型为WebMvcConfigurer（不标注@EnableWebMvc注解）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ViewControllerRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//视图跳转</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/lskj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试，访问<a href="http://localhost:8080/lskj" target="_blank" rel="noopener">http://localhost:8080/lskj</a></p><p><strong>要扩展SpringMVC，官方推荐这么去使用，既保SpringBoot留所有的自动配置，也能用用户自己扩展的配置！</strong></p><h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><p>全面接管即SpringBoot对SpringMVC的自动配置不需要了，所有都是用户自己去配置，只需在配置类加上<code>@EnableWebMvc</code>。</p><p><strong>原理分析：</strong></p><p>1、点进注解@EnableWebMvc。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2、点进DelegatingWebMvcConfiguration类查看。</p><pre><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {  // ......}</code></pre><p>DelegatingWebMvcConfiguration：从容器中获取所有的WebMvcConfig。</p><p>它继承了一个父类 WebMvcConfigurationSupport。</p><p><strong>WebMvc自动配置类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> TaskExecutionAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了。</strong></p><p><strong>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能</strong>。</p><h1 id="十二、页面国际化"><a href="#十二、页面国际化" class="headerlink" title="十二、页面国际化"></a>十二、页面国际化</h1><p>部分网站涉及中英文等多语言的切换，这时需要学习国际化。</p><p>1、首先在IDEA中<strong>统一设置properties的编码问题</strong>。</p><p>setting-&gt;file encodings。</p><p>2、编写国际化配置文件，抽取页面需要显示的国际化页面消息。</p><h2 id="12-1、配置文件编写"><a href="#12-1、配置文件编写" class="headerlink" title="12-1、配置文件编写"></a>12-1、配置文件编写</h2><p>1、在resources资源文件下新建目录i18n存放国际化配置文件。</p><p>2、新建文件login.properties、login_zh_CN.properties。</p><p>此时IDEA会自动识别到要做国际化操作，刚创建的两个文件变成存放于Resource Bundle ‘login’目录下。</p><p>3、可以在Resource Bundle ‘login’目录上新建一个文件（Add Property Files to Resource Bundle）。</p><p><img src="/archives/afea1789/image-20201018103326712.png" alt=""></p><p><img src="/archives/afea1789/image-20201018103358094.png" alt=""></p><p>点击”+“,弹出界面，添加英文</p><p><img src="/archives/afea1789/image-20201018103424719.png" alt=""></p><p>点击OK即可。</p><p>4、进入国际化配置文件，点击左下角的Resource Bundle。</p><p><img src="/archives/afea1789/image-20201018103901266.png" alt=""></p><p>点击后，该视图下点击+号可以直接添加属性。</p><p>例如，添加一个login.tip，在右边有三个文件框可以输入。添加内容即可。</p><p>login.properties：默认</p><pre><code>login.btn=登录login.password=密码login.remember=记住我login.tip=请登录login.username=用户名</code></pre><p>英文：</p><pre><code>login.btn=Sign inlogin.password=Passwordlogin.remember=Remember melogin.tip=Please Sign inlogin.username=Username</code></pre><p>中文：</p><pre><code>login.btn=登录login.password=密码login.remember=记住我login.tip=请登录login.username=用户名</code></pre><p><strong>怎样使配置文件生效？</strong></p><p>SpringBoot对国际化的自动配置。这里涉及到一个类：MessageSourceAutoConfiguration</p><p>在该类里有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取 properties 传递过来的值进行判断</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span>MessageSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置国际化文件的基础名（去掉语言国家代码的）</span>        messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>            StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                                       StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Duration cacheDuration <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getCacheDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheDuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        messageSource<span class="token punctuation">.</span><span class="token function">setCacheMillis</span><span class="token punctuation">(</span>cacheDuration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageSource<span class="token punctuation">.</span><span class="token function">setUseCodeAsDefaultMessage</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isUseCodeAsDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为配置文件存放在i18n目录下，所以需要在application.properties中配置这个messages的路径。</p><pre><code>spring.messages.basename=i18n.login</code></pre><h2 id="12-2、配置页面国际化值"><a href="#12-2、配置页面国际化值" class="headerlink" title="12-2、配置页面国际化值"></a>12-2、配置页面国际化值</h2><p>去页面获取国际化的值，查看Thymeleaf的文档，message取值操作为：<code>#{...}</code>。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap.min.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.remember}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.btn}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="12-3、配置国际化解析"><a href="#12-3、配置国际化解析" class="headerlink" title="12-3、配置国际化解析"></a>12-3、配置国际化解析</h2><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器。</p><p>WebMvc自动文件中，SpringBoot默认配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span><span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 容器中没有就自己配，有的话就用用户配置的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 接收头国际化分解</span>    AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AcceptHeaderLocaleResolver 这个类中有一个方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Locale defaultLocale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultLocale <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Locale requestLocale <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Locale<span class="token operator">></span> supportedLocales <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSupportedLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportedLocales<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>supportedLocales<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>requestLocale<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Locale supportedLocale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findSupportedLocale</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> supportedLocales<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>supportedLocale <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> supportedLocale<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> defaultLocale <span class="token operator">!=</span> null <span class="token operator">?</span> defaultLocale <span class="token operator">:</span> requestLocale<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> requestLocale<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>若想点击中英文字样链接使国际化资源生效，就需要使我们自己的Locale生效。</p><p>自定义LocaleResolver，在链接上携带区域信息。</p><p>修改一下页面跳转链接：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span>zh_CN)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(language<span class="token punctuation">=</span>en_US)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>写一个处理请求的类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//解析请求</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取请求中的语言参数</span>        String language <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果没有就使用默认的</span>        <span class="token comment" spellcheck="true">//如果请求链接携带了国际化的参数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//zh_CN  en_US</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> language<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//国家  地区</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了使区域化信息能够生效，需要再配置一下。在MvcConofig下添加bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重启项目，访问测试即可。</p><pre><code>首页配置：所有页面的静态资源都要使用thymeleaf接管。url使用@{}页面国际化：    1、需要配置i18n文件    2、如果需要在项目中进行按钮自动切换，需要自定义一个逐渐LocaleResolver    3、将写的组件配置到Spring容器@Bean</code></pre><h1 id="十三、整合JDBC"><a href="#十三、整合JDBC" class="headerlink" title="十三、整合JDBC"></a>十三、整合JDBC</h1><h2 id="13-1、SpringData"><a href="#13-1、SpringData" class="headerlink" title="13-1、SpringData"></a>13-1、SpringData</h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><h2 id="13-2、JDBC"><a href="#13-2、JDBC" class="headerlink" title="13-2、JDBC"></a>13-2、JDBC</h2><h3 id="创建测试项目测试数据源"><a href="#创建测试项目测试数据源" class="headerlink" title="创建测试项目测试数据源"></a>创建测试项目测试数据源</h3><p>1、新建一个项目，引入相应的模块以及基础模块。</p><p>Web-&gt;Spring Web</p><p>SQL-&gt;JDBC API 、MySQL Driver</p><p>2、编写yml配置文件连接数据库。</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.jdbc.Driver</code></pre><p>3、测试类中测试一下。（配置完后，SpringBoot默认进行了自动配置）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04DataApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查看默认的数据源 class com.zaxxer.hikari.HikariDataSource</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得数据库连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>application.yml配置文件中，CTRL+鼠标点击datasource下的属性，可以查看到可配置的属性。</p><p>全局搜索<code>DataSourceAutoConfiguration</code>，在<code>DataSourceAutoConfiguration</code>文件中可查看数据源所有的自动配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>PooledDataSourceCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> XADataSource<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DataSourceConfiguration<span class="token punctuation">.</span>Hikari<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceConfiguration<span class="token punctuation">.</span>Dbcp2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceJmxConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PooledDataSourceConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这里导入的类都在 DataSourceConfiguration 配置类下，Spring Boot 2.3.4 默认使用HikariDataSource 数据源。而Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p><strong>xxxTemplate：SpringBoot已经配置好模板bean，拿来即用</strong></p><h3 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h3><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>编写一个Controller，注入JDBCTemplate。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询数据库的所有信息</span>    <span class="token comment" spellcheck="true">//没有实体类，数据库中的东西，通过万能的 Map 获取</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list_maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list_maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into mybatis.user(id,name,pwd) values(5,'test','123456')"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"insert success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update mybatis.user set name=?,pwd=? where id="</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test-02"</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"654321"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from mybatis.user where id=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行测试时，会出现以下的报红，但不影响测试。</p><pre><code>Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'.The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></pre><p><strong>问题原因：</strong><code>com.mysql.jdbc.Driver</code>已经被弃用了。新的驱动程序类是<code>com.mysql.cj.jdbc.Driver</code>。驱动程序是通过SPI自动注册的，手动加载驱动程序类通常是不必要的。<br><strong>解决方案：</strong>将数据配置文件里<code>com.mysql.jdbc.Driver</code>修改为<code>com.mysql.cj.jdbc.Driver</code></p><h1 id="十四、整合Druid"><a href="#十四、整合Druid" class="headerlink" title="十四、整合Druid"></a>十四、整合Druid</h1><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><h2 id="14-1、Druid"><a href="#14-1、Druid" class="headerlink" title="14-1、Druid"></a>14-1、Druid</h2><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/" target="_blank" rel="noopener">https://github.com/alibaba/druid/</a></p><h2 id="14-2、配置数据源"><a href="#14-2、配置数据源" class="headerlink" title="14-2、配置数据源"></a>14-2、配置数据源</h2><p>1、添加Druid数据源依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、切换数据源。</p><p>Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以通过 <code>spring.datasource.type</code>指定数据源。</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource</code></pre><p>3、在测试类总注入DataSource，测试获取。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04DataApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查看默认的数据源 class com.zaxxer.hikari.HikariDataSource</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得数据库连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、切换成功，可设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等设置项。</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><p>5、导入log4j依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>6、为DruidDataSource绑定全局配置文件中的参数，在添加到容器中，而不再使用SpringBoot自动生成的。需要自己添加DruidDataSource组件到容器中，并绑定属性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效       @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中     */</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7、测试类中进行测试是否成功。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot04DataApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//DI注入数据源</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查看默认的数据源 class com.zaxxer.hikari.HikariDataSource</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得数据库连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DruidDataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源最大连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getMaxActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"druidDataSource 数据源初始化连接数："</span> <span class="token operator">+</span> druidDataSource<span class="token punctuation">.</span><span class="token function">getInitialSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：</p><pre><code>druidDataSource 数据源最大连接数：8druidDataSource 数据源初始化连接数：0</code></pre><p>则配置参数已经生效。</p><h2 id="14-3、配置Druid数据源监控"><a href="#14-3、配置Druid数据源监控" class="headerlink" title="14-3、配置Druid数据源监控"></a>14-3、配置Druid数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个web界面方便用户查看。</p><p>1、设置Druid后台管理页面（登录账号、密码等），配置后台管理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>support<span class="token punctuation">.</span>http<span class="token punctuation">.</span>StatViewServlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效       @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中     */</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置 Druid 监控管理后台的Servlet；</span>    <span class="token comment" spellcheck="true">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet</span>        <span class="token comment" spellcheck="true">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//loginUsername loginPassword 是固定的，不可更改</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录账号</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后台管理界面的登录密码</span>        <span class="token comment" spellcheck="true">//后台允许谁可以访问</span>        <span class="token comment" spellcheck="true">//initParams.put("allow", "localhost")：表示只有本机可以访问</span>        <span class="token comment" spellcheck="true">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//deny：Druid 后台拒绝谁访问</span>        <span class="token comment" spellcheck="true">//initParams.put("test", "192.168.1.1");  //表示禁止此ip访问</span>        <span class="token comment" spellcheck="true">//设置初始化参数</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为SpringBoot内置了Servlet容器，所以没有web.xml。<br>替代方法：ServletRegistrationBean。</p><p>2、启动项目，访问<a href="http://localhost:8080/druid，进行测试" target="_blank" rel="noopener">http://localhost:8080/druid，进行测试</a></p><p>3、配置Druid web监控的filter过滤器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置 Druid 监控 之  web 监控的 filter</span><span class="token comment" spellcheck="true">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span> <span class="token string">"*.js,*.css,/druid/*,/jdbc/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"/*" 表示过滤所有请求</span>    bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="十五、整合Mybatis"><a href="#十五、整合Mybatis" class="headerlink" title="十五、整合Mybatis"></a>十五、整合Mybatis</h1><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/</a></p><p><strong>SpringBoot继承Mybatis，最主要的是两个注解<code>@Mapper</code>，和<code>@MapperScan</code></strong>。</p><p><code>@Mapper</code>：需要在每一个Mapper接口类上添加，作用是扫描mapper接口；</p><p><code>@MapperScan</code>：是在SpringBoot启动入口类上添加的，它是扫描所有的包。</p><p><strong>关于Mapper映射文件存放的位置的写法有两种</strong>：</p><ul><li>将Mapper接口和Mapper映射文件存放到<code>src/main/java</code>同一目录下，还需要在pom文件中手动指定资源文件夹路径resources；</li><li>将Mapper接口和Mapper映射文件分开存放。Mapper接口类存放到<code>src/main/java</code>目录下，Mapper映射文件存放到resources（类路径），在springboot核心配置文件中指定mapper映射文件存放的位置。</li></ul><p>1、新建一个springboot项目，（Spring Web、JDBC API、MySQL Driver）。</p><p>2、导入Mybatis依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、<code>application.properties</code>中配置数据库连接信息。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><p>4、测试数据库连接是否成功。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot05MybatisApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>SpringBoot工程下使用Mybatis反向工程</strong></p><p>1、编写Mybatis反向工程配置文件（在项目的根目录下）</p><p><strong>GeneratorMapper.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration       PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"       "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 指定连接数据库的JDBC驱动包所在位置，指定到你本机的完整路径 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classPathEntry</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...\mysql-connector-java-xxx.jar<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置table表信息内容体，targetRuntime指定采用MyBatis3的版本 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 配置数据库连接信息 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>                       <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/xxx<span class="token punctuation">"</span></span>                       <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                       <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--       &lt;jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"                       connectionURL="jdbc:mysql://localhost:3306/xxx?useSSL=false&amp;amp;serverTimezone=Hongkong&amp;amp;characterEncoding=utf-8&amp;amp;autoReconnect=true"                       userId="root"                       password="root">           &lt;property name="nullCatalogMeansCurrent" value="true"/>       &lt;/jdbcConnection>       --></span>       <span class="token comment" spellcheck="true">&lt;!-- 生成pojo（实体）类，targetPackage指定pojo类的包名， targetProject指定生成的pojo放在哪个工程（包）下面--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 生成MyBatis的Mapper.xml文件，targetPackage指定mapper.xml文件的包名， targetProject指定生成的mapper.xml放在哪个工程下面 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 生成MyBatis的Mapper接口类文件,targetPackage指定Mapper接口类的包名， targetProject指定生成的Mapper接口放在哪个工程下面 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 数据库表名及对应的Java模型类名 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_xxx<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Xxx<span class="token punctuation">"</span></span>              <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>              <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>              <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>              <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>              <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><ul><li>如果使用的MySQL是8版本的，驱动类变为<code>com.mysql.cj.jdbc.Driver</code></li><li>url后应该加属性<code>nullCatalogMeansCurrent=true</code>，否则生成有问题</li></ul><p>2、在pom.xml文件的build中指定<code>.xml</code>文件夹为resources，并添加mysql反向工程依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--手动指定文件夹为resources--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>       !--mybatis代码自动生成插件-->       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!--配置文件的位置--></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>GeneratorMapper.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>3、点击IDEA工具中右侧的Maven，点击<code>展开对应项目-&gt;Plugins-&gt;mybatis-generator-&gt;mybatis-generator:generate</code>即可生成相关文件。</p></blockquote><p>5、连接成功后，创建实体类。（导入Lombok）</p><p>导入lombok依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Mapper表示本类是一个Mybatis的Mapper</span><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取所有用户信息</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过id查询用户</span>    User <span class="token function">queryUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>6、在resources下创建mybatis/mapper目录，写对应的Mapper映射文件。</p><p>UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user (id,name,pwd) values (#{id},#{name},#{pwd})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set name = #{name},pwd = #{pwd} where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>7、<code>application.properties</code>配置文件中整合Mybatis。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true">#整合Mybatis</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">con.lskj.pojo</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mapper/*.xml</span></code></pre><p>8、编写UserController进行测试。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUserList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/queryUserById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"insert success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"update success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"delete success!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>9、启动项目，进行访问测试。</p><h1 id="十六、SpringSecurity"><a href="#十六、SpringSecurity" class="headerlink" title="十六、SpringSecurity"></a>十六、SpringSecurity</h1><p>SpringSecurity是基于Spring应用提供的声明式的安全保护性的框架，它可以在web请求级别的和方法调用级别处理身份和授权。（Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。）</p><p>官网：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">https://spring.io/projects/spring-security</a></p><p><strong>Spring Security的核心功能主要包括：</strong></p><ul><li>认证 （你是谁）</li><li>授权 （你能干什么）</li><li>攻击防护 （防止伪造身份）</li></ul><p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求。</p><p>对于安全控制，仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理。</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p><strong>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</strong></p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证用户身份后，最终会授予用户访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><h2 id="16-1、测试"><a href="#16-1、测试" class="headerlink" title="16-1、测试"></a>16-1、测试</h2><p>1、新建一个springboot项目。（勾选上Spring Web和thymeleaf模块，若未勾选，后续导入相关依赖也可）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--web--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--thymeleaf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、准备静态资源。（使用到semantic-ui框架）</p><p>semantic-ui：<a href="https://semantic-ui.com/" target="_blank" rel="noopener">https://semantic-ui.com/</a></p><p>中文semantic-ui：<a href="https://zijieke.com/semantic-ui/" target="_blank" rel="noopener">https://zijieke.com/semantic-ui/</a></p><p><strong>static目录</strong></p><p>在 <a href="https://github.com/Semantic-Org/Semantic-UI/tree/master/dist" target="_blank" rel="noopener">https://github.com/Semantic-Org/Semantic-UI/tree/master/dist</a> 中下载<strong>semantic.min.js</strong> 存放在static/js目录下。</p><p>static/css/style.css</p><pre><code>body{    min-width: 1150px;    overflow: auto;}#index-header-nav{    font-size: 0px;}</code></pre><p><strong>templates目录</strong></p><p>templates/index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--semantic-ui--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/style.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/semantic.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主容器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui segment<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index-header-nav<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui secondary menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--登录注销--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--未登录--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-in icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui three column stackable grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui raised segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Level 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/level/Lv1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow alternate circle up icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Lv1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui raised segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Level 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/level/Lv2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow alternate circle up icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Lv2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui raised segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Level 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/level/Lv3}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow alternate circle up icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> Lv3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>templates/views/login.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--semantic-ui--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/semantic.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主容器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui segment<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui placeholder segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui column very relaxed stackable grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lock icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui blue submit button<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>templates/views/level1/Lv1.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Lv1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--semantic-ui--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/static/css/style.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/semantic.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主容器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{index::nav-menu}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui segment<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Lv1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>templates/views/level/Lv2.html</code>、<code>templates/views/level/Lv3.html</code>类似于<code>templates/views/level/Lv1.html</code></p><p>3、配置文件中，关闭模板引擎的缓存。</p><p><strong>application.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>4、controller路由跳转。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/level/{level}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">level</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">)</span> String level<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"views/level/"</span><span class="token operator">+</span>level<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、启动项目，进行访问测试。</p><h2 id="16-2、认证和授权"><a href="#16-2、认证和授权" class="headerlink" title="16-2、认证和授权"></a>16-2、认证和授权</h2><p>1、引入Spring Security。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--security--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、Spring Security配置类。</p><p>帮助文档：<a href="https://docs.spring.io/spring-security/site/docs/" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/</a></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写基础配置类SecurityConfig，继承<code>WebSecurityConfigurerAdapter</code>类，重写<code>configure(HttpSecurity http)</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span>  <span class="token comment" spellcheck="true">//开启WebSecurity模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、定义请求的授权规则。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首页所有人可以访问，对应等级只有对应权限的用户可以访问</span>    <span class="token comment" spellcheck="true">//请求授权规则</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、启动项目，进行测试。此时除了首页和登录页面可以访问，等级页面无法访问。</p><p>5、在上述方法中加入<strong>没有权限默认跳转到登录页面</strong>配置，开启自动配置的登录功能。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首页所有人可以访问，对应等级只有对应权限的用户可以访问</span>    <span class="token comment" spellcheck="true">//请求授权规则</span>    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level/Lv3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"Lv3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//没有权限默认跳转到登录页面，需开启登录的页面</span>    <span class="token comment" spellcheck="true">// 开启自动配置的登录功能</span>    <span class="token comment" spellcheck="true">// /login 请求来到登录页</span>    <span class="token comment" spellcheck="true">// /login?error 重定向到这里表示登录失败</span>    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动项目，进行访问。没有无权限时，自动跳转到登录的页面。（此时无权限跳转的登录页并非测试写的login页面）</p><p>6、定义认证规则。</p><p>重写<code>configure(AuthenticationManagerBuilder auth)</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//super.configure(auth);</span>    <span class="token comment" spellcheck="true">//以下数据正常情况下应从数据库中读取</span>    <span class="token comment" spellcheck="true">//从内存中读（也可以在jdbc中去拿 jdbcAuthentication()）</span>    auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">,</span><span class="token string">"Lv2"</span><span class="token punctuation">,</span><span class="token string">"Lv3"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">,</span><span class="token string">"Lv2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动项目，使用以上账号信息进行访问测试。（springboot2.1.x中可直接使用）</p><p>登录失败，会报错<code>There is no PasswordEncoder mapped for the id "null"</code>。（Spring Security5版本要求密码必须加密）</p><p>PasswordEncoder：密码编码。</p><p>需要对密码进行某种方式加密。</p><p>7、对密码进行编码。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//super.configure(auth);</span>    <span class="token comment" spellcheck="true">//以下数据正常情况下应从数据库中读取</span>    <span class="token comment" spellcheck="true">//从内存中读</span>    auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">,</span><span class="token string">"Lv2"</span><span class="token punctuation">,</span><span class="token string">"Lv3"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">,</span><span class="token string">"Lv2"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"Lv1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动项目，进行访问测试。此时，每个用户只能访问对应权限的等级页面。</p><h2 id="16-3、权限控制和注销"><a href="#16-3、权限控制和注销" class="headerlink" title="16-3、权限控制和注销"></a>16-3、权限控制和注销</h2><p>1、开启自动配置的注销功能。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token comment" spellcheck="true">//开启注销功能，注销后跳转到首页</span>    http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、在首页index.html的导航栏中增加注销按钮。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token comment" spellcheck="true">&lt;!--登录注销--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--未登录--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-in icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注销--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-out icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ... --></span></code></pre><p>启动测试，注销后，成功跳转到首页。</p><p>实现：在用户未登录时，导航栏只显示登录按钮；登录成功后，导航栏显示登录的用户信息以及注销按钮。同时，用户登录成功后，只显示其权限对应的页面。</p><p>3、导入thymeleaf和security的整合包。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- thymeleaf-security --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>4、修改前端页面，index.html。</p><p>导入命名空间</p><pre class=" language-html"><code class="language-html">xmlns:sec="http://www.thymeleaf.org/extras/spring-security"</code></pre><p>修改导航栏，增加认证判断（sec:authorize=”isAuthenticated()”：是否认证登录）</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--登录注销--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--未登录--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-in icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--已登录，才能注销--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>principal.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>            <span class="token comment" spellcheck="true">&lt;!--等级：&lt;span sec:authentication="principal.authorities">&lt;/span>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-out icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 注销        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>重启测试。</p><p>如果注销,404，是因为它默认防止csrf跨站请求伪造，因为会产生安全问题。</p><p>可以将请求改为post表单提交，或在spring security中关闭csrf功能。</p><p>spring security中关闭csrf功能：（SecurityConfig配置类中）</p><pre class=" language-java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭csrf功能</span></code></pre><p>（CSRF一般指跨站请求伪造。）</p><p>5、完成用户功能块认证。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--等级显示：根据用户的角色动态实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>Lv1<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>Lv2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>Lv3<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>Remember me</strong>功能</p><p>现在登录之后，关闭浏览器，在进入首页，需要重新登录。</p><p>开启记住我功能之后，登录后关闭浏览器，重新打开浏览器进行访问，用户依旧存在。</p><p>开启记住我功能：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>   http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开启记住我功能</span><span class="token punctuation">}</span></code></pre><h2 id="16-4、定制登录页"><a href="#16-4、定制登录页" class="headerlink" title="16-4、定制登录页"></a>16-4、定制登录页</h2><p>上述所用到的登录页面是spring security默认的。</p><p><strong>使用自定义的login界面：</strong></p><p>1、在SecurityConfig配置类中的登录页配置后面指定loginPage。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制登录页</span>http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、首页需要指向自定义的login请求。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-in icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>登录需要将相关信息发送到哪，需要配置。</p><p>login.html配置提交方式必须为post。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lock icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui blue submit button<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>请求提交后，还需要验证处理。需配置接收登录的用户名和密码的参数，同时应注意表单提交的地址。</p><p>源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    *     &amp;#064;Override     *     protected void configure(HttpSecurity http) throws Exception {     *         http.authorizeRequests().antMatchers(&amp;quot;/**&amp;quot;).hasRole(&amp;quot;USER&amp;quot;).and().formLogin()     *                 .usernameParameter(&amp;quot;username&amp;quot;) // default is username     *                 .passwordParameter(&amp;quot;password&amp;quot;) // default is password     *                 .loginPage(&amp;quot;/authentication/login&amp;quot;) // default is /login with an HTTP get     *                 .failureUrl(&amp;quot;/authentication/login?failed&amp;quot;) // default is /login?error     *                 .loginProcessingUrl(&amp;quot;/authentication/login/process&amp;quot;); // default is /login     *                                                                         // with an HTTP     *                                                                         // post     *     }*/</span></code></pre><p>默认接收的参数是username、password。若表单中提交的name不是默认的username、password，则需要配置其参数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制登录页</span>http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、在登录页面增加<strong>记住我</strong>多选框。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>记住我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>4、后端验证处理。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开启记住我 cookie默认保存两周 自定义接收前端的参数</span>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、启动项目，访问测试。</p><h1 id="十七、Shiro"><a href="#十七、Shiro" class="headerlink" title="十七、Shiro"></a>十七、Shiro</h1><p>Apache Shiro是Java的一个安全（权限）框架。</p><ul><li>Shiro可以容易地开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境中。</li><li>Shiro可以完成认证、授权、加密、会话管理、web集成、缓存等。</li></ul><p>官网地址：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></p><p>GitHub：<a href="https://github.com/apache/shiro.git" target="_blank" rel="noopener">https://github.com/apache/shiro.git</a></p><h2 id="17-1、Shiro功能"><a href="#17-1、Shiro功能" class="headerlink" title="17-1、Shiro功能"></a>17-1、Shiro功能</h2><p><img src="/archives/afea1789/20190201004540.png" alt=""></p><ul><li>Authentication：身份认证、登录，验证用户是否拥有相应的身份。</li><li>Authorization: 授权，即权限校验，验证某个已认证的用户是否拥有某个权限。确定“谁”可以访问“什么”。</li><li>Session Management：会话管理，管理用户登录后的会话。即用户登录后就是一次会话，在没有退出之前，它的所有信息都会在会话中。会话可以是普通的JavaSE环境，也可以是Web环境。</li><li>Cryptography：加密，保护数据的安全性。如密码加密存储到数据库中，而不是明文存储。</li><li>Web Support：Web支持，能够比较轻易地整合到Web环境中。</li><li>Caching：缓存，对用户的数据进行缓存。（用户信息、角色、权限等缓存到如redis等缓存中）</li><li>Concurrency：并发，Shiro支持具有并发功能的多线程应用程序，也就是说支持在多线程应用中并发验证。例如在一个线程中开启另一个线程，能把权限自动的传过去。</li><li>Testing：测试，提供了测试的支持。</li><li>Run as ：允许用户以其他用户的身份来登录。（允许一个用户假装为另一个用户（如果允许）的身份进行访问）</li><li>Remember me ：记住我。</li></ul><h2 id="17-2、Shiro架构"><a href="#17-2、Shiro架构" class="headerlink" title="17-2、Shiro架构"></a>17-2、Shiro架构</h2><p><strong>从外部来看Shiro，即从应用程序角度来观察如何使用shiro完成工作：</strong></p><p><img src="/archives/afea1789/12617-20161206222914147-1809869115.jpg" alt="Shiro三大核心组件"></p><p>上图可看出：应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject。</p><p><code>Subject：</code>主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p><p><code>SecurityManager：</code>安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p><p><code>Realm：</code>域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p><p><strong>从Shiro内部来看：</strong></p><p><img src="/archives/afea1789/12617-20161206222914835-1184096667.jpg" alt=""></p><ul><li><p>Subject：主体，可以看到主体可以是任何可以与应用交互的 “用户”。</p></li><li><p>SecurityManager：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</p></li><li><p>Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了。</p></li><li><p>Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能。</p></li><li><p>Realm：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以一般在应用中都需要实现自己的 Realm。</p></li><li><p>SessionManager：SessionManager知道如何创建会话、管理用户回话的声明周期以便在所有运行环境下都可以给用户提供一个健壮的回话管理体验。Shiro在任何运行环境下都可以在本地管理用户会话（即便没有Web或者EJB容器也可以）——这在安全管理的框架中算是独门绝技了。当然，如果当前环境中有会话管理机制（比如Servlet容器），则Shiro默认会使用该环境的会话管理机制。而如果像控制台程序这种独立的应用程序，本身没有会话管理机制，此时Shiro就会使用内部的会话管理器来给应用的开发提供一直的编程体验。SessionDAO允许用户使用任何类型的数据源来存储Session数据。</p></li><li><p>SessionDAO：用于代替SessionManager执行Session相关的增删改查。这个接口允许我们将任意种类的数据存储方式引入到Session管理的基础框架中。DAO（数据访问对象），用于会话的 CRUD，比如想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能。</p></li><li><p>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能。</p></li><li><p>Cryptography：密码模块，Shiro 提高了一些常见的加密组件用于如密码加密 / 解密等。</p></li></ul><h2 id="17-3、Hello-Shiro"><a href="#17-3、Hello-Shiro" class="headerlink" title="17-3、Hello Shiro"></a>17-3、Hello Shiro</h2><p>官网文档：<a href="http://shiro.apache.org/tutorial.html" target="_blank" rel="noopener">http://shiro.apache.org/tutorial.html</a></p><p>quickstart：<a href="https://github.com/apache/shiro/tree/master/samples/quickstart" target="_blank" rel="noopener">https://github.com/apache/shiro/tree/master/samples/quickstart</a></p><p>1、创建一个普通maven项目，删除src目录。</p><p>2、在父项目上新建一个普通Module子项目。</p><p>3、根据官方文档，导入shiro依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- shiro-core --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configure logging --></span>    <span class="token comment" spellcheck="true">&lt;!-- jcl-over-slf4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- slf4j-log4j12 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- log4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>4、编写配置文件log4j.properties。（resources/log4j.properties）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m %n</span><span class="token comment" spellcheck="true"># General Apache libraries</span><span class="token attr-name">log4j.logger.org.apache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Spring</span><span class="token attr-name">log4j.logger.org.springframework</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Default Shiro logging</span><span class="token attr-name">log4j.logger.org.apache.shiro</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token comment" spellcheck="true"># Disable verbose logging</span><span class="token attr-name">log4j.logger.org.apache.shiro.util.ThreadContext</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token attr-name">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span></code></pre><p>5、编写初始化文件shiro.ini。（resources/shiro.ini）</p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[users]</span># user 'root' with password 'secret' and the 'admin' role<span class="token constant">root</span> <span class="token attr-value"><span class="token punctuation">=</span> secret, admin</span># user 'guest' with the password 'guest' and the 'guest' role<span class="token constant">guest</span> <span class="token attr-value"><span class="token punctuation">=</span> guest, guest</span># user 'presidentskroob' with password '12345' ("That's the same combination on# my luggage!!!" ;)), and role 'president'<span class="token constant">presidentskroob</span> <span class="token attr-value"><span class="token punctuation">=</span> 12345, president</span># user 'darkhelmet' with password 'ludicrousspeed' and roles 'darklord' and 'schwartz'<span class="token constant">darkhelmet</span> <span class="token attr-value"><span class="token punctuation">=</span> ludicrousspeed, darklord, schwartz</span># user 'lonestarr' with password 'vespa' and roles 'goodguy' and 'schwartz'<span class="token constant">lonestarr</span> <span class="token attr-value"><span class="token punctuation">=</span> vespa, goodguy, schwartz</span># -----------------------------------------------------------------------------# Roles with assigned permissions## Each line conforms to the format defined in the# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc# -----------------------------------------------------------------------------<span class="token selector">[roles]</span># 'admin' role has all permissions, indicated by the wildcard '*'<span class="token constant">admin</span> <span class="token attr-value"><span class="token punctuation">=</span> *</span># The 'schwartz' role can do anything (*) with any lightsaber:<span class="token constant">schwartz</span> <span class="token attr-value"><span class="token punctuation">=</span> lightsaber:*</span># The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with# license plate 'eagle5' (instance specific id)<span class="token constant">goodguy</span> <span class="token attr-value"><span class="token punctuation">=</span> winnebago:drive:eagle5</span></code></pre><p>6、编写Quickstart类。（从GitHub上或官网文档复制过来时应注意导包问题）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quickstart</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Quickstart<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前的用户对象 subject</span>        Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过当前用户拿到Session</span>        Session session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">,</span> <span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//log.info("Retrieved the correct value! [" + value + "]");</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Subject=>session["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断当前用户是否被认证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Token：令牌</span>            UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"lonestarr"</span><span class="token punctuation">,</span> <span class="token string">"vespa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置记住我</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行登录操作</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> uae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"There is no user with username of "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> ice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Password for account "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" was incorrect!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LockedAccountException</span> lae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The account for username "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is locked.  "</span> <span class="token operator">+</span>                        <span class="token string">"Please contact your administrator to unlock it."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// ... catch more exceptions here (maybe custom ones specific to your application?</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//unexpected condition?  error?</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//say who they are:</span>        <span class="token comment" spellcheck="true">//print their identifying principal (in this case, a username):</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"User ["</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] logged in successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//test a role:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"May the Schwartz be with you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello, mere mortal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//test a typed permission (not instance-level)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You may use a lightsaber ring.  Use it wisely."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, lightsaber rings are for schwartz masters only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//a (very powerful) Instance Level permission:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"winnebago:drive:eagle5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span> <span class="token operator">+</span>                    <span class="token string">"Here are the keys - have fun!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//注销</span>        currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结束</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>官网文档中并未使用log4j，而GitHub上导入依赖时并未指定相关依赖对应的版本，同时应注明其作用域。</p><p>5、运行Quickstart类，运行结果如下：</p><pre><code>INFO [Quickstart] - Subject=&gt;session[aValue] INFO [Quickstart] - User [lonestarr] logged in successfully. INFO [Quickstart] - May the Schwartz be with you! INFO [Quickstart] - You may use a lightsaber ring.  Use it wisely. </code></pre><h2 id="17-4、shiro-springboot"><a href="#17-4、shiro-springboot" class="headerlink" title="17-4、shiro-springboot"></a>17-4、shiro-springboot</h2><p>1、新建一个Module（Spring Initializr），勾选上Spring Web模块。</p><p>2、导入thymeleaf依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、编写首页页面 templates/index.html。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>4、编写Controller。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toIndex</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello Shiro!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、启动项目，访问测试。</p><p>6、测试成功后，导入shiro整合spring的包。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- shiro-spring --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>7、编写配置类。</p><p>需要先自定Realm对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义的UserRealm</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 授权"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写配置类ShiroConfig。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//3、ShiroFilterFactoryBean</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置安全管理器</span>        bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、DefaultWebSecurityManager</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">getDefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userRealm"</span><span class="token punctuation">)</span> UserRealm userRealm<span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联UserRealm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>userRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1、创建 realm 对象 ，需自定义</span>    <span class="token comment" spellcheck="true">//@Bean(name="userRea")</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserRealm <span class="token function">userRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Shiro实现登录拦截"><a href="#Shiro实现登录拦截" class="headerlink" title="Shiro实现登录拦截"></a>Shiro实现登录拦截</h3><p>8、编写几个页面。</p><p>templates/login.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>templates/user/add.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>templates/update.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>controll中完成跳转</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"user/add"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"user/update"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首页中增加跳转链接</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/update}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>9、配置类中进行相关配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>    ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置安全管理器</span>    bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加shiro的内置过滤器</span>    <span class="token comment" spellcheck="true">/**         * anon：无需认证就可以访问         * authc：必须认证才能访问         * user：必须拥有 记住我 功能才能使用         * perms：拥有对某个资源的权限才能访问         * role：拥有某个角色权限才能访问         */</span>    <span class="token comment" spellcheck="true">//拦截</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*filterMap.put("/user/add","authc");        filterMap.put("/user/update","authc");*/</span>    filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置登录的请求</span>    bean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Shiro实现用户认证"><a href="#Shiro实现用户认证" class="headerlink" title="Shiro实现用户认证"></a>Shiro实现用户认证</h3><p>10、获取用户登录的信息。</p><p>controller中获取登录信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前的用户</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装用户的登录数据</span>    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行登录方法，如果没有异常就说明登录成功</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用户名不存在</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//密码不存在</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>登录页面，表单提交过来</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>启动项目，访问测试登录，执行了认证。</p><p>11、认证。</p><p>UserRealm.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户名、密码   数据库中取</span>    String username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    UsernamePasswordToken token <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抛出异常 UnknownAccountException</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//密码认证 shiro做</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Shiro整合Mybatis"><a href="#Shiro整合Mybatis" class="headerlink" title="Shiro整合Mybatis"></a>Shiro整合Mybatis</h3><p>12、导入连接数据库相关的依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mysql-connector-java --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mybatis-spring-boot-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>13、编写配置文件。</p><p>resources/application.yml</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><p>14、编写实体类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>15、编写mapper。</p><p>UserMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>resources/mapper/UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user where name = #{name};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>配置application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.lskj.pojo</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span></code></pre><p>16、编写service层。</p><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>17、测试。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ShiroSpringbootApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>18、修改Realm中的认证。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义的UserRealm</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 授权"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UsernamePasswordToken token <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接数据库，获取正尝试登录用户的信息</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//查无此人</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抛出异常 UnknownAccountException</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//密码认证 shiro做</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Shiro实现请求授权"><a href="#Shiro实现请求授权" class="headerlink" title="Shiro实现请求授权"></a>Shiro实现请求授权</h3><p>19、数据库用户表增加权限字段perms，同时给对应用户添加相应权限。【user:add、user:update】</p><p>admin-&gt;user:add    lskj-&gt;user:update</p><p>同时，实体类中加入对应属性。</p><p>20、授权。</p><p>ShiroConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>    ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置安全管理器</span>    bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加shiro的内置过滤器</span>    <span class="token comment" spellcheck="true">//拦截</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//授权</span>    filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span><span class="token string">"perms[user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span><span class="token string">"perms[user:update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//未授权，未授权跳转到未授权页面</span>    bean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/unauth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置登录的请求</span>    bean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MyController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/unauth"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">unauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"未经授权，无法访问此页面！"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserRealm.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义的UserRealm</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 授权"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SimpleAuthorizationInfo</span>        SimpleAuthorizationInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿到当前登录的对象</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User currentUser <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> subject<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//拿到User对象</span>        <span class="token comment" spellcheck="true">//设置当前用户的权限</span>        info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getPerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...</span>        <span class="token comment" spellcheck="true">//密码认证 shiro做</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Shiro整合thymeleaf"><a href="#Shiro整合thymeleaf" class="headerlink" title="Shiro整合thymeleaf"></a>Shiro整合thymeleaf</h3><p>21、导入shiro-thymeleaf整合包。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- thymeleaf-extras-shiro --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>22、整合ShiroDialect：用来整合shiro thymeleaf。</p><p>ShiroConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//整合ShiroDialect</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>23、获取已登录当前用户的信息</p><p>UserRealm.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//认证</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UsernamePasswordToken token <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接数据库，获取正尝试登录用户的信息</span>    User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserByName</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//查无此人</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抛出异常 UnknownAccountException</span>    <span class="token punctuation">}</span>    Subject currentSubject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Session session <span class="token operator">=</span> currentSubject<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//密码认证 shiro做</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>24、修改首页templates/user/index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.loginUser <span class="token punctuation">=</span><span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/add}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/update}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> </code></pre><h1 id="十八、Swagger"><a href="#十八、Swagger" class="headerlink" title="十八、Swagger"></a>十八、Swagger</h1><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><ul><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li></ul><h2 id="18-1、SpringBoot集成Swagger"><a href="#18-1、SpringBoot集成Swagger" class="headerlink" title="18-1、SpringBoot集成Swagger"></a>18-1、SpringBoot集成Swagger</h2><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li>springfox-swagger2</li><li>springfox-swagger-ui</li></ul><p>1、新建一个SpringBoot-web项目。</p><p>2、导入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>导入不同的ui包，可以实现不同的皮肤。</strong></p><p>上述的ui包，访问 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p><p>bootstrap-ui，访问 <a href="http://localhost:8080/doc.html" target="_blank" rel="noopener">http://localhost:8080/doc.html</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Layui-ui，访问 <a href="http://localhost:8080/docs.html" target="_blank" rel="noopener">http://localhost:8080/docs.html</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-ui-layer包 /docs.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.caspar-chen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-ui-layer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>mg-ui，访问 <a href="http://localhost:8080/document.html" target="_blank" rel="noopener">http://localhost:8080/document.html</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger-ui-layer包 /document.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zyplayer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-mg-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、编写controller，启动项目测试运行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello Swagger!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、编写配置SwaggerConfig配置类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>  <span class="token comment" spellcheck="true">//开启Swagger-2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>5、启动项目，访问<a href="http://localhost:8080/swagger-ui.html。" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html。</a></p><p>（swagger-ui3.0不能访问swagger-ui界面，因为在swagger-ui3.0.0的jar包目录下找不到swagger-ui.html这个页面）</p><h2 id="18-2、配置Swagger"><a href="#18-2、配置Swagger" class="headerlink" title="18-2、配置Swagger"></a>18-2、配置Swagger</h2><p>Swagger的bean实例是Docket。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>  <span class="token comment" spellcheck="true">//开启Swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Swagger信息 apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact DEFAULT_CONTACT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"API文档"</span><span class="token punctuation">,</span>                <span class="token string">"Api Documentation"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>                DEFAULT_CONTACT<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html。" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html。</a></p><h2 id="18-3、配置扫描接口"><a href="#18-3、配置扫描接口" class="headerlink" title="18-3、配置扫描接口"></a>18-3、配置扫描接口</h2><p>SwaggerConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//RequestHandlerSelectors 配置要扫描接口的方式</span>        <span class="token comment" spellcheck="true">/*                    basePackage() 指定要扫描的包                    any() 扫描全部                    none() 不扫描                    withClassAnnotation() 扫描类上的注解，参数是一个注解的反射对象                    withMethodAnnotation() 扫描方法上的注解                 */</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lskj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//paths() 过滤什么路径</span>        <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/lskj/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="18-4、配置Swagger开关"><a href="#18-4、配置Swagger开关" class="headerlink" title="18-4、配置Swagger开关"></a>18-4、配置Swagger开关</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lskj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示。</p><p>（Swagger在生产环境中使用，在发布时不使用。）</p><ul><li>判断是否是生产环境</li><li>enable注入</li></ul><p>application.properties，激活dev环境</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><p>设置dev环境的端口号，application-dev.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span></code></pre><p>设置prod环境的端口号，application-prod.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span></code></pre><p>判断是否是生产环境，同时注入enable，SwaggerConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置要显示Swagger的环境</span>    Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过environment.acceptsProfiles判断是否处在设定的环境中</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.lskj.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="18-5、配置API文档的分组"><a href="#18-5、配置API文档的分组" class="headerlink" title="18-5、配置API文档的分组"></a>18-5、配置API文档的分组</h2><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置分组</span>       <span class="token comment" spellcheck="true">//....</span><span class="token punctuation">}</span></code></pre><p>配置多个分组只需要配置多个docket即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="18-6、实体类配置"><a href="#18-6、实体类配置" class="headerlink" title="18-6、实体类配置"></a>18-6、实体类配置</h2><p>1、新建一个实体类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModel<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户实体类"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello Swagger!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只要接口中，返回值存在实体类，就会被扫描到Swagger中</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><p>3、启动测试，访问<a href="http://localhost:8081/swagger-ui.html。" target="_blank" rel="noopener">http://localhost:8081/swagger-ui.html。</a></p><p><img src="/archives/afea1789/image-20201030224943483.png" alt=""></p><h2 id="18-7、常用注解"><a href="#18-7、常用注解" class="headerlink" title="18-7、常用注解"></a>18-7、常用注解</h2><table><thead><tr><th align="center">Swagger注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Api(tags = “xxx模块说明”)</td><td align="center">作用在模块类上</td></tr><tr><td align="center">@ApiOperation(“xxx接口说明”)</td><td align="center">作用在接口方法上</td></tr><tr><td align="center">@ApiModel(“xxxPOJO说明”)</td><td align="center">作用在模型类上：如VO、BO</td></tr><tr><td align="center">@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td align="center">作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td align="center">@ApiParam(“xxx参数说明”)</td><td align="center">作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>Swagger的所有注解定义在io.swagger.annotations包下。</p><p>例如给请求的接口配置一些注释。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Operation接口，不是放在类上，而是放在方法上</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token string">"test"</span> <span class="token operator">+</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"Post测试类"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/post"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">test_02</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/archives/afea1789/image-20201030232152345.png" alt=""></p><p>给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读、理解。</p><p>使用swagger不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>项目正式发布时，关闭Swagger。（出于安全问题考虑，同时 也可以节省运行时内存）</p><h1 id="十九、异步任务"><a href="#十九、异步任务" class="headerlink" title="十九、异步任务"></a>十九、异步任务</h1><p>1、新将一个spring web项目。</p><p>2、创建service包，编写AsyncService.java。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据正在处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、创建controller包，编写AsyncController.java。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AsyncService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AsyncService asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止3秒</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、访问<a href="http://localhost:8080/hello进行测试，3秒后出现OK，这是同步等待的情况。" target="_blank" rel="noopener">http://localhost:8080/hello进行测试，3秒后出现OK，这是同步等待的情况。</a></p><p>如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要手动去编写多线程的实现的话，过于繁琐。</p><p>现只需要用一个简单的办法，在方法上加一个简单的注解即可。</p><p>5、给hello方法添加@Async注解。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span> <span class="token comment" spellcheck="true">//告诉Spring这是一个异步的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据正在处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>添加@Async注解后，SpringBoot就会自己开一个线程池，进行调用。</p><p>但是要让这个注解生效，还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>  <span class="token comment" spellcheck="true">//开启异步注解功能</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTaskApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringTaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重启项目测试，网页瞬间响应，后台代码依旧执行。</p><h1 id="二十、邮件任务"><a href="#二十、邮件任务" class="headerlink" title="二十、邮件任务"></a>二十、邮件任务</h1><p>Springboot支持邮件发送：</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>1、导入依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、查看自动配置类：MailSenderAutoConfiguration。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>    proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MimeMessage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MimeType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MailSender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MailSenderAutoConfiguration<span class="token punctuation">.</span>MailSenderCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MailProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>MailSenderJndiConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSenderPropertiesConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSenderAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p><strong>点击导入的类进行查看：</strong></p><p>MailSenderJndiConfiguration.class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MailSenderJndiConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MailProperties properties<span class="token punctuation">;</span>    <span class="token function">MailSenderJndiConfiguration</span><span class="token punctuation">(</span>MailProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    JavaMailSenderImpl <span class="token function">mailSender</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaMailSenderImpl sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaMailSenderImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDefaultEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    Session <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String jndiName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getJndiName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Session<span class="token punctuation">)</span>JndiLocatorDelegate<span class="token punctuation">.</span><span class="token function">createDefaultResourceRefLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndiName<span class="token punctuation">,</span> Session<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Unable to find Session in JNDI location %s"</span><span class="token punctuation">,</span> jndiName<span class="token punctuation">)</span><span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>查看配置文件：</strong></p><p>MailProperties.class</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>    prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET<span class="token punctuation">;</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String protocol <span class="token operator">=</span> <span class="token string">"smtp"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset defaultEncoding<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> properties<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jndiName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>3、配置文件。</p><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务。</p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">qq邮箱</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">qq授权码</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true"># 开启加密验证：qq需要配置ssl </span><span class="token attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>4、测试。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringTaskApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JavaMailSenderImpl mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//简单的邮件</span>        SimpleMailMessage mailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"Hello，你好呀！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"test!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2292807998@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2292807998@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//复杂的邮件</span>        MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组装</span>        MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;p style='color:red'>This is a test mail.&lt;/p>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//附件</span>        <span class="token comment" spellcheck="true">//helper.addAttachment("test.jpg",new File("文件路径"));</span>        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2292807998@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2292807998@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查看邮箱，邮件接收成功！</p><p>使用Thymeleaf进行前后端结合即可实现网站邮件收发功能。</p><h1 id="二十一、定时任务"><a href="#二十一、定时任务" class="headerlink" title="二十一、定时任务"></a>二十一、定时任务</h1><p>Spring提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口（任务执行）</li><li>TaskScheduler接口（任务调度）</li></ul><p>两个注解：</p><ul><li><code>@EnableScheduling</code>（开启定时功能的注解）</li><li><code>@Scheduled</code>（何时执行）</li></ul><p>Cron表达式的格式：秒 分 时 日 月 周</p><table><thead><tr><th align="center">字段</th><th align="center">允许值</th><th align="center">允许的特殊字符</th></tr></thead><tbody><tr><td align="center">秒（Seconds）</td><td align="center">0~59的整数</td><td align="center">, - * /</td></tr><tr><td align="center">分（Minutes）</td><td align="center">0~59的整数</td><td align="center">, - * /</td></tr><tr><td align="center">小时（Hours）</td><td align="center">0~23的整数</td><td align="center">, - * /</td></tr><tr><td align="center">日期（DayofMonth）</td><td align="center">1~31的整数（但是需要考虑月的天数）</td><td align="center">,- * ? / L W C</td></tr><tr><td align="center">月份（Month）</td><td align="center">1~12的整数或者 JAN-DEC</td><td align="center">, - * /</td></tr><tr><td align="center">星期（DayofWeek）</td><td align="center">0~7的整数或者 SUN-SAT （0、7=SUN）</td><td align="center">, - * ? / L C #</td></tr></tbody></table><ul><li><p><code>*</code>：表示匹配该域的任意值</p></li><li><p><code>?</code>：表示不确定的值。只能用在DayofMonth和DayofWeek两个域</p></li><li><p><code>,</code>：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次</p></li><li><p><code>-</code>：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p></li><li><p><code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次。在Minutes域使用0/15表示从第0分开始，没隔15分钟触发一次</p></li><li><p><code>L</code>：表示最后，只能出现在DayofWeek和DayofMonth域。用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</p></li><li><p><code>W</code>：表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p></li><li><p><code>LW</code>：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</p></li><li><p><code>C</code>：代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天</p></li><li><p><code>#</code>：用于确定每个月第几个星期几，只能出现在DayofMonth域。<code>6#3</code>表示某月第3个周五</p><p>1、编写ScheduledService</p></li></ul><p>ScheduledService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scheduled<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//特定的时间执行这个方法</span>    <span class="token comment" spellcheck="true">//cron表达式 秒 分 时 日 月 周几</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 * * * * 0-7"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、在主程序上增加<code>@EnableScheduling</code>开启定时任务功能。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>  <span class="token comment" spellcheck="true">//开启异步注解功能</span><span class="token annotation punctuation">@EnableScheduling</span>  <span class="token comment" spellcheck="true">//开启定时功能的注解</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTaskApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringTaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二十二、分布式理论"><a href="#二十二、分布式理论" class="headerlink" title="二十二、分布式理论"></a>二十二、分布式理论</h1><h2 id="22-1、分布式系统"><a href="#22-1、分布式系统" class="headerlink" title="22-1、分布式系统"></a>22-1、分布式系统</h2><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><h2 id="22-2、Dubbo文档"><a href="#22-2、Dubbo文档" class="headerlink" title="22-2、Dubbo文档"></a>22-2、Dubbo文档</h2><p>Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC 分布式服务框架，现已成为 Apache 基金会孵化项目。</p><p>官网文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p><strong>发展演变</strong></p><p><img src="/archives/afea1789/98ed961ec4c98e4eda53881f942f3b7c.png" alt=""></p><h2 id="22-3、单一应用架构"><a href="#22-3、单一应用架构" class="headerlink" title="22-3、单一应用架构"></a>22-3、单一应用架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h2 id="22-4、垂直应用架构"><a href="#22-4、垂直应用架构" class="headerlink" title="22-4、垂直应用架构"></a>22-4、垂直应用架构</h2><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费.</p><h2 id="22-5、分布式服务架构"><a href="#22-5、分布式服务架构" class="headerlink" title="22-5、分布式服务架构"></a>22-5、分布式服务架构</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h2 id="22-6、流动计算架构"><a href="#22-6、流动计算架构" class="headerlink" title="22-6、流动计算架构"></a>22-6、流动计算架构</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h1 id="二十三、RPC"><a href="#二十三、RPC" class="headerlink" title="二十三、RPC"></a>二十三、RPC</h1><p>RPC（Remote Procedure Call）是指远程过程调用，是一种进程间通信方式，它是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p><strong>RPC调用过程：</strong></p><p><img src="/archives/afea1789/7632302-ca0ba3118f4ef4fb.png" alt=""></p><p><img src="/archives/afea1789/739231-20190113163552755-1990586909.png" alt=""></p><p>RPC两个核心模块：通讯，序列化。</p><p><img src="/archives/afea1789/image-20201031201951726.png" alt=""></p><h1 id="二十四、Dubbo"><a href="#二十四、Dubbo" class="headerlink" title="二十四、Dubbo"></a>二十四、Dubbo</h1><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>官网：<a href="http://dubbo.apache.org" target="_blank" rel="noopener">http://dubbo.apache.org</a></p><p>中文官网：<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></p><p><img src="/archives/afea1789/architecture.png" alt=""></p><ul><li><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p></li><li><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p></li><li><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p></li><li><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p></li></ul><table><thead><tr><th align="center">节点</th><th align="center">角色说明</th></tr></thead><tbody><tr><td align="center">Provider</td><td align="center">暴露服务的服务提供方</td></tr><tr><td align="center">Consumer</td><td align="center">调用远程服务的服务消费方</td></tr><tr><td align="center">Registry</td><td align="center">服务注册与发现的注册中心</td></tr><tr><td align="center">Monitor</td><td align="center">统计服务的调用次数和调用时间的监控中心</td></tr><tr><td align="center">Container</td><td align="center">服务运行容器</td></tr></tbody></table><p>过程：</p><ul><li>启动容器，加载，<strong>运行服务提供者</strong>。</li><li>服务提供者在启动时，在注册中心<strong>发布注册</strong>自己提供的<strong>服务</strong>。</li><li>服务消费者在启动时，在注册中心<strong>订阅</strong>自己所需的<strong>服务</strong>。</li></ul><p>如果考虑<strong>失败或变更</strong>的情况，就需要考虑下面的过程。</p><ul><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><p><img src="/archives/afea1789/dubbo.jpg" alt=""></p><h2 id="24-1、环境搭建"><a href="#24-1、环境搭建" class="headerlink" title="24-1、环境搭建"></a>24-1、环境搭建</h2><p>官方推荐使用Zookeeper注册中心。</p><p><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a> 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境。</p><h3 id="window下安装zookeeper"><a href="#window下安装zookeeper" class="headerlink" title="window下安装zookeeper"></a>window下安装zookeeper</h3><p><strong>1、下载zookeeper，并解压。（下载bin那个）</strong></p><p>下载地址：<a href="https://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">https://mirror.bit.edu.cn/apache/zookeeper/</a></p><p><strong>2、解压后，运次<code>/bin/zkServer.cmd</code>。</strong></p><p>初次运次会报错：没有<code>zoo.cfg</code>配置文件。</p><p>如果遇到闪退，在zkServer.cmd文件末尾添加<code>pause</code>。</p><p>重新运行出错不会退出，会提示错误信息，方便找到错误原因。</p><p><strong>3、修改zoo.cfg配置文件。</strong></p><p>将conf文件夹下的zoo_sample.cfg复制一份改名为zoo.cfg。</p><pre><code>dataDir=./   临时数据存储的目录（可写相对路径）clientPort=2181   zookeeper的端口号</code></pre><p>修改完成后，再次启动zookeeper。</p><p><strong>4、运行zkCli.cmd测试。</strong></p><p><code>ls /</code>：列出zookeeper根下保存的所有节点。</p><pre><code>[zk: localhost:2181(CONNECTED) 0] ls /[zookeeper]</code></pre><p><code>create –e /lskj test</code>：创建一个lskj节点，值为test</p><pre><code>[zk: localhost:2181(CONNECTED) 1]  create -e /lskj testCreated /lskj</code></pre><p><code>get /lskj</code>：获取/lskj节点的值</p><pre><code>[zk: localhost:2181(CONNECTED) 2] get /lskjtest[zk: localhost:2181(CONNECTED) 3] ls /[lskj, zookeeper]</code></pre><h3 id="window下安装dubbo-admin"><a href="#window下安装dubbo-admin" class="headerlink" title="window下安装dubbo-admin"></a>window下安装dubbo-admin</h3><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮助java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p><p><strong>1、下载dubbo-admin，并解压。</strong></p><p>地址：<a href="https://github.com/apache/dubbo-admin/tree/master" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin/tree/master</a></p><p><strong>2、修改<code>dubbo-admin/src/main/resources/application.properties</code>指定zookeeper。</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">7001</span><span class="token attr-name">spring.velocity.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.velocity.charset</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">spring.velocity.layout-url</span><span class="token punctuation">=</span><span class="token attr-value">/templates/default.vm</span><span class="token attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n/message</span><span class="token attr-name">spring.root.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.guest.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token comment" spellcheck="true">#注册中心的地址</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.0.0.1:2181</span></code></pre><p><strong>3、在项目目录下打包dubbo-admin。</strong></p><p>项目目录即dubbo-admin-master目录。（打包时间可能会有点长）</p><pre><code>mvn clean package -Dmaven.test.skip=true</code></pre><p><strong>4、打包成功后，执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar。</strong></p><p>【注意：zookeeper的服务一定要打开！】</p><p>执行成功后，访问 <a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a> ，需要输入登录账户和密码，默认都是root。</p><p>dubbo-admin是一个监控管理后台，可查看注册了哪些服务，哪些服务被消费了。（可不要）</p><h2 id="24-2、SpringBoot-Zookeeper-Dubbo"><a href="#24-2、SpringBoot-Zookeeper-Dubbo" class="headerlink" title="24-2、SpringBoot+Zookeeper+Dubbo"></a>24-2、SpringBoot+Zookeeper+Dubbo</h2><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><p><strong>1、新建一个空项目。</strong></p><p><strong>2、创建一个Spring Web模块provider-server。</strong></p><p><strong>3、编写一个卖票服务。</strong></p><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编写实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、创建一个Spring Web模块consumer-server。</strong></p><p>创建时，最后一步注意路径位置。</p><p><strong>5、编写一个用户服务。</strong></p><p>编写service</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//想拿到provider-server提供的票</span><span class="token punctuation">}</span></code></pre><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p><strong>1、将服务提供者注册到注册中心，需整合Dubbo和zookeeper，所以需要导包。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入Dubbo + zookeeper 依赖--></span><span class="token comment" spellcheck="true">&lt;!-- Dubbo Spring Boot Starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--zkclient--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--排除这个slf4j-log4j12--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>2、在springboot配置文件中配置Dubbo相关属性。</strong></p><p><code>application.properties</code></p><pre class=" language-xml"><code class="language-xml">#设置内嵌Tomcat端口号server.port=8001#设置上下文根server.servlet.context-path=/#服务应用名字dubbo.application.name=provider-server#注册中心地址dubbo.registry.address=zookeeper://localhost:2181#哪些服务要被注册，扫描指定包下的服务dubbo.scan.base-packages=com.lskj.service</code></pre><p><strong>3、在service的实现类中配置服务注解，发布服务。</strong></p><p>TicketServiceImpl.java，注意导包。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//zookeeper服务注册与发现</span><span class="token annotation punctuation">@Service</span> <span class="token comment" spellcheck="true">//将服务发布出去</span><span class="token annotation punctuation">@Component</span>   <span class="token comment" spellcheck="true">//放到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中。</p><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><strong>1、导入依赖，与服务提供者那里导的包一样。</strong></p><p><strong>2、配置参数。</strong></p><p><code>application.properties</code></p><pre class=" language-xml"><code class="language-xml">server.port=8002# 消费者去哪里拿服务，需要暴露自己的名字dubbo.application.name=consumer-server# 注册中心的地址dubbo.registry.address=zookeeper://localhost:2181</code></pre><p><strong>3、将服务提供者的接口打包，然后用pom文件导入。</strong></p><p>这里直接将服务的接口拿过来（将服务提供者的接口复制到service包下）。消费者的路径必须和服务提供者的相同。</p><p><strong>4、完善消费者的服务类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span>  <span class="token comment" spellcheck="true">//放到容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//想拿到provider-server提供的票，要去注册中心拿到服务</span>    <span class="token annotation punctuation">@Reference</span> <span class="token comment" spellcheck="true">//引用， pom坐标 可定义路径和相同的接口</span>    TicketService ticketService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String ticket <span class="token operator">=</span> ticketService<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在注册中心拿到=>"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、编写测试类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ConsumerServerApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><strong>1、开启zookeeper。</strong></p><p><strong>2、打开dubbo-admin实现监控（可不需要）。</strong></p><p><strong>3、开启服务者。</strong></p><p><strong>4、消费者消费测试。</strong></p><pre><code>在注册中心拿到=&gt;test</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/av75233634&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://lskjwp.gitee.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://lskjwp.gitee.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/71513ccb/"/>
    <id>https://lskjwp.gitee.io/archives/71513ccb/</id>
    <published>2020-09-07T03:53:41.000Z</published>
    <updated>2021-11-14T07:16:13.624Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV18E411a7mC" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><p>Vue.js是一个前端框架，三大主流前端框架之一。</p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue</a>是一套用于构建用户界面的渐进式框架，发布于2014年2月。与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库（如<code>vue-router</code>：跳转，<code>vue-resource</code>：通信，<code>vuex</code>：管理）或既有项目整合。</p><p>Vue中文官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><h1 id="二、前端知识"><a href="#二、前端知识" class="headerlink" title="二、前端知识"></a>二、前端知识</h1><p><strong>前端三要素：</strong></p><ul><li>HTML（结构）：超文本标记语言，决定网页的结构和内容</li><li>CSS（表现）：层叠样式表，设定网页的表现样式</li><li>JavaScript（行为）：是一种弱类型脚本语言，其源代码不需要经过编译，而是由浏览器解释运行，用于控制网页的行为</li></ul><p><strong>结构层（HTML）</strong></p><h2 id="2-1、表现层（CSS）"><a href="#2-1、表现层（CSS）" class="headerlink" title="2-1、表现层（CSS）"></a>2-1、表现层（CSS）</h2><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量、不可以引用等，换句话说就是不具备任何语法支持，主要缺陷如下：</p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li></ul><p>这导致了在工作中增加了很多工作量。为了解决这个问题，前端开发人员会使用一种称之为<code>CSS预处理器</code>的工具，提供CSS缺失的样式层复用机制，减少冗余代码，提高样式代码的可维护性。大大提高了前端在样式上的开发效率。</p><p><strong>CSS预处理器</strong>：</p><p>CSS预处理定义了一种新的语言，其基本思想是用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编程工作。简单来说就是<code>用一种专门的编程语言，进行web页面样式设计，再通过编译器转换成正常的CSS文件，以供项目使用</code>。</p><p>常用的CSS预处理器：</p><ul><li>SASS：基于Ruby，通过服务端处理，功能强大。解析效率高。需要学习Ruby语言，上手难度高于LESS。</li><li>LESS：基于NodeJS，通过客户端处理，使用简单。功能比SASS简单，解析效率也低于SASS，但在实际开发中足够了。</li></ul><h2 id="2-2、行为层（JavaScript）"><a href="#2-2、行为层（JavaScript）" class="headerlink" title="2-2、行为层（JavaScript）"></a>2-2、行为层（JavaScript）</h2><p><strong>Native原生JS开发</strong></p><p>原生JS开发，也就是按照ECMAScript标椎的开发方式，简称ES，特点是所有的浏览器都支持。</p><ul><li><p>…</p></li><li><p>ES5（全浏览器支持）</p></li><li><p>ES6（常用，当前主流版本webpack 打包成为ES5支持）</p></li><li><p>…</p></li></ul><p><strong>TypeScript微软的标椎</strong></p><p>​    TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯.海尔斯伯格主导。</p><p>​    该语言的特点就是除了具备ES的特性之外还纳入了许多不在标椎范围的新特性，所以导致很多浏览器不能支持TypeScript语法，需要编译后（编译为JS）才能被浏览器正确执行。</p><p><strong>JavaScript框架</strong></p><ul><li>jQuery：优点是简化了DOM操作，缺点是DOM操作太频繁，影响前端性能。</li><li>Angular：Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点版本迭代不合理。</li><li>React：Facebook出品，一款高性能的JS前端框架，特点是提出了新概念<code>虚拟DOM</code>用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需学习一门JSX语言。</li><li>Vue：一款渐进式JavaScript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。</li><li>Axios：前端通信框架，因为Vue的边界很明确，就是为了处理DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互，当然也可以直接选择使用jQuery提供的AJAX通信功能。</li></ul><p><strong>UI框架</strong></p><ul><li>Ant-Design：阿里巴巴出品，基于React的UI框架</li><li>ElementUI、iview、ice：饿了么出品，基于Vue的UI框架</li><li>Bootstrap：Twitter推出的一个用于前端开发的开源工具包</li><li>AmazeUI：又叫“妹子UI”，一款HTML5跨屏前端框架</li></ul><p><strong>JavaScript构建工具</strong></p><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li><li>WebPack：模块打包器，主要作用是打包、压缩、合并及按序加载</li></ul><h2 id="2-3、三端统一"><a href="#2-3、三端统一" class="headerlink" title="2-3、三端统一"></a>2-3、三端统一</h2><p><strong>混合开发（Hybrid App）</strong></p><p>主要目的是实现一套代码三端统一（PC、Android：.apk、iOS：.ipa）并能够调用到设备底层硬件（如传感器、GPS、摄像头等），打包方式主要有以下两种：</p><ul><li>云打包：HBuild-&gt;HBuildX，DCloud出品；API Cloud</li><li>本地打包：Cordova（前身是PhoneGap）</li></ul><p><strong>微信小程序</strong></p><p><a href="https://weixin.qq.com/" target="_blank" rel="noopener">微信官网</a>，方便微信小程序UI开发的框架：WeUI</p><h2 id="2-4、后端技术"><a href="#2-4、后端技术" class="headerlink" title="2-4、后端技术"></a>2-4、后端技术</h2><p>​    前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了NodeJS这样的技术。</p><p>​    NodeJS的作者已经声明放弃NodeJS，开始开发全新架构Deno</p><p>​    既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS框架及项目管理工具如下：</p><ul><li>Express：NodeJS框架</li><li>Koa：Express简化版</li><li>NPM：项目综合管理工具，类似于Maven</li><li>YARN：NPM的替代方案，类似于Maven和Gradle的关系</li></ul><h2 id="2-5、主流前端框架"><a href="#2-5、主流前端框架" class="headerlink" title="2-5、主流前端框架"></a>2-5、主流前端框架</h2><p><strong>Vue.js</strong></p><p><strong>iView</strong></p><p>iview是一个强大的基于Vue的UI库，有很多实用的基础组件比elementui的组件更丰富，主要服务于PC界面的中后台产品。使用单文件的Vue组件化开发模式，基于npm+webpack+babel开发，支持ES2015高质量、功能丰富，友好的API，自由灵活地使用空间。</p><ul><li><a href="https://iviewui.com/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/view-design/ViewUI" target="_blank" rel="noopener">Github</a></li><li><a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">iview-admin</a></li></ul><p>属于前端主流框架，主要特点是移动端支持较多。</p><p><strong>ElementUI</strong></p><p>Element是饿了么前端开源维护的Vue UI组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子丰富。主要用于开发PC端的页面，是一个质量比较高的Vue UI组件库。</p><ul><li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a></li></ul><p>属于前端主流框架，主要特点是桌面端支持较多。</p><p><strong>ICE</strong></p><p>飞冰是阿里巴巴团队基于React/Angular/Vue的中后台应用解决方案。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。主要组件还是以React为主。</p><p><strong>VantUI</strong></p><p>Vant UI是有赞前端团队基于有赞统一的规范实现的Vue组件库，提供了一整套UI组件和业务组件。通过Vant，可以快速搭建出风格统一的页面，提升开发效率。</p><p><strong>CubeUI</strong></p><p>cube-ui是滴滴团队开发的基于Vue.js实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p><h1 id="三、MVVM模式"><a href="#三、MVVM模式" class="headerlink" title="三、MVVM模式"></a>三、MVVM模式</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>MVVM（Model View ViewModel）是一种软件架构模式，由微软WPF和Silverlight的架构师Ken Cooper和Ted Peters开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。<br>MVVM源自于经典的MVC模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用，其作用如下：</p><ul><li>该层向上与视图层进行双向数据绑定</li><li>向下与Model层通过接口请求进行数据交互</li></ul><p><img src="/archives/71513ccb/16623339-9495d4875b82ea58.png" alt=""></p><p>流行的MVVM框架有vue.js、Angular JS……</p><h2 id="2、为什么使用MVVM"><a href="#2、为什么使用MVVM" class="headerlink" title="2、为什么使用MVVM"></a>2、为什么使用MVVM</h2><p>MVVM模式和MVC模式一样，只要目的是分离视图（View）和模型（Model），这样有以下优点：</p><ul><li>低耦合：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li><li>可复用：可以把一些视图逻辑放在一个ViewModel里面，让很多重用这段视图逻辑。</li><li>独立开发：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li><li>可测试：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</li></ul><h2 id="3、MVVM的组成部分"><a href="#3、MVVM的组成部分" class="headerlink" title="3、MVVM的组成部分"></a>3、MVVM的组成部分</h2><p><img src="/archives/71513ccb/16623339-4b07f21b1c3d50e9.png" alt=""></p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 <code>FreeMarker</code>、<code>Thymeleaf</code>等等，各大 MVVM 框架如 <code>Vue.js</code>，<code>AngularJS</code>，<code>EJS</code> 等也都有自己用来构建用户界面的内置模板语言。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 <strong><code>接口规则</code></strong>。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p><p><strong>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的。</strong></p><ul><li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）</li><li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）</li></ul><p>视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p><p>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 <code>事件驱动编程</code>。</p><p>View 层展现的不是 <code>Model</code> 层的数据，而是<code>ViewModel</code>的数据，由 <code>ViewModel</code> 负责与 <code>Model</code>层交互，<strong>这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环</strong>。</p><h2 id="4、Vue"><a href="#4、Vue" class="headerlink" title="4、Vue"></a>4、Vue</h2><h3 id="MVVM模式的实现者"><a href="#MVVM模式的实现者" class="headerlink" title="MVVM模式的实现者"></a>MVVM模式的实现者</h3><ul><li>Model：模型层，在这里表示JavaScript对象</li><li>View：视图层，在这里表示DOM（HTML操作的元素）</li><li>ViewModel：连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者</li></ul><p>在MVVM架构中，是不允许数据和视图直接通信的，只能通过ViewModel来通信，而ViewModel就是定义了一个Observer观察者</p><ul><li>ViewModel能够观察到数据的变化，并对视图对应的内容进行更新</li><li>ViewModel能够监听到视图的变化，并能够通知数据发生变化</li></ul><p>Vue.js就是一个MVVM的实现者，它的核心就是实现了DOM监听与数据绑定。</p><h1 id="四、第一个Vue程序"><a href="#四、第一个Vue程序" class="headerlink" title="四、第一个Vue程序"></a>四、第一个Vue程序</h1><p>IDEA可以安装vue的插件。vue不支持IE8及以下版本，因为vue使用了IE8无法模拟的ECMAScript 5特性，但它支持所有兼容ECMAScript 5的浏览器。</p><h2 id="1、下载地址"><a href="#1、下载地址" class="headerlink" title="1、下载地址"></a>1、下载地址</h2><ul><li><p>开发版本</p><ul><li>包含完整的警告和调试模式：<a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a></li><li>删除了警告：<a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></li></ul></li><li><p>CDN</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>scrpit src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>scrpit src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li></ul><h2 id="2、代码编写"><a href="#2、代码编写" class="headerlink" title="2、代码编写"></a>2、代码编写</h2><p>1、创建一个HTML文件</p><p>2、引入Vue.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>导入vue<span class="token punctuation">.</span>js<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>3、创建一个vue的实例</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//Model：数据</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">"hello Vue!"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li><p><code>el:"#app"</code>：绑定元素ID，也可以使用其它的选择器（例如类选择器或标签选择器），但建议使用ID选择器。</p><blockquote><p><strong>el:挂载点</strong></p></blockquote><ul><li><p>el是用来设置vue实例挂载（管理）的元素。</p></li><li><p>vue会管理el选项命中的元素及其内部的后代元素。</p></li><li><p>可以使用其它的选择器，但建议使用ID选择器。</p></li><li><p>可以使用其它的双标签，不能使用html和body。</p></li></ul></li><li><p><code>data:{message: "hello Vue!"}</code>：数据对象中有一个名为message的属性，并设置了初始值<code>hello Vue!</code></p><blockquote><p><strong>data:数据对象</strong></p></blockquote><ul><li>vue中用到的数据定义在data中</li><li>data中可以写复杂类型的数据</li><li>渲染复杂类型数据时，遵守js的语法即可</li></ul></li></ul><p>4、将数据绑定到页面元素</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>说明：只需要在绑定的元素中使用<strong>双中括号</strong>将名为message的属性包裹起来，即可实现数据绑定功能，也就实现了ViewModel层所需要的的效果。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--view层，模板--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//Model：数据</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">"hello Vue!"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="五、基础语法"><a href="#五、基础语法" class="headerlink" title="五、基础语法"></a>五、基础语法</h1><h2 id="1、v-text"><a href="#1、v-text" class="headerlink" title="1、v-text"></a>1、v-text</h2><p>v-text设置标签的文本值（textContext）。</p><p>默认写法会替换全部内容，使用差值表达式（<strong>双中括号</strong>）可以替换指定内容。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ info }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">"hello Vue!"</span><span class="token punctuation">,</span>                info<span class="token punctuation">:</span> <span class="token string">"test"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2、v-html"><a href="#2、v-html" class="headerlink" title="2、v-html"></a>2、v-html</h2><p>v-html的作用是设置标签的innerHTML。内容中有html结构会被解析为标签。</p><p>v-text指令无论内容是什么，只会解析为文本。</p><p>解析文本使用v-text，需要解析html结构使用v-html。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"&lt;a href='http://www.baidu.com'>百度一下&lt;/a>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="3、v-bind"><a href="#3、v-bind" class="headerlink" title="3、v-bind"></a>3、v-bind</h2><p>v-bind，设置元素的属性。（比如：src，title，class）</p><ul><li>完整写法：<code>v-bind: 属性名</code></li><li>简写的话，直接省略v-bind，只保留<code>: 属性名</code></li><li>需要动态的增删class建议使用对象的方式</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--view层，模板--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            鼠标悬停几秒查看此处动态绑定的提示信息！        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isActive?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active: isActive}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span><span class="token string">'页面加载于'</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                imgSrc<span class="token punctuation">:</span> <span class="token string">"图片地址"</span><span class="token punctuation">,</span>                isActive<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>v-bind</code>被称为指令。指令带有前缀<code>v-</code>，以表示它们是Vue提供的特殊特性。</p><p>上述中指令的含义是将这个元素的节点的title特性和Vue实例的message属性保持一致。</p><p><strong>v-bind缩写：</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 完整语法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 动态参数的缩写 (2.6.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[key]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="4、v-if、v-else"><a href="#4、v-if、v-else" class="headerlink" title="4、v-if、v-else"></a>4、v-if、v-else</h2><p>v-if，根据表达式的真假，切换元素的显示和隐藏（本质是通过操纵dom元素来切换显示状态）。</p><ul><li>表达式的值为true，元素存在于dom树种，为false，从dom树中移除。</li><li>频繁的切换使用v-show，反之使用v-if，v-show的切换消耗小。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;h2 v-if="ok">YES&lt;/h2>    &lt;h2 v-else>NO&lt;/h2>--></span>    &lt;h2 v-if = "type === 'A'">A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    &lt;h2 v-else-if = "type === 'B'">B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ok:true</span>            type<span class="token punctuation">:</span><span class="token string">'A'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="5、v-for"><a href="#5、v-for" class="headerlink" title="5、v-for"></a>5、v-for</h2><p>v-for，根据数据生成列表结构。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;li v-for = "item in items">        {{item.message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            items<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span><span class="token string">'《西游记》'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span><span class="token string">'《三国演义》'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span><span class="token string">'《水浒传》'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>message<span class="token punctuation">:</span><span class="token string">'《红楼梦》'</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="6、v-on"><a href="#6、v-on" class="headerlink" title="6、v-on"></a>6、v-on</h2><p>v-on可以为元素绑定事件。</p><ul><li>事件名不需要写on</li><li>指令可以简写为@</li><li>绑定的方法定义在methods属性中</li><li>方法内部通过this关键字可以访问定义在data中数据</li><li>事件绑定的方法写成函数调用的形式，可以传入自定义参数</li><li>定义方法时需要定义形参来接收传入的实参</li><li>事件的后面跟上<code>.修饰符</code>可以对事件进行限制</li><li><code>.enter</code>可以限制触发的按键为回车键</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单击测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>dbclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>双击测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSome(12,<span class="token punctuation">'</span>字符串<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doOther<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span><span class="token string">"Hello Vue!"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//方法必须定义在Vue的Methods对象中，v-on:事件</span>            test<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            doSome<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            doOther<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"回车键被按下了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>v-on缩写：</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 完整语法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 动态参数的缩写 (2.6.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[event]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="7、v-show"><a href="#7、v-show" class="headerlink" title="7、v-show"></a>7、v-show</h2><p>v-show，根据表达值的真假，切换元素的显示和隐藏。原理是修改元素的display，实现显示和隐藏。</p><ul><li><p>指令后面的内容，最终都会被解析为布尔值。</p></li><li><p>值为true元素显示，值为false元素隐藏。</p></li><li><p>数据改变之后，对应元素的显示状态会同步更新。</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>切换显示状态<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeIsShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/test.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                isShow<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                changeIsShow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>图片切换</strong></p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">html,        body,        <span class="token id">#app</span> </span><span class="token punctuation">{</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#c9c9c9</span><span class="token punctuation">;</span>          <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> </span><span class="token punctuation">{</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>          <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>          <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> <span class="token class">.title</span> </span><span class="token punctuation">{</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>          <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">56</span>px<span class="token punctuation">;</span>          <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">61</span>px<span class="token punctuation">;</span>          <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>          <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>          <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">175</span>, <span class="token number">47</span>, <span class="token number">47</span>, <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span>          <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>          <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>          <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> <span class="token class">.title</span> img </span><span class="token punctuation">{</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>          <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> <span class="token class">.title</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>          <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">65</span>px solid<span class="token punctuation">;</span>          <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent white<span class="token punctuation">;</span>          <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">65</span>px<span class="token punctuation">;</span>          <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">65</span>px<span class="token punctuation">;</span>          <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> > img </span><span class="token punctuation">{</span>          <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">458</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> a </span><span class="token punctuation">{</span>          <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">179</span>px<span class="token punctuation">;</span>          <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> a <span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>          <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>          <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>          <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>          <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>          <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> <span class="token class">.center</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>          <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>          <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>          <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>          <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>          <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            test        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--图片--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgArr[index]<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--左箭头--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index !<span class="token punctuation">=</span> 0<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>perv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/prev.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--右箭头--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index &lt; imgArr.length-1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/next.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            imgArr<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">"./images/0.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"./images/1.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"./images/2.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"./images/3.jpg"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            index<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            perv<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="六、表单双绑、组件"><a href="#六、表单双绑、组件" class="headerlink" title="六、表单双绑、组件"></a>六、表单双绑、组件</h1><h2 id="1、什么是双向数据绑定"><a href="#1、什么是双向数据绑定" class="headerlink" title="1、什么是双向数据绑定"></a>1、什么是双向数据绑定</h2><p>​    Vue.js是一个MVVM框架，即数据双向绑定，即当数据发生变化时，视图也就发生变化，当视图发生变化时，数据也会跟着同步变化。</p><p>​    所谓的数据双向绑定，一定是对于UI控件来说的，非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果使用<code>vuex</code>，那么数据流也是单向的，这时就会和双向数据绑定有冲突。</p><p><strong>为什么要实现数据的双向绑定？</strong></p><p>在<code>vue.js</code>中，如果使用<code>vuex</code>，实际上数据还是单向的，之所以说是数据双向绑定，这是用的UI控件来说，对于处理表单，Vue.js的双向数据绑定用起来就特别舒服。即两者并不互斥，在全局性数据流使用单向，方便跟踪；局部性数据流使用双向，简单易操作。</p><h2 id="2、在表单中使用双向数据绑定"><a href="#2、在表单中使用双向数据绑定" class="headerlink" title="2、在表单中使用双向数据绑定"></a>2、在表单中使用双向数据绑定</h2><p>可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    输入的文本：&lt;input type="text" v-model =  "message">{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    输入的文本：&lt;textarea v-model =  "text"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    性别：&lt;input type="radio" name="sex" value="男" v-model = "checked">男    &lt;input type="radio" name="sex" value="女" v-model = "checked">女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>       选中的性别：{{checked}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    下拉框：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>--请选择--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>value:{{selected}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>            text<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>            checked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            selected<span class="token punctuation">:</span><span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如果<code>v-model</code>表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code>元素将被渲染为”未选中“状态。在iOS中，这会使用户无法选择第一个选项。因为这样的情况下，iOS不会触发change时间。因此，推荐使用提供一个值为空的禁用选项。</p><h2 id="3、什么是组件"><a href="#3、什么是组件" class="headerlink" title="3、什么是组件"></a>3、什么是组件</h2><p>组件是可复用的<code>Vue</code>实例，说白了就是一组可以重复使用的模板，跟JSTL的自定义标签、Thymeleaf的<code>th:fragment</code>等框架有着异曲同工之妙。通常一个应用会以一棵嵌套的组件树的形式来组织：</p><p><img src="/archives/71513ccb/components.png" alt="Component Tree"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><p><strong>第一个Vue组件</strong></p><p>使用Vue.component()方法注册组件，格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lskj</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lskj</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义一个Vue组件Component</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{test}}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化Vue</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在实际开发中，并不会使用以上方式开发组件，而是采用vue-cli创建.vue模板文件的方式开发，上述方法只是为了更好地理解什么是组件。</p><ul><li>Vue.component()：注册组件</li><li>lskj：自定义组件的名字</li><li>template：组件的模板</li></ul><p><strong>使用<code>props</code>属性传递参数</strong></p><p>需要传递参数到组件中，需要使用<code>props</code>属性。</p><p><code>默认规则下props属性里的值不能为大写。</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--组件：传递给组件中的值：props--></span>    &lt;lskj v-for = "item in items" v-bind:test = "item"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lskj</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义一个Vue组件Component</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{test}}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化Vue</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            items<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"Python"</span><span class="token punctuation">,</span><span class="token string">"C++"</span><span class="token punctuation">,</span><span class="token string">"JavaScript"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><code>v-for="item in items"</code>：遍历<code>vue</code>实例中定义的名为<code>items</code>的数组，并创建同等数量的组件</li><li><code>v-bind:test="item"</code>：将遍历的<code>item</code>项绑定到组件中<code>props</code>定义的名为<code>test</code>属性上；<code>=</code>左边的<code>test</code>为<code>props</code>定义的属性名，右边的<code>item</code>为<code>item in items</code>中遍历的item项的值</li></ul><h1 id="七、Axios异步通信"><a href="#七、Axios异步通信" class="headerlink" title="七、Axios异步通信"></a>七、Axios异步通信</h1><h2 id="1、什么是Axios"><a href="#1、什么是Axios" class="headerlink" title="1、什么是Axios"></a>1、什么是Axios</h2><p>Axios是一个开源的可以用在浏览器端和NodeJS的异步通信框架，它的主要作用是实现AJAX异步通信，其功能特点如下：</p><ul><li>从浏览器中创建XMLHttpRequests</li><li>从node.js创建http请求</li><li>支持Promise API【JS中链式编程】</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF（跨站请求伪造）</li></ul><p>GitHub：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p><p>中文文档：<a href="http://www.axios-js.com/" target="_blank" rel="noopener">http://www.axios-js.com/</a></p><p><strong>为什么要使用Axios？</strong></p><p>​    由于Vue.js是一个视图层框架，并且作者（尤雨溪）严格遵守SoC（关注度分离原则），所以Vue.js并不包含AJAX的通信功能，为了解决通信问题，作者单独开发了一个名为<code>vue-resource</code>的插件，不过在进入2.0版本以后停止了该插件的维护并推荐了<code>Axios</code>框架。</p><p>​    少用jQuery，因为它操作DOM太频繁。</p><h2 id="2、第一个Axios应用程序"><a href="#2、第一个Axios应用程序" class="headerlink" title="2、第一个Axios应用程序"></a>2、第一个Axios应用程序</h2><p><code>data.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lskj"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://lskjwp.gitee.io/"</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"贵州贵阳"</span><span class="token punctuation">,</span>    <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"中国"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- v-cloak 解决闪烁问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token attribute">[v-cloak]</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入JS文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>名称：{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>地址：{{info.address.country}}-{{info.address.city}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>链接：&lt;a v-bind:href = "info.url" target="_blank">{{info.url}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#vue'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//data: 属性</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//请求返回参数格式，必须和json字符串一样</span>                info<span class="token punctuation">:</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span><span class="token punctuation">{</span>                        country<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                        city<span class="token punctuation">:</span><span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    url<span class="token punctuation">:</span><span class="token keyword">null</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//钩子函数 链式编程 ES6新特性</span>            axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'../data.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ol><li>在这里使用了v-bind将a:href的属性值与Vue实例中的数据进行绑定</li><li>使用axios框架的get方法请求AJAX并自动将数据封装进了Vue实例的数据对象中</li><li>在data中的数据结构必须要和Ajax响应回来的数据格式匹配</li></ol><h2 id="3、Vue的生命周期"><a href="#3、Vue的生命周期" class="headerlink" title="3、Vue的生命周期"></a>3、Vue的生命周期</h2><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a></p><p>Vue实例有一个完整的声明周期，也就是从开始创建、初始化数据、编译模板、挂载DOM、渲染→更新→渲染、卸载等一系列过程，这就是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们在事件触发时注册JS方法，可以让我们用自己注册的JS方法控制整个大局，在这些事件响应方法中的this直接指向的是Vue的实例。</p><p><img src="/archives/71513ccb/view" alt=""></p><h1 id="八、计算属性、内容分发、自定义事件"><a href="#八、计算属性、内容分发、自定义事件" class="headerlink" title="八、计算属性、内容分发、自定义事件"></a>八、计算属性、内容分发、自定义事件</h1><h2 id="1、什么是计算属性"><a href="#1、什么是计算属性" class="headerlink" title="1、什么是计算属性"></a>1、什么是计算属性</h2><p>​    计算属性的重点突出在<code>属性</code>两个字上（属性是名词），首先它是个<code>属性</code>，其次这个属性有<code>计算</code>的能力（计算是动词），这里的<code>计算</code>就是个函数。简单来说，它就是个能够将计算结果缓存起来的属性（将行为转化成了静态的属性），仅此而已。可以想象为缓存。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime {{currentTime()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime1 {{currentTime1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#vue'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>           message<span class="token punctuation">:</span><span class="token string">"Hello Vue!"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            currentTime<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回一个时间戳</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//计算属性：methods与computed的方法名不能重名，重名之后只会调用methods中的方法</span>        computed<span class="token punctuation">:</span><span class="token punctuation">{</span>            currentTime1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回一个时间戳</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>methods：定义方法，调用方法使用currentTiem()，需要带括号</li><li>computed：定义计算属性，调用属性使用currentTiem1，不需要带括号；this.message是为了能够让currentTime1观察到数据变化而变化</li><li>如果在方法中的值发生变化，则缓存就会刷新。可在控制台改变数据的值，再次测试观察效果。</li><li>methods和computed的方法不能重名</li></ul><p>调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢？此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点，<strong>计算属性的主要特性就是为了将不经常变换的计算结果进行缓存，以节约系统开销。</strong></p><h2 id="2、内容分发"><a href="#2、内容分发" class="headerlink" title="2、内容分发"></a>2、内容分发</h2><p>在Vue.js中使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中。</p><p><strong>测试</strong></p><p>准备制作一个待办事项组件（todo），该组件由待办标题（todo-title）和待办内容（todo-items）组成，但这三个组件又是相互独立的。</p><ol><li><p>定义一个待办事项的组件。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;div>\                    &lt;div>&lt;/div>\                    &lt;ul>\                        &lt;li>&lt;/li>\                    &lt;/ul>\                &lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>需要让待办事项的标题和值实现动态绑定，可以留出一个插槽。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1、将上面的代码留出一个插槽，即slot</span>    <span class="token comment" spellcheck="true">//插槽</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>\                       &lt;slot name="todo-title">&lt;/slot>\                       &lt;ul>\                            &lt;slot name="todo-items">&lt;/slot>\                        &lt;/ul>\                    &lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2、定义一个名为todo-title的待办标题组件和todo-items的待办内容组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-title"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{title}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>       props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;li>{{index+1}} . {{item}}&lt;/li>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>实例化Vue并初始化数据。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#vue'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">"书籍列表"</span><span class="token punctuation">,</span>            todoItems<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"Linux"</span><span class="token punctuation">,</span><span class="token string">"JavaScript"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将这些值通过插槽插入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- v-bind可以省略  v-bind:title="" => :title=""--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                     <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><p>todo-title和todo-items组件分别被分发到了todo组件的todo-title和todo-todo-items插槽中。</p><p><strong>完整的HTML代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- v-bind可以省略  v-bind:title="" => :title=""--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                     <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//插槽</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>\                       &lt;slot name="todo-title">&lt;/slot>\                       &lt;ul>\                            &lt;slot name="todo-items">&lt;/slot>\                        &lt;/ul>\                    &lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-title"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{title}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>       props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;li>{{index+1}} . {{item}}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#vue'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">"书籍列表"</span><span class="token punctuation">,</span>            todoItems<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"Linux"</span><span class="token punctuation">,</span><span class="token string">"JavaScript"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="3、自定义事件"><a href="#3、自定义事件" class="headerlink" title="3、自定义事件"></a>3、自定义事件</h2><p>​    通过上述代码不难发现，数据项在Vue的实例中，但删除操作要在组件中完成，那么组件如何才能删除Vue实例中的数据呢？此时就涉及到参数传递与事件分发，Vue为我们提供了自定义事件的功能，很好地帮助我们解决了这个问题。</p><p>​    使用<code>this.$emit('自定义事件名',参数)</code>，操作过程如下：</p><ol><li><p>在vue实例中增加了methods对象并定义一个名为``removeItem`的方法。</p><pre class=" language-html"><code class="language-html">var vm = new Vue({        el:'#vue',        data:{            title:"书籍列表",            todoItems:["Java","Linux","JavaScript"]        },        methods:{            removeItem:function (index) {                this.todoItems.splice(index,1);  //一次删除一个元素            }        }    });</code></pre></li><li><p>修改<code>todo-items</code>待办内容组件的代码，增加一个删除按钮，并且绑定事件。</p><pre class=" language-html"><code class="language-html">Vue.component("todo-items",{       props:['item','index'],       template:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{index}} . {{item}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>',        methods:{           remove:function (index) {               //alert("删除按钮测试！");               this.$emit('remove',index);           }        }    });</code></pre></li><li><p>修改<code>todo-items</code>待办内容组件的HTML代码，增加一个自定义事件<code>remove</code>，可以和组件的方法绑定，然后绑定到vue的方法中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                    <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>                     <span class="token attr-name">@remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeItem(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>完整的HTML代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- v-bind可以省略  v-bind:title="" => :title=""--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                    <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>                    <span class="token attr-name">@remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeItem(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//插槽</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>\                       &lt;slot name="todo-title">&lt;/slot>\                       &lt;ul>\                            &lt;slot name="todo-items">&lt;/slot>\                        &lt;/ul>\                    &lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-title"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{title}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>       props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span><span class="token string">'&lt;li>{{index}} . {{item}}  &lt;button @click="remove">删除&lt;/button>&lt;/li>'</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>           remove<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//alert("删除按钮测试！");</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#vue'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">"书籍列表"</span><span class="token punctuation">,</span>            todoItems<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"Linux"</span><span class="token punctuation">,</span><span class="token string">"JavaScript"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            removeItem<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todoItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一次删除一个元素</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/archives/71513ccb/20200622162938277.png" alt=""></p><h2 id="4、说明"><a href="#4、说明" class="headerlink" title="4、说明"></a>4、说明</h2><p>Vue的开发都是要基于NodeJS，实际开发采用vue-cli脚手架开发，vue-router路由，vuex做状态管理。Vue UI，界面一般使用ElementUI，或者ICE来快速搭建前端项目。</p><p>官网：</p><ul><li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN</a></li><li><a href="https://ice.work/" target="_blank" rel="noopener">https://ice.work/</a></li></ul><h1 id="九、第一个vue-cli项目"><a href="#九、第一个vue-cli项目" class="headerlink" title="九、第一个vue-cli项目"></a>九、第一个vue-cli项目</h1><h2 id="1、什么是vue-cli"><a href="#1、什么是vue-cli" class="headerlink" title="1、什么是vue-cli"></a>1、什么是vue-cli</h2><p>​    vue-cli是官方提供的一个脚手架，用于快速生成一个vue的项目模板。</p><p>​    预先定义好的目录结构及基础代码，就好比在创建Maven项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架。</p><p><strong>主要的功能:</strong></p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><ul><li>Node.js : <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></li><li>Git : <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/</a></li></ul><p><strong>确认nodejs安装成功:</strong></p><ul><li>cmd 下输入 <code>node -v</code>,查看是否能够正确打印出版本号即可!</li><li>cmd 下输入 <code>npm-v</code>,查看是否能够正确打印出版本号即可!</li></ul><p>这个npm,就是一个软件包管理工具,就和linux下的apt软件安装差不多!</p><p><strong>安装 Node.js 淘宝镜像加速器（cnpm）</strong></p><p>这样子的话,下载会快很多~</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -g 就是全局安装</span><span class="token function">npm</span> <span class="token function">install</span> cnpm -g<span class="token comment" spellcheck="true"># 或使用如下语句解决 npm 速度慢的问题</span><span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>安装过程可能有点慢~,耐心等待!虽然安装了cnpm,但是尽量少用!</p><p>安装的位置:<code>C:\Users\***\AppData\Roaming\npm</code></p><p><strong>安装 vue-cli</strong></p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> vue-cli -g<span class="token comment" spellcheck="true"># 测试是否安装成功</span><span class="token comment" spellcheck="true"># 查看可以基于哪些模板创建 vue 应用程序，通常我们选择 webpack</span>vue list<span class="token comment" spellcheck="true"># 显示read ECONNRESET需要以管理员的身份重启cmd</span></code></pre><h2 id="3、第一个vue-cli应用程序"><a href="#3、第一个vue-cli应用程序" class="headerlink" title="3、第一个vue-cli应用程序"></a>3、第一个vue-cli应用程序</h2><ol><li><p>创建一个Vue项目，随便建立一个空的文件夹在电脑上。</p></li><li><p>创建一个基于webpack模板的vue应用程序</p><pre><code># 这里的 myvue 是项目名称，可以根据自己的需求起名vue init webpack myvue</code></pre></li><li><p>Yes/NO都选择NO</p></li></ol><p><strong>说明:</strong></p><ul><li>Project name：项目名称，默认 回车 即可</li><li>Project description：项目描述，默认 回车 即可</li><li>Author：项目作者，默认 回车 即可</li><li>Install vue-router：是否安装 vue-router，选择 n 不安装（后期需要再手动添加）</li><li>Use ESLint to lint your code：是否使用 ESLint 做代码检查，选择 n 不安装（后期需要再手动添加）</li><li>Set up unit tests：单元测试相关，选择 n 不安装（后期需要再手动添加）</li><li>Setup e2e tests with Nightwatch：单元测试相关，选择 n 不安装（后期需要再手动添加）</li><li>Should we run npm install for you after the project has been created：创建完成后直接初始化，选择 n，我们手动执行;运行结果!</li></ul><h2 id="4、初始化并运行"><a href="#4、初始化并运行" class="headerlink" title="4、初始化并运行"></a>4、初始化并运行</h2><pre><code>cd myvuenpm installnpm run dev</code></pre><h1 id="十、webpack"><a href="#十、webpack" class="headerlink" title="十、webpack"></a>十、webpack</h1><p>​    本质上，webpack是一个现代JavaScript应用程序的静态模块打包器（module bundler）。当webpack处理应用程序时，它会递归地构建一个依赖关系图（dependency graph），其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。</p><p>​    webpack是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时在异步加载。通过loader转换，任何形式的资源都可以当做模块，比如CommonsJS、AMD、ES6、CSS、JSON、CoffeeScript、LESS等。</p><p>​    前端开发和其他开发工作的主要区别，首先是前端基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器的，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h2 id="1、webpack安装"><a href="#1、webpack安装" class="headerlink" title="1、webpack安装"></a>1、webpack安装</h2><p>WebPack 是一款模块加载器兼打包工具，它能把各种资源，如 JS、JSX、ES6、SASS、LESS、图片等都作为模块来处理和使用。</p><p><strong>安装：</strong></p><pre><code>npm install webpack -gnpm install webpack-cli -g</code></pre><p><strong>测试是否安装成功：</strong></p><pre><code>webpack -vwebpack-cli -v</code></pre><h2 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h2><p>创建 <code>webpack.config.js</code>配置文件</p><ul><li>entry：入口文件， 指定Web Pack用哪个文件作为项目的入口</li><li>output：输出， 指定WebPack把处理完成的文件放置到指定路径</li><li>module：模块， 用于处理各种类型的文件</li><li>plugins：插件， 如：热更新、代码重用等</li><li>resolve：设置路径指向</li><li>watch：监听， 用于设置文件改动后直接打包</li></ul><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        loaders<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span><span class="token punctuation">;</span>\loade<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    resolve<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><strong>直接运行<code>webpack</code>命令打包。</strong></p><h2 id="3、使用webpack"><a href="#3、使用webpack" class="headerlink" title="3、使用webpack"></a>3、使用webpack</h2><ol><li><p>创建一个空文件夹，并使用IDEA以打开项目的形式打开</p></li><li><p>创建一个名为<code>modules</code>的目录，用于放置JS模块等资源文件</p></li><li><p>在modules下创建模块文件，如test.js，用于编写JS模块相关代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//暴露一个方法</span>exports<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h2>test&lt;/h2>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在modules下创建一个名为main.js的入口文件，用于打包时设置entry属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//require 导入一个模块，就可以调用这个模块中的方法了</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在项目目录下创建webpack.config.js配置文件，使用webpack命令打包</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./modules/main.js'</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        filename<span class="token punctuation">:</span> <span class="token string">"./js/bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>在项目目录下创建HTML页面，如index.html，导入webpack打包后的JS文件</p></li><li><p>在IDEA控制台中直接执行webpack；如果失败的话，就使用管理员权限运行</p></li><li><p>运行index.html看效果</p></li></ol><pre><code># 参数--watch 用于监听变化webpack --watch</code></pre><h1 id="十一、vue-router路由"><a href="#十一、vue-router路由" class="headerlink" title="十一、vue-router路由"></a>十一、vue-router路由</h1><p>Vue Router是Vue.js官方的路由管理器。它和Vue.js的核心深度集成， 让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于Vue js过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的CSS class的链接</li><li>HTML5 历史模式或hash模式， 在IE 9中自动降级</li><li>自定义的滚动行为</li></ul><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><strong>基于第一个<code>vue-cli</code>进行测试学习； 先查看node modules中是否存在vue-router</strong><br>vue-router是一个插件包， 所以还是需要用npm/cnpm来进行安装的。打开命令行工具，进入项目目录，输入下面命令：</p><pre><code>npm install vue-router --save-dev</code></pre><p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示声明使用VueRouter</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><ol><li><p>删除无用的文件</p></li><li><p><code>components</code> 目录下存放自己编写的组件</p></li><li><p>定义一个<code>Content.vue</code> 和<code>Main.vue</code>的组件<br><strong>Content.vue</strong></p><pre><code>&lt;template&gt;    &lt;h1&gt;内容页&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "Content"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p><strong>Main.vue</strong></p><pre><code>&lt;template&gt;    &lt;h1&gt;首页&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "Main"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>安装路由，在src目录下，新建一个文件夹：<code>router</code>，专门存放路由，配置路由index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">"../components/Content"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../components/Main"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//安装路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置导出路由</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//路由路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/content'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'content'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//跳转的组件</span>      component<span class="token punctuation">:</span> Content    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//路由路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//跳转的组件</span>      component<span class="token punctuation">:</span> Main    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在<code>main.js</code>中配置路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>  <span class="token comment" spellcheck="true">//自动扫描里面的路由配置</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置路由</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在<code>App.vue</code>中使用路由</p><pre><code>&lt;template&gt;  &lt;div id="app"&gt;    &lt;router-link to="/main"&gt;首页&lt;/router-link&gt;    &lt;router-link to="/content"&gt;内容页&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',}&lt;/script&gt;&lt;style&gt;#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}&lt;/style&gt;</code></pre></li></ol><h1 id="十二、实战"><a href="#十二、实战" class="headerlink" title="十二、实战"></a>十二、实战</h1><p>结合ElementUI组件库，将所学知识点应用到实际中。</p><h2 id="1、创建工程"><a href="#1、创建工程" class="headerlink" title="1、创建工程"></a>1、创建工程</h2><p>命令行使用管理员模式运行。</p><ol><li><p>创建一个名为hello-vue的工程</p><pre><code>vue init webpack hello-vue</code></pre></li><li><p>安装依赖， 需要安装vue-router、element-ui、sass-loader和node-sass四个插件</p><pre><code>#进入工程目录cd hello-vue#安装vue-routern npm install vue-router --save-dev#安装element-uinpm i element-ui -S#安装依赖npm install# 安装SASS加载器cnpm install sass-loader node-sass --save-dev#启功测试npm run dev</code></pre></li><li><p>Npm命令</p><ul><li><code>npm install moduleName</code>：安装模块到项目目录下</li><li><code>npm install -g moduleName</code>：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置</li><li><code>npm install -save moduleName</code>：–save的意思是将模块安装到项目目录下， 并在package文件的dependencies节点写入依赖，-S为该命令的缩写</li><li><code>npm install -save-dev moduleName</code>:–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</li></ul></li></ol><h2 id="2、创建登录页面"><a href="#2、创建登录页面" class="headerlink" title="2、创建登录页面"></a>2、创建登录页面</h2><ol><li><p>创建成功后用idea打开，删除无用的文件！</p></li><li><p>创建views和router文件夹用来存放视图和路由。</p><p>在源码目录中创建如下结构：</p><ul><li>assets：用于存放资源文件</li><li>components：用于存放Vue功能组件</li><li>views：用于存放Vue视图组件</li><li>router：用于存放vue-router配置</li></ul></li><li><p>创建首页视图，在views目录下创建一个名为Main.vue的视图组件</p><pre><code>&lt;template&gt;    &lt;h1&gt;首页&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "Main"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>创建登录页视图在views目录下创建名为Login.vue的视图组件，其中el-*的元素为ElementUI组件</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;el-form ref="loginForm" :model="form" :rules="rules" label-width="80px" class="login-box"&gt;      &lt;h3 class="login-title"&gt;欢迎登录&lt;/h3&gt;      &lt;el-form-item label="账号" prop="username"&gt;        &lt;el-input type="text" placeholder="请输入账号" v-model="form.username"/&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="密码" prop="password"&gt;        &lt;el-input type="password" placeholder="请输入密码" v-model="form.password"/&gt;      &lt;/el-form-item&gt;      &lt;el-form-item&gt;        &lt;el-button type="primary" v-on:click="onSubmit('loginForm')"&gt;登录&lt;/el-button&gt;      &lt;/el-form-item&gt;    &lt;/el-form&gt;    &lt;el-dialog      title="温馨提示"      :visible.sync="dialogVisible"      width="30%"      :before-close="handleClose"&gt;      &lt;span&gt;请输入账号和密码&lt;/span&gt;      &lt;span slot="footer" class="dialog-footer"&gt;        &lt;el-button type="primary" @click="dialogVisible = false"&gt;确 定&lt;/el-button&gt;      &lt;/span&gt;    &lt;/el-dialog&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    name: "Login",    data() {      return {        form: {          username: '',          password: ''        },        // 表单验证，需要在 el-form-item 元素中增加 prop 属性        rules: {          username: [            {required: true, message: '账号不可为空', trigger: 'blur'}          ],          password: [            {required: true, message: '密码不可为空', trigger: 'blur'}          ]        },        // 对话框显示和隐藏        dialogVisible: false      }    },    methods: {      onSubmit(formName) {        // 为表单绑定验证功能        this.$refs[formName].validate((valid) =&gt; {          if (valid) {            // 使用 vue-router 路由到指定页面，该方式称之为编程式导航            this.$router.push("/main");          } else {            this.dialogVisible = true;            return false;          }        });      }    }  }&lt;/script&gt;&lt;style lang="scss" scoped&gt;  .login-box {    border: 1px solid #DCDFE6;    width: 350px;    margin: 180px auto;    padding: 35px 35px 15px 35px;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;    box-shadow: 0 0 25px #909399;  }  .login-title {    text-align: center;    margin: 0 auto 40px auto;    color: #303133;  }&lt;/style&gt;</code></pre></li><li><p>创建路由，在router目录下创建一个名为<code>index.js</code>的vue-router路由配置文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Main    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在main.js中配置相关main.js是index.html调用的 所以前面注册的组件要在这里导入。<strong>一定不要忘记扫描路由配置并将其用到new Vue中</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//扫描路由配置</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment" spellcheck="true">//导入elementUI</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token comment" spellcheck="true">//导入element css</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//ElementUI规定这样使用</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在App.vue中配置显示视图</p><pre><code>&lt;template&gt;  &lt;div id="app"&gt;    &lt;router-link to="/login"&gt;login&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',}&lt;/script&gt;</code></pre></li><li><p>运行测试</p></li></ol><blockquote><p>测试：在浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>出现错误：可能是因为sass-loader的版本过高导致的编译错误，需要退回到7.3.1 </p><p>解决方法：去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新cnpm install就可以了</p><p>同时需注意index.js中跳转组件那里是component，而不是components</p></blockquote><h2 id="3、路由嵌套"><a href="#3、路由嵌套" class="headerlink" title="3、路由嵌套"></a>3、路由嵌套</h2><p>嵌套路由又称子路由，在实际应用中，通常有多层嵌套的组件组合而成。</p><ol><li><p>在views目录下创建user目录</p></li><li><p>创建用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件</p><pre><code>&lt;template&gt;    &lt;h1&gt;个人信息&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "UserProfile"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>在用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件</p><pre><code>&lt;template&gt;    &lt;h1&gt;用户列表&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "UserList"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>修改首页视图，修改 Main.vue 视图组件</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;el-container&gt;      &lt;el-aside width="200px"&gt;        &lt;el-menu :default-openeds="['1']"&gt;          &lt;el-submenu index="1"&gt;            &lt;template slot="title"&gt;&lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;用户管理&lt;/template&gt;            &lt;el-menu-item-group&gt;              &lt;el-menu-item index="1-1"&gt;                &lt;router-link to="/user/profile"&gt;个人信息&lt;/router-link&gt;              &lt;/el-menu-item&gt;              &lt;el-menu-item index="1-2"&gt;                &lt;router-link to="/user/list"&gt;用户列表&lt;/router-link&gt;              &lt;/el-menu-item&gt;            &lt;/el-menu-item-group&gt;          &lt;/el-submenu&gt;          &lt;el-submenu index="2"&gt;            &lt;template slot="title"&gt;&lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;内容管理&lt;/template&gt;            &lt;el-menu-item-group&gt;              &lt;el-menu-item index="2-1"&gt;分类管理&lt;/el-menu-item&gt;              &lt;el-menu-item index="2-2"&gt;内容列表&lt;/el-menu-item&gt;            &lt;/el-menu-item-group&gt;          &lt;/el-submenu&gt;        &lt;/el-menu&gt;      &lt;/el-aside&gt;      &lt;el-container&gt;        &lt;el-header style="text-align: right; font-size: 12px"&gt;          &lt;el-dropdown&gt;            &lt;i class="el-icon-setting" style="margin-right: 15px"&gt;&lt;/i&gt;            &lt;el-dropdown-menu slot="dropdown"&gt;              &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;              &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;            &lt;/el-dropdown-menu&gt;          &lt;/el-dropdown&gt;        &lt;/el-header&gt;        &lt;el-main&gt;          &lt;!--展示视图--&gt;          &lt;router-view /&gt;        &lt;/el-main&gt;      &lt;/el-container&gt;    &lt;/el-container&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    name: "Main"  }&lt;/script&gt;&lt;style scoped lang="scss"&gt;  .el-header {    background-color: mediumseagreen;    color: #333;    line-height: 60px;  }  .el-aside {    color: #333;  }&lt;/style&gt;</code></pre></li><li><p>配置嵌套路由修改 router 目录下的 index.js 路由配置文件，使用children放入main中写入子模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserList <span class="token keyword">from</span> <span class="token string">"../views/user/List"</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserProfile <span class="token keyword">from</span> <span class="token string">"../views/user/Profile"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Main<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//嵌套路由</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/user/profile'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span> UserProfile<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span> UserList<span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>运行测试</p></li></ol><h2 id="4、参数传递"><a href="#4、参数传递" class="headerlink" title="4、参数传递"></a>4、参数传递</h2><ol><li><p>前端传递参数，在Main.vue中的route-link位置处 to 改为了 <code>:to</code>，是为了将这一属性当成对象使用，注意router-link中的name属性名称一定要和路由中的name属性名称匹配，因为这样Vue才能找到对应的路由路径</p><pre><code>&lt;!--name：传组件名 params：传递参数，需要绑定对象：v-bind--&gt;&lt;router-link v-bind:to="{name: 'UserProfile', params: {id: 1}}"&gt;个人信息&lt;/router-link&gt;</code></pre></li><li><p>修改路由配置，在router下的index.js中的 path 属性中增加了 :id 这样的占位符以及name属性、增加props：true属性</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/user/profile/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'UserProfile'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> UserProfile<span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></li><li><p>前端显示，在要展示的组件Profile.vue中接收参数</p><pre><code>&lt;template&gt;    &lt;div&gt;      &lt;h1&gt;个人信息&lt;/h1&gt;      &lt;!--{{$route.params.id}}--&gt;      {{id}}    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "UserProfile",        props: ['id']    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>运行测试</p></li></ol><h2 id="5、重定向"><a href="#5、重定向" class="headerlink" title="5、重定向"></a>5、重定向</h2><p> Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：<br> 在router下面index.js的配置</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Login<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/goHome'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">}</span></code></pre><p> <code>/goHom</code>e 重定向到了 <code>/main</code>路径，由此可以看出重定向不需要定义组件。</p><p>使用，只需要在Main.vue设置对应路径即可</p><pre><code>&lt;el-menu-item index="1-2"&gt;    &lt;router-link to="/user/list"&gt;用户列表&lt;/router-link&gt;&lt;/el-menu-item&gt;&lt;!--重定向应用--&gt;&lt;el-menu-item index="1-3"&gt;    &lt;router-link to="/goHome"&gt;返回首页&lt;/router-link&gt;&lt;/el-menu-item&gt;</code></pre><h2 id="6、完善登录"><a href="#6、完善登录" class="headerlink" title="6、完善登录"></a>6、完善登录</h2><p><strong>登录成功显示用户名</strong></p><p>传递用户名</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/main/"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改路由配置index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/main/:name'</span><span class="token punctuation">,</span>      props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Main<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//嵌套路由</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token operator">...</span><span class="token operator">...</span></code></pre><p>前端显示，在要展示的组件Profile.vue中接收参数</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Main"</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre><code>&lt;el-dropdown-menu slot="dropdown"&gt;    &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;    &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;&lt;/el-dropdown-menu&gt;&lt;/el-dropdown&gt;&lt;!--显示用户名--&gt;&lt;span&gt;{{name}}&lt;/span&gt;</code></pre><h1 id="十三、路由钩子与异步请求"><a href="#十三、路由钩子与异步请求" class="headerlink" title="十三、路由钩子与异步请求"></a>十三、路由钩子与异步请求</h1><h2 id="1、路由模式与404"><a href="#1、路由模式与404" class="headerlink" title="1、路由模式与404"></a>1、路由模式与404</h2><p> <strong>路由模式有两种</strong></p><ul><li>hash：路径带 # 符号，如 <a href="http://localhost/#/login" target="_blank" rel="noopener">http://localhost/#/login</a></li><li>history：路径不带 # 符号，如 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a></li></ul><p>修改路由配置，代码如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>处理404</strong></p><ol><li><p>创建一个NotFound.vue视图组件</p><pre><code>&lt;template&gt;    &lt;div&gt;      &lt;h1&gt;404，你的页面走丢了！&lt;/h1&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: "NotFound"    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre></li><li><p>修改路由配置index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">'../views/NotFound'</span><span class="token punctuation">{</span>   path<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>   component<span class="token punctuation">:</span> NotFound<span class="token punctuation">}</span></code></pre></li></ol><h2 id="2、路由钩子"><a href="#2、路由钩子" class="headerlink" title="2、路由钩子"></a>2、路由钩子</h2><p><code>beforeRouteEnter</code>：在进入路由前执行<br><code>beforeRouteLeave</code>：在离开路由前执行</p><p>在Profile.vue中编写代码</p><pre><code>&lt;script&gt;  export default {    name: "UserProfile",    props: ['id'],    beforeRouteEnter: (to, from, next) =&gt; {      console.log("进入路由之前！");      next();    },    beforeRouteLeave: (to, from, next) =&gt; {      console.log("进入路由之后！");      next();    }  }&lt;/script&gt;</code></pre><p><strong>参数说明:</strong></p><ul><li><p>to：路由将要跳转的路径信息</p></li><li><p>from：路径跳转前的路径信息</p></li><li><p>next：路由的控制参数</p><ul><li>next() 跳入下一个页面</li><li>next(’/path’) 改变路由的跳转方向，使其跳到另一个路由</li><li>next(false) 返回原来的页面</li><li>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</li></ul></li></ul><h2 id="3、异步请求"><a href="#3、异步请求" class="headerlink" title="3、异步请求"></a>3、异步请求</h2><p><strong>在钩子函数中使用异步请求</strong></p><ol><li><p>安装 Axios</p><pre><code>cnpm install --save vue-axios</code></pre></li><li><p>main.js引用 Axios</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> VueAxios <span class="token keyword">from</span> <span class="token string">'vue-axios'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAxios<span class="token punctuation">,</span> axios<span class="token punctuation">)</span></code></pre></li><li><p>准备数据 ： <strong>只有static 目录下的文件是可以被访问到</strong>，所以把静态文件放入该目录下。数据存放位置：<code>static/mock/data.json</code></p></li><li><p>在 beforeRouteEnter 中进行异步请求</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"UserProfile"</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    beforeRouteEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入路由之前！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加载数据</span>      <span class="token function">next</span><span class="token punctuation">(</span>vm <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入路由之前执行getData方法</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    beforeRouteLeave<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入路由之后！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      getData<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080/static/mock/data.json'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>运行测试，在控制台中进行查看</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV18E411a7mC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://lskjwp.gitee.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://lskjwp.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/319c21eb/"/>
    <id>https://lskjwp.gitee.io/archives/319c21eb/</id>
    <published>2020-08-29T07:36:51.000Z</published>
    <updated>2021-11-14T07:16:13.346Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1aE41167Tu" target="_blank" rel="noopener">B站 遇见狂神说   </a><a href="https://www.bilibili.com/video/BV1sk4y167pD" target="_blank" rel="noopener">动力节点</a></p><a id="more"></a><p>Spring MVC是一个模型-视图-控制器（MVC）的Web框架建立在中央前端控制器servlet（DispatcherServlet），它负责发送每个请求到合适的处理程序，使用视图来最终返回响应结果的概念。</p><p><img src="/archives/319c21eb/SpringMVC.svg" alt=""></p><h1 id="一、什么是MVC？"><a href="#一、什么是MVC？" class="headerlink" title="一、什么是MVC？"></a>一、什么是MVC？</h1><ul><li>MVC是模型（Model）、视图（View）、控制器（Controller）的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是降低了视图与业务逻辑间的双向耦合。</li><li>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。</li></ul><p>Model（模型）：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包含数据和业务。</p><p>View（视图）：负责进行模型的展示，一般就是我们见到的用户界面，客户想要看到的东西。</p><p>Controller（控制器）：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p>最典型的MVC就是JSP+servlet+JavaBean的模式。</p><p><img src="/archives/319c21eb/image-20200724153135341.png" alt=""></p><h1 id="二、什么是SpringMVC"><a href="#二、什么是SpringMVC" class="headerlink" title="二、什么是SpringMVC"></a>二、什么是SpringMVC</h1><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>Spring MVC的特点：</p><ul><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ul><p>Spring的web框架围绕DispatchServlet设计。DispatchServlet的作用是将请求分发到不同的处理器。从Spring2.5开始，使用Java5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样，以请求为驱动，围绕一个中心Servlet分派请求及提供其他功能，DispatchServlet是一个实际的Servlet（它继承自HTTPServlet基类）。</p><p><img src="/archives/319c21eb/image-20200725102725565.png" alt=""></p><p>Spring MVC的原理如下图所示：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="/archives/319c21eb/image-20200725103924259.png" alt=""></p><p>下图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><img src="/archives/319c21eb/image-20200725113244705.png" alt=""></p><p><strong>简单分析执行流程：</strong></p><ol><li><p>DispatchServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatchServlet接收请求并拦截请求。</p><ul><li>假设请求的url为<a href="http://localhost:8080/SpringMVC/hello" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/hello</a></li><li>将url拆分为三部分</li><li><a href="http://localhost:8080服务器域名" target="_blank" rel="noopener">http://localhost:8080服务器域名</a></li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>url表示请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</li></ul></li><li><p>HandlerMapping为处理器映射（实现了HandlerMapping接口的类都叫做映射器）。DispatchServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler。</p><p>根据请求，从SpringMVC容器对象中获取处理器对象（MyController controller = ctx.getBean(“/hello”)），框架把找到的处理器对象放到一个叫做处理器执行链（HandlerExecutionChain）的类保存。</p><p>HandlerExceptionChain：类中保存着（1）处理器对象（MyController）（2）项目中的所有的拦截器<strong>List<handlerinterceptor> interceptorList</handlerinterceptor></strong></p></li><li><p>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器，例如上面的url被查找控制器为：hello</p></li><li><p>HandlerExecution将解析后的信息传递给DispatchServlet，如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名称或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器解析的逻辑视图名传给DispatchServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><p><img src="/archives/319c21eb/SpringMVC%E6%B5%81%E7%A8%8B.svg" alt=""></p><h1 id="三、第一个MVC程序"><a href="#三、第一个MVC程序" class="headerlink" title="三、第一个MVC程序"></a>三、第一个MVC程序</h1><h2 id="1、配置版"><a href="#1、配置版" class="headerlink" title="1、配置版"></a>1、配置版</h2><ul><li><p>新建一个Module，添加web的支持</p></li><li><p>确定导入了SpringMVC的依赖</p></li><li><p>配置web.xml，注册DispatcherServlet</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1、注册DispatchServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            springmvc创建容器对象时，读取的配置文件默认是/WEB-INF/[servlet-name]-servlet.xml        --></span>        <span class="token comment" spellcheck="true">&lt;!--关联一个springmvc的配置文件：[Servlet-name]-servlet.xml--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--springmvc的配置文件的位置的属性--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--指定自定义文件的位置--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动级别            load-on-startup：表示tomcat启动后创建对象的顺序。它的值是整数，数值越小，tomcat创建对象的时间越早。（大于等于0的整数。            1：表示在tomcat启动后，创建Servlet对象        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--/ 匹配所有的请求：（不包括.jsp）--></span>    <span class="token comment" spellcheck="true">&lt;!--/* 匹配所有的请求：（包括.jsp）--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            url-pattern剋使用两种值            1、使用扩展名方式，语法 *.xxx，xxx是自定义的扩展名。常用的方式 *.do，*.action，*.mvc等                http://localhost:8080/login.do            2、使用斜杠"/"        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写SpringMVC的配置文件，名称：springmvc-servlet.xml【[servlet-name]-servlet.xml】</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加处理映射器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加处理映射器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>添加处理器适配器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加处理适配器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>添加视图解析器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加视图解析器--></span><span class="token comment" spellcheck="true">&lt;!--视图解析器：DispatchServlet给它的ModelAndView    1.获取了ModelAndView的数据    2.解析ModelAndView的视图名字    3.拼接视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp    4.将数据渲染到这个视图上    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--前缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--后缀--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写要操作的业务controller，要么实现Controller接口，要么增加注解。需要返回一个ModelAndView，装数据，封视图。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里先实现Controller接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ModelAndView模型和视图</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装对象，放在ModelAndView中。Model</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"HelloSpringMVC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装要跳转的视图，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//：/WEB-INF/jsp/hello.jsp</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Handler--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>编写需要跳转的jsp页面，显示ModelAndView存放的数据，以及正常的页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ${msg}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置Tomact，启动测试</p><pre><code>可能遇到的问题：访问出现4041.查看控制台输出，看一下是否缺少了什么jar包。2.如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖。3.重启Tomact。</code></pre></li></ul><h2 id="2、注解版"><a href="#2、注解版" class="headerlink" title="2、注解版"></a>2、注解版</h2><p>1、新建一个Moudle，添加web支持。建立包结构com.lskj.controller</p><p>2、由于Maven可能存在资源过滤的问题，完善配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>3、在pom.xml文件引入相关依赖：</p><p>主要有Spring框架核心库、SpringMVC、Servlet、JSTL等。（若父依赖中已经引入，则不需）</p><p>4、配置web.xml</p><ul><li>注意web.xml版本问题</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为<code>/</code>   【不要用<code>/*</code>，会404】</li></ul><pre><code>/ 和 /* 的区别：&lt;url-pattern&gt;/&lt;/url-pattern&gt;不会匹配到.jsp，只针对编写的请求，即.jsp不会进入到spring的DispatchetServlet类。&lt;url-pattern&gt;/*&lt;/url-pattern&gt;会匹配*.jsp，会出现返回jsp视图 时再次进入spring的DispatcherServlet类，导致找不到对应的controller</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册Servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--启动顺序，数字越小，启动越早--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--所有请求都会被SpringMVC拦截--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>5、添加SpringMVC配置文件</p><ul><li>让IOC的注解生效</li><li>静态资源过滤：HTML、JS、CSS、图片、视频……</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自动扫描包，让指定包下的注解生效，由IOC容器统一管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--让Spring MVC不处理静态资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--    支持mvc驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping直接生效        必须向上下文直接DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--前缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--后缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在视图解析器中把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p>6、创建Controller</p><p>编写一个Java控制类：com.lskj.controller.HelloController.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//封装数据</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,SpringMVC Annotation!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//会被视图解析器处理</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*@Controller@RequestMapping("/hello")public class HelloController {    //localhost:8080/hello/test    @RequestMapping("/test")    public String hello(Model model){        //封装数据        model.addAttribute("msg","Hello,SpringMVC Annotation!");        return "hello";  //会被视图解析器处理    }}*/</span></code></pre><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，因为类与方法上都有映射所以访问时应该是/hello/test；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/hello.jsp</li></ul><p>7、创建视图层</p><p>在WEB-INF/jsp目录中创建hello.jsp，视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring MVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ${msg}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>8、配置Tomact运行</p><p>配置Tomact，开启服务器，访问对应的请求路径。</p><p><code>使用SpringMVC必须配置的 三大件：处理器映射器、处理器适配器、视图解析器</code></p><p>通常，只需要<code>手动配置视图解析器</code>，而<code>处理器映射器</code>和<code>处理器适配器</code>只需要开启<code>注解驱动</code>即可。</p><h2 id="3、静态资源访问"><a href="#3、静态资源访问" class="headerlink" title="3、静态资源访问"></a>3、静态资源访问</h2><p>注册DispatchServlet时，将<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>配置为<code>/</code>时，静态资源无法进行访问，此时，需要进行一些配置，才能对静态资源进行访问。</p><p><strong>第一种处理静态资源方式</strong>：</p><p>需要在springmvc配置文件中加入<code>&lt;mvc:default-servlet-handler/&gt;</code></p><p>原理：加入这个标签后，框架会创建控制器对象DefaultServletHttpRequestHandler（类似创建的Conroller）。</p><p>DefaultServletHttpRequestHandler这个对象可以把接收的请求转发给tomcat的default这个servlet。</p><p>default-servlet-handler和@RequestMapping注解有冲突，需要加入<code>&lt;mvc:annotation-driven/&gt;</code>注解驱动解决问题。</p><p><strong>第二种处理静态资源方式</strong>：</p><p>在springmvc配置文件中加入<code>&lt;mvc:resources mapping="" location=""/&gt;</code></p><p>mvc:resources加入后框架会创建ResourceHttpRequestHandler这个处理器对象。让这个对象处理静态资源的访问，不依赖tomcat服务器。</p><p>mapping：访问静态资源的url地址，使用通配符**</p><p>location：静态资源在项目中的目录位置。</p><p>mvc:resources和@RequestMapping有一定的冲突，需加入注解驱动<code>&lt;mvc:annotation-driven/&gt;</code>。</p><p>例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/html/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/html/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="四、Controller和RequestMapping"><a href="#四、Controller和RequestMapping" class="headerlink" title="四、Controller和RequestMapping"></a>四、Controller和RequestMapping</h1><h2 id="1、控制器Controller"><a href="#1、控制器Controller" class="headerlink" title="1、控制器Controller"></a>1、控制器Controller</h2><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法。</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h2 id="2、实现Controller接口"><a href="#2、实现Controller接口" class="headerlink" title="2、实现Controller接口"></a>2、实现Controller接口</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现该接口的类获得控制器功能</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//处理请求且返回一个模型与视图对象</span>   ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest var1<span class="token punctuation">,</span> HttpServletResponse var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><p>1、新建一个Moudle，步骤与第一个MVC程序配置版相同（mvc的配置文件中只有视图解析器）。</p><p>2、编写一个Controller类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只要实现了Controller接口的类，说明这就是一个控制器了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerDemoTest01</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerDemoTest01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、Spring配置文件中注册请求的bean，name对应请求路径，class对应处理请求的类</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/t1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller.ControllerDemoTest01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>4、编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应视图解析器</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ControllerDemoTest01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ${msg}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>5、配置Tomact运行测试</p><ul><li><p>实现接口Controller定义控制器是较老的方法</p></li><li><p>缺点：</p><p>一个控制器中只有一个方法，如果多个方法则需要定义多个Controller；</p><p>定义的方式比较麻烦。</p></li></ul><h2 id="3、使用注解-Controller"><a href="#3、使用注解-Controller" class="headerlink" title="3、使用注解@Controller"></a>3、使用注解@Controller</h2><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到控制器，需要在配置文件中声明组件扫描。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>增加一个Controller类，使用注解实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//@Controller注解的类会自动添加到Spring上下文中</span><span class="token comment" spellcheck="true">/*    代表这个类会被Spring接管    被这个注解的类中所有方法，如果返回值是String，并且有具体的页面可以跳转，那么就会被视图解析器解析 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerDemoTest02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//映射访问路径</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerDemoTest02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回视图位置</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test02</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"test02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>运行Tomact测试</p></li></ul><p>两个请求都可以指向一个视图，但是页面显示的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱耦合关系。</p><h2 id="4、RequestMapping"><a href="#4、RequestMapping" class="headerlink" title="4、RequestMapping"></a>4、RequestMapping</h2><p>通过@RequestMapping注解可以定义处理器对于请求的映射规则。@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。value属性值常以<code>/</code>开始。</p><ul><li><p>只注解在方法上面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerDemoTest03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>访问路径：<a href="http://localhost:8080/项目名/t1" target="_blank" rel="noopener">http://localhost:8080/项目名/t1</a></p></li><li><p>同时注解类和方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerDemoTest03</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerDemoTest03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问路径：<a href="http://localhost:8080/项目名/test/t1，需要先指定类的路径，再指定方法的路径。" target="_blank" rel="noopener">http://localhost:8080/项目名/test/t1，需要先指定类的路径，再指定方法的路径。</a></p><p>建议：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token comment" spellcheck="true">//@RequestMapping("/test")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerDemoTest03</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerDemoTest03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>对于@RequestMapping，有一个属性method，用于对被注解方法所处理请求的提交方式进行限制，即只有满足该method属性指定的提交方式的请求，才会执行该注解方法。</p><p>Method属性的取值为RequestMethod枚举常量。常用的为RequestMethod.GET和RequestMethod.POST，分别表示提交方式的匹配规则为GET与POST提交。</p><h2 id="5、RestFul风格"><a href="#5、RestFul风格" class="headerlink" title="5、RestFul风格"></a>5、RestFul风格</h2><p><strong>概念：</strong>RestFul就是一个资源定位及资源操作的风格。不是标椎也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能：</strong></p><p>资源：互联网所有的事物都可以抽象为资源</p><p>资源操作：使用POST、DELTTE、PUT、GET，使用不同方法对资源进行操作，分别对应添加、删除、修改、查询。</p><p><strong>传统方式操作资源：</strong>通过不同的参数来实现不同的效果！方法单一，post 和 get</p><pre><code>http://127.0.0.1/item/queryItem.action?id=1 查询,GEThttp://127.0.0.1/item/saveItem.action 新增,POSThttp://127.0.0.1/item/updateItem.action 更新,POSThttp://127.0.0.1/item/deleteItem.action?id=1 删除,GET或POST</code></pre><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同</p><pre><code>http://127.0.0.1/item/1 查询,GEThttp://127.0.0.1/item 新增,POSThttp://127.0.0.1/item 更新,PUThttp://127.0.0.1/item/1 删除,DELETE</code></pre><p><strong>测试：</strong></p><p>1、新建一个类RestFulController</p><p>2、在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestFulController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//原来：http://localhost:8080/add?a=2&amp;b=3</span>    <span class="token comment" spellcheck="true">//RestFul：http://localhost:8080/add/2/3</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/add/{a}/{b}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"结果为"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、使用路径变量的好处：</p><ul><li>是路径变得更加简洁</li><li>获得参数更加方便，框架会自动进行类型转换</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如果这里访问的路径是/add/1/a，则路径与方法不匹配，则不会是参数，转换失败</li></ul><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET、POST、HEAD、OPTIONS、PUT</p><p>PATCH、DELETE、TRACE等。</p><ul><li><p>增加一个方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//映射访问路径,必须是POST请求</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test02</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>使用浏览器地址栏进行访问默认是get请求，会报错405</p></li><li><p>将POST修改为GET则正常</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//映射访问路径,必须是Get请求</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test02</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>Spring MVC的@RequestMapping注解能够处理HTTP请求的方法，比如GET、PUT、POST、DELETE以及PATCH。</p><p>所有地址栏请求默认都是HTTP GET 类型的。</p><p>方法级别的注解变体有如下几个：组合注解</p><pre><code>@GetMapping@PostMapping@PutMapping@DeleteMapping@PatchMapping</code></pre><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h1 id="五、结果跳转"><a href="#五、结果跳转" class="headerlink" title="五、结果跳转"></a>五、结果跳转</h1><h2 id="1、请求转发"><a href="#1、请求转发" class="headerlink" title="1、请求转发"></a>1、请求转发</h2><ul><li>处理器返回ModelAndView时，需在<code>setViewName()</code>指定的视图前添加<code>forward:</code>，且此时的视图不再与视图解析器一同工作，这样可以在配置了解析器时指定不同位置的视图。视图页面必须写出相对于项目根的路径。forward操作不需要视图解析器。</li><li>处理器方法返回String，在视图路径前加入<code>forward:视图路径</code>。</li></ul><blockquote><p><strong>ModelAndView</strong></p><p>设置ModelAndView对象，根据view的名称，和视图解析器跳转到指定的页面。</p><p>页面：{视图解析器前缀}+viewName+{视图解析器后缀}</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>对应的Controller类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest1</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//返回一个模型视图对象</span>      ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerTest1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> mv<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="2、请求重定向"><a href="#2、请求重定向" class="headerlink" title="2、请求重定向"></a>2、请求重定向</h2><p>在处理器方法返回的视图字符串的前面添加<code>redirect:</code>，则可实现重定向跳转。</p><h2 id="3、ServletAPI"><a href="#3、ServletAPI" class="headerlink" title="3、ServletAPI"></a>3、ServletAPI</h2><p>通过设置ServletAPI，不需要视图解析器。</p><ol><li>通过设置HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p><strong>通过SpringMVC来实现转发和重定向，无需视图解析器</strong></p><p>【测试前，需要将视图解析器注释掉】</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultSpringMVC</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test01"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//转发</span>       <span class="token keyword">return</span> <span class="token string">"/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test02"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//转发</span>       <span class="token keyword">return</span> <span class="token string">"forward:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test03"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//重定向</span>       <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>通过SpringMVC来实现转发和重定向，有视图解析器</strong></p><p>重定向，不需要视图解析器，本质就是重新请求一个新地址，故要注意路径问题。</p><p>可以重定向到另外一个请求实现。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultSpringMVC2</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test01"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//转发</span>       <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test02"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//重定向</span>       <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//return "redirect:hello.do"; //hello.do为另一个请求/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="六、数据处理"><a href="#六、数据处理" class="headerlink" title="六、数据处理"></a>六、数据处理</h1><h3 id="1、参数"><a href="#1、参数" class="headerlink" title="1、参数"></a>1、参数</h3><p>处理器方法可以包含以下4类参数，这些参数会在系统调用时由系统自动赋值，即可在方法内直接使用。</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>请求中所携带的请求参数</li></ul><p><strong>1、请求参数名与该请求处理方法的参数名相同</strong></p><p>提交数据：<a href="http://localhost:8080/t?name=lskj" target="_blank" rel="noopener">http://localhost:8080/t?name=lskj</a></p><p>处理方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2、请求参数名与该请求处理方法的参数名不一致</strong></p><p>使用@RequestParam校正请求参数名。所谓校正请求参数名，是指若请求 URL 所携带的参数名称与处理方法中指定的参数名不相同时，则需在处理方法参数前，添加一个注解@RequestParam(“请求参数名”)，指定请求 URL 所携带参数的名称。该注解是对处理器方法参数进行修饰的。value 属性指定请求参数的名称。</p><p>提交数据：<a href="http://localhost:8080/t?username=lskj" target="_blank" rel="noopener">http://localhost:8080/t?username=lskj</a></p><p>处理方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    @RequestParam("username")：username提交的域的名称    @RequestParam：逐个接收请求参数中，解决请求中参数名形参名不一样的问题        属性：1、value 请求中的参数名称             2、required 是一个boolean，默认是true*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>String name<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>3、对象参数接收</strong></p><p>提交的是一个对象。要求提交的表单域和对象的属性名一致，参数使用对象即可</p><ul><li><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//构造</span>   <span class="token comment" spellcheck="true">//get/set</span>   <span class="token comment" spellcheck="true">//tostring()</span><span class="token punctuation">}</span></code></pre></li><li><p>提交数据：<a href="http://localhost:8080/t?id=1&amp;name=lskj&amp;age=20" target="_blank" rel="noopener">http://localhost:8080/t?id=1&amp;name=lskj&amp;age=20</a></p></li><li><p>处理方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则为NULL。</p></li></ul><h3 id="2、返回值"><a href="#2、返回值" class="headerlink" title="2、返回值"></a>2、返回值</h3><p>使用@Controller注解的处理器的处理器方法，其返回值常用的有4中类型：</p><ul><li>ModelAndView</li><li>String</li><li>void</li><li>返回自定义类型对象</li></ul><p><strong>1、返回ModelAndView</strong></p><p>若处理器方法处理完后，需要跳转到其它资源，且又要在跳转的资源间传递数据，此时处理器方法返回ModelAndView比较适合。若需要返回ModelAndView，则处理器方法中需定义ModelAndView对象。</p><p>在使用时，若该处理器方法只是进行跳转而不传递数据，或只是传递数据而并不向任何资源跳转（如对页面的ajax异步响应），此时若返回ModelAndView，则将总是有一部分多余：要么Model多余，要么View多余。所以此时返回ModelAndView将不合适。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest01</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//返回一个模型视图对象</span>       ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"ControllerTest01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> mv<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2、返回String</strong></p><p>处理器方法返回的字符串可以指定逻辑视图名，通过视图解析器解析可以将其转换为物理视图地址。</p><p>返回内部资源逻辑视图名：若要跳转的资源为内部资源，则视图解析器可以使用InternalResourceViewResolver内部资源视图解析器。此时处理器方法返回的字符串就是要跳转页面的文件名去掉文件扩展名后的部分。这个字符串与视图解析器中的prefix、suffix相结合，即可形成要访问的URL。</p><blockquote><p><strong>ModelMap</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> ModelMap model<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//封装要显示到视图中的数据</span>   <span class="token comment" spellcheck="true">//相当于req.setAttribute("name",name);</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Model</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//封装要显示到视图中的数据</span>   <span class="token comment" spellcheck="true">//相当于req.setAttribute("name",name);</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>区别：</strong></p><ul><li>Model只有几个方法只适合用于存储数据，简化了新手对于Model对象的操作和理解。</li><li>ModelMap继承了LinkedMap，除了实现自身的一些方法，同样继承LinkedMap的方法和特性。</li><li>ModelAndView可以在存储数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</li></ul></blockquote><p><strong>3、返回void</strong></p><p>对于处理器返回void的应用场景，ajax响应。</p><p>若处理器对请求成立后，无需跳转到其它任何资源，此时可以让处理器方法返回void。</p><p><strong>4、返回对象Object</strong></p><p>处理器方法也可以返回Object对象。这个Object可以是Integer、String、自定义对象、Map、List等。但返回的对象不是作为逻辑视图出现的，而是作为直接在页面显示的数据出现的。</p><p>返回对象，需要使用@ResponseBody注解，将转换后的json数据放入到响应体中。</p><h3 id="3、乱码问题"><a href="#3、乱码问题" class="headerlink" title="3、乱码问题"></a>3、乱码问题</h3><p>测试：</p><ol><li><p>编写一个提交表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/e/t<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写对应的处理类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encoding</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/e/t"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>       model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取表单提交的值</span>       <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳转到test页面显示输入的值</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>输入中文测试，出现乱码</p></li></ol><p>以前乱码问题可通过过滤器解决，而SpringMVC提供了一个过滤器，可以在web.xml中配置。</p><p>修改xml文件需要重启服务器。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>有些情况下，这个过滤器对get的支持不是很好。</p><p>处理方法：</p><ol><li><p>修改Tomact配置文件【servlet.xml】：设置编码</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>          <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>          <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>自定义过滤器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 解决get和post请求 全部乱码的过滤器*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericEncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//处理response的字符编码</span>       HttpServletResponse myResponse<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> response<span class="token punctuation">;</span>       myResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 转型为与协议相关对象</span>       HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> request<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 对request包装增强</span>       HttpServletRequest myrequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRequest</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>       chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>myrequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义request对象，HttpServletRequest的包装类</span><span class="token keyword">class</span> <span class="token class-name">MyRequest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> HttpServletRequest request<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//是否编码的标记</span>   <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasEncode<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>   <span class="token keyword">public</span> <span class="token function">MyRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// super必须写</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 对需要增强方法 进行覆盖</span>   <span class="token keyword">public</span> Map <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 先获得请求方式</span>       String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// post请求</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 处理post乱码</span>               request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// get请求</span>           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasEncode<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 确保get手动编码逻辑只运行一次</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>String parameterName <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token keyword">try</span> <span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">// 处理get乱码</span>                               values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                      <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>               hasEncode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token keyword">return</span> parameterMap<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//取一个值</span>   <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取回参数的第一个值</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//取所有值</span>   <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> values<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在web.xml中配置这个过滤器即可。</p></li></ol><h1 id="七、JSON"><a href="#七、JSON" class="headerlink" title="七、JSON"></a>七、JSON</h1><ul><li>JSON（JavaScript Object Notation，JS对象标记）是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在JavaScript语言中，一切都是对象。因此，任何JavaScript支持的类型都可以通过JSON来表示，例如字符串、数字、对象、数组等。</p><p>要求及语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>JSON键值对是用来保存JavaScript对象的一种方式，和JavaScript对象的写法也大同小异，键/值对组合中的键名写在前面，并用双引号<code>""</code>括起，使用冒号<code>:</code>分隔，然后紧接着值。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"lskj"</span><span class="token punctuation">}</span></code></pre><p><strong>JSON是JavaScript对象的字符串表示法，它使用文本表示一个JS对象的信息，本质是一个字符串。</strong></p><p><strong>JSON与JavaScript对象互转</strong></p><p>JSON字符串转换成JavaScript对象，使用<code>JSON.parse()</code>方法;</p><p>JavaScript对象转换成JSON字符串，使用<code>JSON.stringify()</code>方法。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//编写一个JavaScript对象</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">"lskj"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>        sex<span class="token punctuation">:</span><span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将js对象转换成json对象</span>    <span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将JSON对象转换成JavaScript对象</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="1、Controller返回JSON数据"><a href="#1、Controller返回JSON数据" class="headerlink" title="1、Controller返回JSON数据"></a>1、Controller返回JSON数据</h2><p>Jackson是json解析工具。【工具当然不止这一个，比如还有阿里巴巴的fastjson等】</p><p>使用Jackson需要导入它的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>配置SpringMVC需要配置web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动顺序，数字越小，启动越早 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--所有请求都会被springmvc拦截 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>springmvc-servlet.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--解决JSON乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试：</p><ol><li><p>编写一个实体类【用到注解，需要导入Lombok】</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j1"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ResponseBody</span>  <span class="token comment" spellcheck="true">//不会走视图解析器,会直接返回一个字符串</span>   <span class="token keyword">public</span> String <span class="token function">json01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>       ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//创建一个对象</span>       User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>       String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>       <span class="token keyword">return</span> str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="2、乱码问题"><a href="#2、乱码问题" class="headerlink" title="2、乱码问题"></a>2、乱码问题</h2><p>启动Tomact测试，中文处出现乱码，需要设置一下它的编码格式以及返回的类型。</p><ul><li>若在启动Tomact过程中，出现<code>java.lang.ClassNotFoundException:org.springframework.web.filter.CharacterEncodingFilter</code>异常，需在<code>Project Structure</code>中的<code>Artifacts</code>对应的项目中的<code>WEB-INF</code>下添加lib目录，然后添加<code>Library Files</code>（项目依赖）。</li></ul><p>通过<code>@RequestMapping</code>的<code>produces</code>属性来实现，修改代码如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/j1"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span> </code></pre><p>故<strong>使用JSON应处理乱码问题。</strong></p><p>此方法比较麻烦，若项目中有很多请求则需要每一个都添加。</p><p>可以通过Spring配置统一指定，在springmvc的配置文件上添加<code>StringHttpMessageConverter</code>转换配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><p><code>&lt;mvc:annotation-driven&gt;</code>注解驱动，注解驱动实现的功能是完成java对象到json、xml、text、二进制等数据格式的转换。其在加入到springmvc配置文件后，会自动创建HttpMessageConverter接口的7个实现类对象，包括MappingJackson2HttpMessageConverter（使用Jackson工具库中的ObjectMapper实现Java对象转换为json对象的）</p><p>HttpMessageConverter接口：消息转换器。其功能是定义了Java转换为json、xml等数据格式的方法。这个接口有很多的实现类。这些实现类完成Java对象到json，Java对象到xml，Java对象到二进制数据的转换。</p><table><thead><tr><th align="center">HttpMessageConverter接口实现类</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ByteArrayHttpMessageConverter</td><td align="center">负责读取二进制格式的数据和写出二进制格式的数据</td></tr><tr><td align="center">StringHttpMessageConverter</td><td align="center">负责读取字符串格式的数据和写出字符串格式的数据</td></tr><tr><td align="center">ResourceHttpMessageConverter</td><td align="center">负责读取资源文件和写出资源文件</td></tr><tr><td align="center">SourceHttpMessageConverter</td><td align="center">能够读/写来自Http的请求与响应的javax.xml.transform.Source，支持DOMSource，SAXSource，和StreamSource的xml格式</td></tr><tr><td align="center">AllEncompassingFormHttpMessageConverter</td><td align="center">负责处理表单（form）数据</td></tr><tr><td align="center">Jaxb2RootElementHttpMessageConverter</td><td align="center">使用JAXB负责读取和写入xml标签格式的数据</td></tr><tr><td align="center">MappingJackson2HttpMessageConverter</td><td align="center">负责读取和写入json格式的数据。利用Jackson和ObjectMapper读写json数据，操作Object类型数据，可读取application/json，响应媒体类型为application/json</td></tr></tbody></table><h2 id="3、统一解决JSON字符串返回"><a href="#3、统一解决JSON字符串返回" class="headerlink" title="3、统一解决JSON字符串返回"></a>3、统一解决JSON字符串返回</h2><p>在类上直接使用<code>@RestController</code>，该类中所有的方法都只会返回json字符串，不需要在每一方法上添加<code>@ResponseBody</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j1"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//@ResponseBody  //不会走视图解析器,会直接返回一个字符串</span>   <span class="token keyword">public</span> String <span class="token function">json01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//创建一个jackson的对象映射器，用来解析数据</span>       ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//创建一个对象</span>       User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//将我们的对象解析成为json格式</span>       String str <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>       <span class="token keyword">return</span> str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、测试集合输出以及输出时间对象"><a href="#4、测试集合输出以及输出时间对象" class="headerlink" title="4、测试集合输出以及输出时间对象"></a>4、测试集合输出以及输出时间对象</h2><p><strong>集合输出：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ObjectMapper mapper = new ObjectMapper();</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"赵二"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        String str = mapper.writeValueAsString(userList);        return str;         */</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>输出时间对象：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        ObjectMapper mapper = new ObjectMapper();        Date date = new Date();        //自定义日期格式        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");        return  mapper.writeValueAsString(sdf.format(date));        */</span>    ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不使用时间戳的方式</span>    mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>默认日期格式会是一串数字，是从1970年1月1日到当前日期的毫秒数</li><li>Jackson默认是会把时间转换成<code>timestamps</code>（时间戳）形式</li></ul><h2 id="5、抽象为工具类"><a href="#5、抽象为工具类" class="headerlink" title="5、抽象为工具类"></a>5、抽象为工具类</h2><p>经常使用的话，可以将一些代码封装到一个工具类中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializationFeature<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSONUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJSON</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJSON</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span>String dataFormat<span class="token punctuation">)</span><span class="token punctuation">{</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不使用时间戳的方式</span>        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>dataFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span>sdf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用工具类，代码就更加简洁了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSONUtils<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"赵二"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSONUtils<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="6、FastJson"><a href="#6、FastJson" class="headerlink" title="6、FastJson"></a>6、FastJson</h2><p>fastjson.jar是阿里巴巴开发的一款专门用于Java开发的包，可以方便地实现json对象与JavaBean对象的转换，实现JavaBean对象json字符串的转换，实现json对象与json字符串的转换。</p><p>fastjson三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化</li></ul><p><strong>测试：</strong></p><p>首先导入依赖，然后需在项目结构中添加依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/j6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">json06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"赵二"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******Java对象 转 JSON字符串*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(list)==>"</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJSONString(user1)==>"</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON字符串 转 Java对象*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User jp_user1<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(str2,User.class)==>"</span><span class="token operator">+</span>jp_user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** Java对象 转 JSON对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject jsonObject1 <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(JSONObject) JSON.toJSON(user2)==>"</span><span class="token operator">+</span>jsonObject1<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n****** JSON对象 转 Java对象 ******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User to_java_user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObject1<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.toJavaObject(jsonObject1, User.class)==>"</span><span class="token operator">+</span>to_java_user<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="八、整合SSM框架"><a href="#八、整合SSM框架" class="headerlink" title="八、整合SSM框架"></a>八、整合SSM框架</h1><h2 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h2><h3 id="1-1、数据库环境"><a href="#1-1、数据库环境" class="headerlink" title="1-1、数据库环境"></a>1-1、数据库环境</h3><p>创建一个存放书籍数据的数据库表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'书id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'书名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span><span class="token keyword">KEY</span> <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span>  <span class="token keyword">INTO</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'从入门到放弃'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MySQL'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'从删库到跑路'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Linux'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'从进门到进牢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-2、基本环境搭建"><a href="#1-2、基本环境搭建" class="headerlink" title="1-2、基本环境搭建"></a>1-2、基本环境搭建</h3><ol><li><p>新建一个Maven项目-ssmbuild，添加web支持。</p></li><li><p>导入相关的pom依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssmbuild<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--依赖：junit，数据库驱动，连接池，Servlet，JSP，Mybatis，mybatis-spring，spring...--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Junit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池：c3p0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Servlet - JSP --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Mybatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Spring--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--静态资源导出问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>建立基本结构和配置框架</p><ul><li><p>com.lskj.pojo</p></li><li><p>com.lskj.dao</p></li><li><p>com.lskj.service</p></li><li><p>com.lskj.controller</p></li><li><p>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h2 id="2、Mybatis层编写"><a href="#2、Mybatis层编写" class="headerlink" title="2、Mybatis层编写"></a>2、Mybatis层编写</h2><p>1、数据库配置文件database.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true"># 如果使用的是MySQL8.0+，需增加一个时区配置：&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>2、IDEA连接数据库</p><p>3、编写Mybatis的核心配置文件：mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--标椎的日志工厂的实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源，交给Spring去做--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>4、编写数据库对应的实体类com.lskj.pojo.Books</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookID<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> String detail<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5、编写Dao层的Mapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一本书</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除一本书</span>    <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookID"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新一本书</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询一本书</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookID"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询全部的书</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据书名查询</span>    Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookName"</span><span class="token punctuation">)</span> String bookName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>6、编写接口对应的Mapper.xml文件。【需要导入Mybatis的包】</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into ssmbuild.books (bookName,bookCounts,detail)        values (#{bookName},#{bookCounts},#{detail});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from ssmbuild.books where bookID = #{bookID};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update ssmbuild.books        set bookName = #{bookName},bookCount = #{bookCounts},detail = #{detail}        where bookId = #{bookID};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from ssmbuild.books        where bookID = #{bookID};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from ssmbuild.books;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from ssmbuild.books where bookName = #{bookName};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>7、编写Service层的接口和实现类</p><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一本书</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除一本书</span>    <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新一本书</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询一本书</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询全部的书</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span>String bookName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BookMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//service调dao层：组合Dao</span>    <span class="token keyword">private</span> BookMapper bookMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookMapper</span><span class="token punctuation">(</span>BookMapper bookMapper<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">deleteBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BookServiceImpl:updateBook=>"</span><span class="token operator">+</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Books <span class="token function">queryBookByName</span><span class="token punctuation">(</span>String bookName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookByName</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、Spring层"><a href="#3、Spring层" class="headerlink" title="3、Spring层"></a>3、Spring层</h2><ol><li><p>配置Spring整合Mybatis，数据源使用c3p0连接池</p></li><li><p>编写Spring整合Mybatis的相关配置文件：spring-dao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联数据库配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--连接池    dbcp：半自动化操作，不能自动连接    c3p0：自动化操作（自动化的加载配置文件，并且可以自动设置到对象中！）    druid：    hikari：    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--c3p0连接池的私有属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--关闭连接后不自动commit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--获取连接超时时间--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--当获取连接失败重试次数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--绑定Mybatis的配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置dao接口扫描包，动态的实现Dao接口可以注入到Spring容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入sqlSessionFactory--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--要扫描的dao包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>Spring整合service层：spring-service.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/aop       https://www.springframework.org/schema/aop/spring-aop.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1、扫描service下的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--2、将所有业务类注入到Spring，可以通过配置，或者注解实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3、声明式事务配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--4、aop事务支持--></span>    <span class="token comment" spellcheck="true">&lt;!--结合AOP实现事务的织入--></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务通知：--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--给那些方法配置事务--></span>        <span class="token comment" spellcheck="true">&lt;!--配置事务的传播特性：new propagation=  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务切入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.lskj.dao.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="4、SpringMVC层"><a href="#4、SpringMVC层" class="headerlink" title="4、SpringMVC层"></a>4、SpringMVC层</h2><p>1、web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--注意:这里加载的是总的配置文件，若不是后续会报错：bean不存在！--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--乱码过滤--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>2、spring-mvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1、注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--2、静态资源过滤--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--3、扫描包：Controller--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--4、视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>3、Spring配置整合文件：applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="5、Controller、视图层编写"><a href="#5、Controller、视图层编写" class="headerlink" title="5、Controller、视图层编写"></a>5、Controller、视图层编写</h2><p>1、BookController类编写，方法一：查询全部书籍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BookService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BookServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//controller调service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"BookServiceImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// = new BookServiceImpl();</span>    <span class="token comment" spellcheck="true">//查询全部的书籍，并且返回到一个书籍展示页面</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/allBook"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、编写首页index.jsp</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">a</span><span class="token punctuation">{</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">h3</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">38</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">38</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> deepskyblue<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/allBook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>进入书籍页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3、书籍列表页面allBook.jsp</p><p>Bootstrap中文网：<a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></p><p>Bootstrap可视化布局：<a href="https://www.bootcss.com/p/layoutit/" target="_blank" rel="noopener">https://www.bootcss.com/p/layoutit/</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/jsp/jstl/core<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>书籍展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--BootStrap美化界面--%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>书籍列表————显示所有书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--toAddBook--%</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/toAddBook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/allBook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示全部书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-4 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--查询书籍--%</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-inline<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/queryBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span> right</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${error}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入要查询的书籍名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>查询<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table table-hover table-striped<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--书籍从数据库中查询出来，从list中遍历出来：foreach--%</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${book.bookID}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${book.bookName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${book.bookCounts}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${book.detail}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/toUpdate?id<span class="token punctuation">=</span>${book.bookID}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                                 <span class="token entity" title="&nbsp;">&amp;nbsp;</span>|<span class="token entity" title="&nbsp;">&amp;nbsp;</span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/deleteBook/${book.bookID}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> </code></pre><p>4、BookController类编写，方法二：添加书籍</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//跳转到增加书籍页面</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toAddBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toAddPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"addBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//添加书籍的请求</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"addBook=>"</span><span class="token operator">+</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重定向到 @RequestMapping("/allBook")请求</span><span class="token punctuation">}</span></code></pre><p>5、添加书籍页面：addBook.jsp</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>新增书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--BootStrap美化界面--%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>新增书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/addBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookCounts<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍描述：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>6、BookController类编写，方法三：修改书籍</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//跳转到修改页面</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toUpdate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toUpdatePage</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"QBook"</span><span class="token punctuation">,</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"updateBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改书籍</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"updateBook=>"</span><span class="token operator">+</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    bookService<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7、修改书籍页面：updateBook.jsp</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>修改书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--BootStrap美化界面--%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>修改书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/book/addBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--出现的问题：提交了修改的SQL请求，但是修改失败--%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--看SQL语句，能否执行成功：SQL执行失败，修改未完成--%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--前端传递隐藏域--%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookID<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${QBook.bookID}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${QBook.bookName}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookCounts<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${QBook.bookCounts}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>书籍描述：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${QBook.detail}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>8、BookController类编写，方法四：删除书籍</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//删除书籍</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteBook/{bookID}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"bookID"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    bookService<span class="token punctuation">.</span><span class="token function">deleteBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>9、BookController类编写，方法四：根据书名查询书籍（搜索）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据书名查询书籍</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">queryBook</span><span class="token punctuation">(</span>String queryBookName<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookByName</span><span class="token punctuation">(</span>queryBookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Books<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>books <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"未查到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="九、AJAX"><a href="#九、AJAX" class="headerlink" title="九、AJAX"></a>九、AJAX</h1><ul><li>AJAX=Asynchronus JavaScript and XML（异步的JavaScript和XML）。</li><li>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li><li>Ajax不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的web应用程序的技术。</li></ul><h2 id="1、jQuery-ajax"><a href="#1、jQuery-ajax" class="headerlink" title="1、jQuery.ajax"></a>1、jQuery.ajax</h2><p>Ajax的核心是XMLHTTPRequest对象（XHR）。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery提供多个与Ajax有关的方法。</p><p>通过jQuery Ajax方法，能够使用HTTP GET和HTTP POST从远程服务器上请求文本、HTML、XML或JSON，同时能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery不是生产者，而是大自然的搬运工。</p><p>jQuery Ajax本质就是XMLHTTPRequest，对它进行了封装，方便调用。</p><pre><code>jQuery.ajax(...)      部分参数：            url：请求地址            type：请求方式，GET、POST（1.9.0之后用method）        headers：请求头            data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")          async：是否异步        timeout：设置请求超时时间（毫秒）      beforeSend：发送请求前执行的函数(全局)        complete：完成之后执行的回调函数(全局)        success：成功之后执行的回调函数(全局)          error：失败之后执行的回调函数(全局)        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型        dataType：将服务器端返回的数据转换成指定类型          "xml": 将服务器端返回的内容转换成xml格式          "text": 将服务器端返回的内容转换成普通文本格式          "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。        "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式          "json": 将服务器端返回的内容转换成相应的JavaScript对象        "jsonp": JSONP 格式使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><p><strong>使用原始的HttpServletResponse处理</strong></p><p>1、配置web.xml和springmvc的配置文件[applicationContext.xml]</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--静态资源过滤--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jSON乱码问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>2、编写一个AjaxController类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a1</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1:param=>"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、导入jQuery（可使用在线CDN，也可下载导入）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>4、编写index.jsp测试</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a1"</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--失去焦点时，发起一个请求到后台--%</span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>5、启动Tomact测试，打开浏览器控制台，当鼠标离开输入框时，可以看到发出了一个ajax请求，是后台返回的结果，测试成功</p><p><strong>SpringMVC实现</strong></p><p>实体类User</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取一个集合对象，展示到前端页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加数据</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前端页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                $.post(url,param[可以省略],success)                 */</span>                $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"${pageContext.request.contextPath}/a2"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//console.log(data);</span>                    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;tr>"</span><span class="token operator">+</span>                            <span class="token string">"&lt;td>"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token operator">+</span>                            <span class="token string">"&lt;td>"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token operator">+</span>                            <span class="token string">"&lt;td>"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token operator">+</span><span class="token string">"&lt;/td"</span><span class="token operator">+</span>                            <span class="token string">"&lt;/tr>"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加载数据<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--数据：后台--%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>注册提示效果</strong></p><p>编写AjaxController类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">a3</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"用户名有误！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pwd <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"密码有误！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前端页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//console.log(data);</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token string">"pwd"</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//console.log(data);</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwdInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>获取百度接口</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSONP百度搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">       <span class="token selector"><span class="token id">#q</span></span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>           <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>           <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span></span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">520</span>px<span class="token punctuation">;</span>           <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>           <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span> li</span><span class="token punctuation">{</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span> li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>           <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f60</span><span class="token punctuation">;</span>           <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token comment" spellcheck="true">// 2.步骤二</span>       <span class="token comment" spellcheck="true">// 定义demo函数 (分析接口、数据)</span>       <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 如果搜索数据存在 把内容添加进去</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 隐藏掉的ul显示出来</span>               Ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 搜索到的数据循环追加到li里</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 循环的li写入ul</span>               Ul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 1.步骤一</span>       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 获取输入框和ul</span>           <span class="token keyword">var</span> Q <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 事件鼠标抬起时候</span>           Q<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 如果输入框不等于空</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span>                   <span class="token comment" spellcheck="true">// 创建标签</span>                   <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//给定要跨域的地址 赋值给src</span>                   <span class="token comment" spellcheck="true">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span>                   script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'&amp;cb=demo'</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 将组合好的带src的script标签追加到body里</span>                   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="十、异常处理"><a href="#十、异常处理" class="headerlink" title="十、异常处理"></a>十、异常处理</h1><p>SpringMVC框架处理异常的常用方式：</p><ul><li><p>使用系统定义好的异常处理器SimpleMappingExceptionResolver</p></li><li><p>使用自定义异常处理器</p></li><li><p>使用注解处理异常</p></li></ul><p>springmvc框架采用的是统一、全局的异常处理。把controller中的所有异常处理都集中到一个地方。采用的是aop的思想。把业务逻辑和异常处理代码分开，解耦合。</p><p>使用两个注解：</p><ul><li><p>@ExceptionHandler，使用该注解可以将一个方法指定为异常处理方法。该注解只有一个可选属性value，为一个<strong>Class&lt;?&gt;</strong>数组，用于指定该注解的方法所要处理的异常类，即索要匹配的异常。</p></li><li><p>@ControllerAdvice，是给控制器对象增强功能的。使用该注解修饰的类可以使用@ExceptionHandler。当使用@RequestMapping注解修饰的方法抛出异常时，会执行@ControllerAdvice修饰类中的异常处理方法。</p><p>@ControllerAdvice是使用@Component注解修饰的，可以<code>&lt;context:component-scan&gt;</code>扫描到@ControllerAdvice所在的类路径（包名），创建对象。</p></li></ul><p><strong>异常处理步骤</strong>：</p><p>1、新建maven web项目</p><p>2、加入依赖</p><p>3、新建一个自定义异常类（可再定义它的子类）</p><p>4、在controller抛出异常</p><p>5、创建一个普通类，作用是全局异常处理类</p><ul><li>在类上面加入@ControllerAdvice</li><li>在类中定义方法，方法的上面加入@ExceptionHandler</li></ul><p>6、创建处理异常的视图页面</p><p>7、创建springmvc的配置文件</p><ul><li>组件扫描器，扫描@Controller</li><li>组件扫描器，扫描@ControllerAdvic所在的包名</li><li>声明注解驱动</li></ul><h1 id="十一、拦截器"><a href="#十一、拦截器" class="headerlink" title="十一、拦截器"></a>十一、拦截器</h1><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。开发中可以自定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><ul><li>过滤器<ul><li>Servlet规范中的一部分，任何java web工程都可以使用</li><li>由tomcat服务器创建的对象</li><li>在url-pattern中配置了<code>/*</code>之后，可以对所有要访问的资源进行拦截</li><li>用来过滤请求参数，设置编码字符集等</li></ul></li><li>拦截器<ul><li>拦截器是SpringMVC框架自已的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问控制器方法，如果访问的是jsp/html/css/image/js等资源文件是不会进行拦截的</li><li>拦截用户的请求，对请求做判断处理</li></ul></li></ul><h2 id="1、自定义拦截器"><a href="#1、自定义拦截器" class="headerlink" title="1、自定义拦截器"></a>1、自定义拦截器</h2><p>自定义拦截器，必须实现<code>HandlerInterceptor</code>接口。</p><ol><li><p>新建一个Moudle，并添加web支持</p></li><li><p>配置web.xml和springmvc-servlet.xml文件</p></li><li><p>编写一个拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在请求处理的方法之前执行</span>    <span class="token comment" spellcheck="true">//return true;  执行下一个拦截器，放行</span>    <span class="token comment" spellcheck="true">//return false;不执行下一个拦截器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========处理前=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在请求处理方法执行后执行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========处理后=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//DispatcherServlet处理后执行：做清理工作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========清理=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在SpringMVC的配置文件中配置拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--拦截器配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        指定拦截的请求uri地址            /*包括当前路径下的请求            /**包括这个请求下面的所有请求（包括路径及其子路径）        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--bean配置的就是拦截器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.config.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写一个Controller接收请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/t1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestController中的test方法执行了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>前端</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/t1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>拦截器测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>启动Tomact测试</p></li></ol><h2 id="2、验证用户是否登录"><a href="#2、验证用户是否登录" class="headerlink" title="2、验证用户是否登录"></a>2、验证用户是否登录</h2><p><strong>实现思路</strong></p><ul><li>有一个登录页面，需要写一个controller访问页面</li><li>登录页面有一个提交表单的动作，需要在controller中处理。判断用户名、密码是否正确，如果正确，往session中写入用户信息</li><li>拦截用户请求，判断用户是否登录，如果用户已经登录，放行；若未登录，跳转到登录页面。</li></ul><ol><li><p>编写登录页面login.jsp</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--在web-inf下的所有页面或者资源，只能通过controller，或者Servlet进行访问--%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/user/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写Controller处理请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/main"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//跳转到登录页面</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登录提交</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login=>username="</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把用户信息存在session中</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注销，退出登录</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goOut"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goOut</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//session.invalidate();</span>        session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写一个登录成功的页面main.jsp，即主页</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>${username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/user/goOut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>在index页面上测试跳转，启动Tomact测试，未登录也可以进入主页。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/user/goLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/user/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写用户登录拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行：判断什么情况下登录</span>        <span class="token comment" spellcheck="true">//登录页面=>放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"goLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第一次登录，也是没有session</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断什么情况下没有登录</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在SpringMVC的配置文件中注册拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.config.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span></code></pre></li><li><p>再次启动Tomact测试</p></li></ol><p>当有多个拦截器时，形成拦截器链。拦截器的执行顺序，与其注册顺序一致。当某一个拦截器的perHandle()方法返回true并执行到时，会向一个专门的方法栈中放入该拦截器的afterCompletion()方法。</p><p>多个拦截器中方法与处理器方法的执行顺序：</p><p><img src="/archives/319c21eb/image-20210420114430346.png" alt=""></p><p>从图中可以看出，只要有一个preHandle()方法返回false，则上部的执行链将被断开，其后续的处理器方法与postHandle()方法将无法执行。但无论执行链执行情况怎样，只要方法栈中有方法，即执行链中只要有preHandle()方法返回true，就会执行方法咱中的afterComletion()方法。最终都会给响应。</p><p>换一种表现方式，也可以像如下理解。</p><p><img src="/archives/319c21eb/image-20210420115549698.png" alt=""></p><h1 id="十二、文件上传和下载"><a href="#十二、文件上传和下载" class="headerlink" title="十二、文件上传和下载"></a>十二、文件上传和下载</h1><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为post，并将enctype设置为multipart/form-data。只有这样，浏览器才会百用户选择的文件以二进制形式发送给服务器。</p><p>表单enctype属性：</p><ul><li>application/x-www=from-urlencoded：默认方式，只处理表单域中的value属性值，采用这种编码方式的表单会将表单域中的值处理成url编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为“+”号外，其它字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。</p><p>在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h2 id="1、文件上传"><a href="#1、文件上传" class="headerlink" title="1、文件上传"></a>1、文件上传</h2><ol><li><p>导入文件上传的jar包，<code>commons-fileupload</code>，maven会自动导入它的依赖包<code>commons-io</code>包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--文件上传--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--servlet-api导入高版本的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置bean：multipartResolver，<strong>这里bena的id必须为：multipartResolver ， 否则上传文件会报400的错误</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--文件上传配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul></li><li><p>编写前端页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>Controller</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>CommonsMultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span>    <span class="token comment" spellcheck="true">//批量上传CommonsMultipartFile则为数组即可</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> CommonsMultipartFile file <span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件名 : file.getOriginalFilename();</span>        String uploadFileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果文件名为空，直接回到首页！</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uploadFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件名 : "</span><span class="token operator">+</span>uploadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传路径保存设置</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果路径不存在，创建一个</span>        File realPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>realPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            realPath<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件保存地址："</span><span class="token operator">+</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件输入流</span>        OutputStream os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span>uploadFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件输出流</span>        <span class="token comment" spellcheck="true">//读取写出</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试上传文件</p></li></ol><p><strong>采用file.Transto来保存上传的文件</strong></p><ol><li><p>编写Controller</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*     * 采用file.Transto 来保存上传的文件     */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String  <span class="token function">fileUpload2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> CommonsMultipartFile file<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//上传路径保存设置</span>    String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File realPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>realPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        realPath<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//上传文件地址</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件保存地址："</span><span class="token operator">+</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span>    file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>修改前端表单提交地址</p></li><li><p>测试</p></li></ol><h2 id="2、文件下载"><a href="#2、文件下载" class="headerlink" title="2、文件下载"></a>2、文件下载</h2><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">downloads</span><span class="token punctuation">(</span>HttpServletResponse response <span class="token punctuation">,</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//要下载的文件地址</span>   String  path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String  fileName <span class="token operator">=</span> <span class="token string">"test.text"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//1、设置response 响应头</span>   response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置页面不缓存,清空buffer</span>   response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符编码</span>   response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"multipart/form-data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//二进制传输数据</span>   <span class="token comment" spellcheck="true">//设置响应头</span>   response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span>           <span class="token string">"attachment;fileName="</span><span class="token operator">+</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2、 读取文件--输入流</span>   InputStream input<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//3、 写出文件--输出流</span>   OutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//4、执行 写出操作</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>       out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前端：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/download<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进行下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1aE41167Tu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说   &lt;/a&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1sk4y167pD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;动力节点&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://lskjwp.gitee.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://lskjwp.gitee.io/tags/Spring/"/>
    
      <category term="MVC" scheme="https://lskjwp.gitee.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/52ba89f4/"/>
    <id>https://lskjwp.gitee.io/archives/52ba89f4/</id>
    <published>2020-08-20T07:36:33.000Z</published>
    <updated>2021-11-14T07:16:13.488Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1WE411d7Dv" target="_blank" rel="noopener">B站 遇见狂神说  </a><a href="https://www.bilibili.com/video/BV1nz4y1d7uy/" target="_blank" rel="noopener">动力节点</a></p><a id="more"></a><p>Spring框架是Java应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括IoC(Inversion of Control，控制反转)和AOP(Aspect Oriented Programming，面向切面编程)。</p><h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><h2 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1-1、简介"></a>1-1、简介</h2><ul><li>2002年，首次推出Spring框架的雏形：interface21框架。</li><li>Spring框架即以interface21框架为基础经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版。</li><li>Rod Johnson，Spring Framework创始人。</li><li>Spring理念：使现有的技术实现更加容易，本身是一个大杂烩，整合了现有的技术框架。</li></ul><ul><li>SSH：Struts2+Spring+Hibernate</li><li>SSM：Spring MVC+Spring+Mybatis</li></ul><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p><p>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p><img src="/archives/52ba89f4/Spring.svg" alt=""></p><h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1-2、优点"></a>1-2、优点</h2><p>Spring是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架。</p><ul><li>Spring是一个开源免费的框架（容器）。</li><li>Spring是一个轻量级的、非入侵式的框架。</li><li>控制反转（IOC），面向切面编程（AOP）。</li><li>支持事务的处理，对框架整合的支持。</li></ul><blockquote><p><strong>轻量</strong></p><p>Spring框架使用的jar包都比较小，一般在1M以下或者几百K。Spring核心功能所需的jar包总共在3M左右。</p><p>Spring框架运行占用的资源少，运行效率高。不依赖其它jar包。</p></blockquote><h2 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1-3、组成"></a>1-3、组成</h2><p><strong>Spring七大模块</strong></p><p><img src="/archives/52ba89f4/Spring%E4%B8%83%E5%A4%A7%E6%A8%A1%E5%9D%97.gif" alt=""></p><h2 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1-4、拓展"></a>1-4、拓展</h2><p>Spring Boot：构建一切</p><p>Spring Cloud：协调一切</p><p>Spring Cloud Data Flow：连接一切</p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于Spring Boot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于Spring Boot实现的</li></ul></li></ul><h1 id="二、IOC理论推导"><a href="#二、IOC理论推导" class="headerlink" title="二、IOC理论推导"></a>二、IOC理论推导</h1><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>使用set接口实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// = new UserDaoOracleImpl();</span><span class="token comment" spellcheck="true">//利用set进行多态实现值的注入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>UserDao userDao = new UserDaoOracleImpl();</code>程序是主动创建对象。</li><li>使用<code>set注入</code>后，程序不再具有主动性，而是变成了被动接受对象。</li></ul><p>这种思想，从本质上解决了问题，我们不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注在业务的实现上，这是IOC的原型。</p><p><img src="/archives/52ba89f4/image-20200708192951406.png" alt=""></p><h2 id="2-1、IOC本质"><a href="#2-1、IOC本质" class="headerlink" title="2-1、IOC本质"></a>2-1、IOC本质</h2><p><strong>控制反转IOC（Inversion of Control），是一种设计思想，DI（依赖注入Dependency Injection）是实现IOC的一种方法，</strong>也有人认为DI只是IOC的另一种说法。没有IOC的程序中，我们使用面向对象编程，对象的创建与对象的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方（所谓控制反转就是获得依赖的对象的方式反转了）。</p><p>● 依赖查找：DL ( Dependency Lookup ), 容器提供回调接口和上下文环境给组件。</p><p>● 依赖注入：DI (Dependency Injection)，程序代码不做定位查询，这些工作由容器自行完成。</p><p><strong>依赖注入</strong>：只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建、赋值、查找都由容器内部实现。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法式依赖注入（Dependency Injection，DI）。</strong></p><p>Spring底层创建对象，使用的是反射机制。</p><h2 id="2-2、IOC的体现"><a href="#2-2、IOC的体现" class="headerlink" title="2-2、IOC的体现"></a>2-2、IOC的体现</h2><p><strong>Servlet</strong></p><ol><li><p>创建类继承HTTPServlet</p></li><li><p>在web.xml中注册Servlet，使用</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>myservlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.lskj.controller.MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span></code></pre></li><li><p>没有创建Servlet对象。<strong>没有MyServlet myservlet = new MyServlet();</strong></p></li><li><p>Servlet是Tomact服务器创建的，Tomact也称为容器。</p><p>Tomact作为容器，里面存放的有Servlet对象，Listener，Filter对象</p></li></ol><p><img src="/archives/52ba89f4/image-20210411204802633.png" alt=""></p><h1 id="三、HelloSpring"><a href="#三、HelloSpring" class="headerlink" title="三、HelloSpring"></a>三、HelloSpring</h1><blockquote><p>实现步骤：</p><p>1、导入spring依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>（导入junit依赖，方便测试）</p><p>3、创建类：接口，实现类，没有接口的类</p><p>4、创建spring需要使用的配置文件，使用<code>&lt;bean&gt;</code>声明对象</p><p>5、使用容器中的对象，通过ApplicationContext接口和它的实现类ClassPathXmlApplicationContext的方法getBean()</p></blockquote><ol><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello{"</span> <span class="token operator">+</span>                <span class="token string">"str='"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写Spring文件beans.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version = "1.0" encoding = "UTF-8"?></span>&lt;beans xmlns = "http://www.springframework.org/schema/beans"       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation = "http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">    <span class="token comment" spellcheck="true">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean        类型 变量名 = new 类型();        Hello hello = new Hello();        bean = 对象    new Hello();        id = 变量名        class = new 的对象（类的全限定名称，不能时接口，因为spring时反射机制创建对象，必须使用类）;        property 相当于给对象中的属性设置一个值！        Spring是把创建好的对象放入到map中，Spring框架有一个map存放对象。        springMap.put(id的值,对象);        例如：springMap.put("hello",new Hello());        一个bean标签声明一个对象。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> test01 <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Spring的上下文对象（spring默认的创建对象的时间：在创建spring的容器时，会创建配置文件中的所有的对象）</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对象现在都在Spring中管理，需要使用，直接去里面取出来就可以了</span>        <span class="token comment" spellcheck="true">//getBean：参数即为Spring配置文件中bean的id</span>        Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 获取spring容器中Java对象的信息    */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> test02<span class="token punctuation">{</span>        String config <span class="token operator">=</span> <span class="token string">"beans.xml"</span><span class="token punctuation">;</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用spring提供的方法，获取容器中定义的对象的数量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//容器中每个定义的对象的名称</span>        String names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String name<span class="token operator">:</span>names<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li><p>Hello对象是谁创建的？</p><p>hello对象由Spring创建</p></li><li><p>Hello对象的属性是怎样设置的？</p><p>hello对象的属性是由Spring容器设置的</p></li></ul><p>这个过程叫做控制反转：</p><p>​        <strong>控制：</strong>谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。【创建对象，对象的赋值，对象之间的关系管理】</p><p>​        <strong>反转：</strong>程序本身不创建对象，而是变成被动的接收对象。【把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。由容器代替开发人员管理对象。创建对象，给属性赋值。】</p><p>​        <strong>依赖注入：</strong>就是利用set方法来进行注入的。</p><pre><code>正转：由开发人员在代码中，使用new构造方法创建对象，开发人员主动管理对象。    public static void main(String[] args){        Student student = new Student; //在代码中，创建对象。--&gt;正转    }Java中创建对象有哪些方式？    1.构造方法    2.反射    3.序列化    4.克隆    5.IOC：容器创建对象    6.动态代理</code></pre><p>IOC是一种编程思想，由主动的编程变成被动的接收。</p><p>现在，<strong>彻底不需要改动程序，要实现不同的操作，只需要在XML配置文件中进行修改，所谓的IOC，就是对象由Spring来创建，管理，装配。</strong></p><h1 id="四、IOC创建对象的方式"><a href="#四、IOC创建对象的方式" class="headerlink" title="四、IOC创建对象的方式"></a>四、IOC创建对象的方式</h1><ol><li><p>使用无参构造创建对象，默认。</p></li><li><p>使用有参构造创建对象。</p><ul><li><p>下标赋值</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第一种，下标赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浅笑安然<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>类型</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第二种：通过类型创建，不建议使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lskj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>参数名</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第三种：直接通过参数名来设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lskj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><p>在配置文件加载的时候，容器中管理的对象就已经初始化了。</p><h1 id="五、Spring配置"><a href="#五、Spring配置" class="headerlink" title="五、Spring配置"></a>五、Spring配置</h1><h2 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5-1、别名"></a>5-1、别名</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--别名，如果添加了别名，也可以使用别名获取到这个对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5-2、Bean的配置"></a>5-2、Bean的配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        id：bean的唯一标识，相当于对象名        class：bean对象所对应的全限定名：包名+类型        name：也是别名，但name高级些，可以同时取多个别名（逗号，空格，分号分割，常用逗号）    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User02<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userNew<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>心若浮沉<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5-3、import"></a>5-3、import</h2><p>import一般用于团队开发，它可以将多个配置文件，导入合并为一个。</p><p>假设，现项目中有多个人开发，每个人负责不同的类开发，不同的类需要注册到不同的bean中，可以利用import将所有人的beans.xml合并为一个。</p><ul><li><p>beans.xml</p></li><li><p>beans2.xml</p></li><li><p>beans3.xml</p></li><li><p>applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--语法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>其它配置文件路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--    classpath: 表示类路径（class文件所在的目录）    *：通配符，表示任意字符，主的配置文件名称不能包含在通配符的范围内。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:xx/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><p>使用时，直接使用总的配置即可。</p><h1 id="六、依赖注入"><a href="#六、依赖注入" class="headerlink" title="六、依赖注入"></a>六、依赖注入</h1><h2 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6-1、构造器注入"></a>6-1、构造器注入</h2><p>IOC创建对象的方式提及。</p><p>1、<code>&lt;constructor-arg&gt;</code>的name属性，name表示构造方法的形参名。</p><p>2、<code>&lt;constructor-arg&gt;</code>的index属性，表示构造方法形参的位置。</p><h2 id="6-2、set方式注入"><a href="#6-2、set方式注入" class="headerlink" title="6-2、set方式注入*"></a>6-2、set方式注入*</h2><ul><li>依赖注入：set注入。spring调用类的set方法实现属性赋值，也称设值注入。<ul><li>依赖：bean对象的创建依赖于容器。</li><li>注入：bean对象中的所有属性，由容器来注入。</li></ul></li></ul><blockquote><p>1、简单类型的set注入。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性的值<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>2、引用类型的set注入。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性名<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean的id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></blockquote><p>【环境搭建】</p><ol><li><p>复杂类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>真实测试对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbys<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//get</span>    <span class="token comment" spellcheck="true">//set</span>    <span class="token comment" spellcheck="true">//toString</span><span class="token punctuation">}</span></code></pre></li><li><p>beans.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version = "1.0" encoding = "UTF-8"?></span>&lt;beans xmlns = "http://www.springframework.org/schema/beans"       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation = "http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--第一种：普通值注入 value--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>若实体类没有某个属性，但是存在对应的一个set方法，如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Spring会调用类的无参数构造方法创建对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"email = "</span><span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get、set和toString方法</span><span class="token punctuation">}</span></code></pre><p>配置文件bean.xml放在resources/config目录下</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据命名规范，执行setEmail(String email)方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String config <span class="token operator">=</span> <span class="token string">"config/bean.xml"</span><span class="token punctuation">;</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user对象 = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现可正常运行。运行结果如下：</p><pre><code>Spring会调用类的无参数构造方法创建对象eamil = zhangsan@qq.comuser对象 = User{id='1',name='张三'}</code></pre></blockquote><p>完善注入信息</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version = "1.0" encoding = "UTF-8"?></span>&lt;beans xmlns = "http://www.springframework.org/schema/beans"       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation = "http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--普通值注入 value--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--bean注入 ref  引用类型的set注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adderss<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--数组注入 ref--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>斗罗大陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>斗破苍穹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>王者归来<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--List--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>跑步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>打球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>K歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Map--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>01234567899876543210<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12345678900987654321<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Set--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>英雄联盟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>王者荣耀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>QQ飞车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--null--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Properties--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20200709<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>李华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adderss<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx省xxx市xxx区xxx街道<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6-3、拓展方式注入"></a>6-3、拓展方式注入</h2><p>可以使用p命令空间和c命令空间进行注入。</p><p>使用：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version = "1.0" encoding = "UTF-8"?></span>&lt;beans xmlns = "http://www.springframework.org/schema/beans"       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"       xmlns:p="http://www.springframework.org/schema/p"       xmlns:c="http://www.springframework.org/schema/c"       xsi:schemaLocation = "http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">    <span class="token comment" spellcheck="true">&lt;!--p命名空间注入，可以直接注入属性的值：property--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--c命名空间注入，通过构造器注入：construct-args--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"userbeans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>p命名和c命名空间不能直接使用，需要导入xml约束。</p><pre class=" language-xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><h2 id="6-4、bean的作用域"><a href="#6-4、bean的作用域" class="headerlink" title="6-4、bean的作用域"></a>6-4、bean的作用域</h2><ol><li><p>单例模式 <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton</a>（Spring默认机制）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>原型模式 <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype</a> ：每次从容器中get的时候，都会产生一个新对象</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a>、<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a>、<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a>这些只能在web开发中使用到。</p></li></ol><h1 id="七、Bean的自动装配"><a href="#七、Bean的自动装配" class="headerlink" title="七、Bean的自动装配"></a>七、Bean的自动装配</h1><ul><li><p>自动装配是Spring满足bean依赖的一种方式。</p></li><li><p>Spring会在上下文中自动寻找，并自动给bean装配属性</p></li></ul><p>在spring中有三种装配的方式</p><ol><li>在xml中显示配置</li><li>在Java中显示配置</li><li><strong>隐式的自动装配bean</strong>（引用类型的自动注入：spring框架根据某些规则可以给引用类型赋值）</li></ol><h2 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7-1、测试"></a>7-1、测试</h2><p>环境搭建：一个人拥有两个宠物。</p><h2 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7-2、ByName自动装配"></a>7-2、ByName自动装配</h2><p>byName（按名称注入）：Java类中引用类型的属性名和spring容器中（配置文件）<code>&lt;bean&gt;</code>的id名称一样，且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型。</p><p>语法：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--简单类型属性赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--       byName；会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!------------------------------------------------------------------></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--普通值注入 value--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--bean注入 ref  引用类型的set注入--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;property name="address" ref="adderss"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adderss<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx省xxx市xxx区xxx街道<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="7-3、ByType自动装配"><a href="#7-3、ByType自动装配" class="headerlink" title="7-3、ByType自动装配"></a>7-3、ByType自动装配</h2><p>byType（按类型注入）：Java类中引用类型的数据类型和spring容器（配置文件）<code>&lt;bean&gt;</code>和class属性是同源关系的，这样的bean能够赋值给应用类型。</p><p>同源：</p><ul><li>Java类中引用类型的数据类型和bean的class的值是一样的。</li><li>Java类中引用类型的数据类型和bean的class的值是父子类关系的。</li><li>java类中引用类型的数据类型和bean的class的值是接口和实现类的关系的。</li></ul><p>语法：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">autuwire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--简单类型属性赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--       byName；会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id       byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>byName的时候，需要保证所有的bean唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li></ul><h2 id="7-4、使用注解实现自动装配"><a href="#7-4、使用注解实现自动装配" class="headerlink" title="7-4、使用注解实现自动装配"></a>7-4、使用注解实现自动装配</h2><p>jdk1.5支持注解，spring2.5就支持注解了。</p><p>使用注解：</p><ol><li><p>导入约束。（context约束）</p></li><li><p>配置注解的支持：<code>&lt;context:annotation-config/&gt;</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>@Autowired</strong></p><p>直接在属性上使用，也可以在set方式上使用。</p><p>使用Autowired可以不用编写set方法，前提是这个自动装配的属性在IOC（Spring）容器中存在，且符合名字byname。</p><pre><code>@Nullable    字段标记了这个注解，说明这个字段可以为null</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Autowired</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"dog"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>@Resource注解</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@Resource和@Autowired的区别；</p><ul><li><p>都是用来自动装配的，都可以放在属性字段上</p></li><li><p>@Autowired通过byType的方式实现，而且必须要求这个对象存在。【常用】</p></li><li><p>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现。如果两个都找不到的情况下，就报错。</p></li><li><p>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byName的方式实现。</p></li></ul><h1 id="八、使用注解开发"><a href="#八、使用注解开发" class="headerlink" title="八、使用注解开发"></a>八、使用注解开发</h1><p>在Spring4之后，需要使用注解开发，必须保证aop的包导入了。</p><blockquote><p><strong>步骤：</strong></p><p>1、导入 AOP 的 Jar 包。因为注解的后台实现用到了 AOP 编程。（导入依赖spring-context，包含aop的jar包）</p><p>2、需要更换配置文件头，即添加相应的约束。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>3、需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    声明组件扫描器（component-scan），组件就是Java对象    base-package：指定注解在项目中的包名    component-scan工作方式：spring会扫描遍历base-package指定的包，把包中和子包中的所有类，找到类中的注解，按照注解的功能创建对象，或给属性赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--指定多个包的三种方式--></span><span class="token comment" spellcheck="true">&lt;!--第一种：使用多次组件扫描器，指定不同包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.xxx1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.xxx2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--第二种：使用分隔符（;或,）分隔多个包名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.xxx1;com.lskj.xx2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--第三种：指定父包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>Spring给我们提供了<code>context:annotation-config</code>的简化的配置方式，自动帮助你完成声明，并且还自动搜索@Component , @Controller , @Service , @Repository等标注的类。</strong></p><p><strong><code>context:component-scan</code>除了具有<code>context:annotation-config</code>的功能之外，<code>context:component-scan</code>还可以在指定的package下扫描以及注册javabean 。还具有自动将带有@component,@service,@Repository等注解的对象注册到spring容器中的功能。</strong></p><p><strong>因此当使用 context:component-scan 后，就可以将 context:annotation-config移除。</strong></p></blockquote><p><strong>下面使用<code>&lt;context:annotation-config/&gt;</code>进行演示</strong></p><p>使用注解需要导入context约束，增加注解的支持。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ol><li>bean</li></ol><ol start="2"><li><p>属性如何注入</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等价于&lt;bean id="user" class="com.lskj.pojo.User"/></span><span class="token comment" spellcheck="true">//@Component 组件，若不指定对象名称，由spring提供默认名称：类名的首字母小写</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*//相当于 &lt;property name="name" value="lskj"    @Value("lskj")*/</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于 &lt;property name="name" value="lskj"</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>衍生的注解</p><p>@Component衍生注解，在web开发中，会按照MVC三层框架分层</p><ul><li>dao：@Repository，创建dao对象，dao对象是能访问数据库的</li><li>service：@Service，创建service对象，service对象是做业务处理的，可以有事务等功能</li><li>controller：@Controller，创建控制器对象，能够接收用户提交的参数，显示请求的处理结果</li></ul><p>这四个注解功能是一样的，都是代表将某个类注册到Spring容器中，装配Bean。</p></li><li><p>自动装配</p><blockquote><p><strong>简单类型的属性赋值</strong></p><pre><code>  `@value`      属性：value是String类型的，表示见到那类型的属性值      位置：1）在属性定义的上面，无需set方法，推荐使用                  2）在set方法的上面</code></pre><p><strong>引用类型赋值</strong></p><pre><code>  `@Autowired`：自动装配通过类型，名字，默认使用的是byType自动注入。      如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value="bean的id")：表示使用指定的名称的bean来完成赋值      @Autowired 还有一个属性 required，默认值为true，表示当匹配失败后，会终止程序运行。若将其值设置为false，@Autowired(required=false)，则匹配失败，将被忽略，未匹配的属性值为 null      位置：1）在属性定义的上面，无需set方法，推荐使用                  2）在set方法的上面  `@Resource`：JDK中的注解，spring框架提供了对这个注解的功能支持，可以使用这个注解给引用类型赋值      自动装配通过名字，类型，默认使用byName自动注入      位置：1）在属性定义的上面，无需set方法，推荐使用                  2）在set方法的上面</code></pre><p>​            @Resource 注解若不带任何参数，采用默认按名称的方式注入，按名称不能注入 bean，则会按照类型进行 Bean 的匹配注入</p><p>​            @Resource只使用byName方式，需要增加一个属性name</p><p><code>@Nullable</code>：字段标记了这个注解，说明这个字段可以为null</p></blockquote></li><li><p>作用域</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*//相当于 &lt;property name="name" value="lskj"    @Value("lskj")*/</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于 &lt;property name="name" value="lskj"</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"lskj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>xml与注解：</p><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解不是自己的类不能使用，维护相对复杂</li></ul><p>xml与注解最佳实践：</p><ul><li><p>xml用来管理bean</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>使用过程中，只需要注意：必须让注解生效，需要开启注解的支持</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--指定要扫描的包，这个包下的注解就会生效--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><p>  <a href="context:annotation-config/" target="_blank" rel="noopener">context:annotation-config/</a></p><pre><code>注解说明：`@Autowired`：自动装配通过类型，名字​    如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")`@ Nullable`：字段标记了这个注解，说明这个字段可以为null`@Resource`：自动装配通过名字，类型`@Component`：组件，放在类上，说明这个类被Spring管理了，就是bean。# 九、使用Java的方式配置Spring完全不使用Spring的xml配置，全权交给Java来做。JavaConfig是Spring的一个子项目，在Spring4之后，成为了一个核心功能。实体类：```java//这个类被Spring接管了，注册到了容器中@Componentpublic class User {    private String name;    public String getName() {        return name;    }    @Value("lskj")   //属性注入值    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "User{" +                "name='" + name + '\'' +                '}';    }}</code></pre><p>配置文件：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//Spring容器托管，注册到容器中，因为它是一个@Component，@Configuration 代表这个是一个配置类，相当于beans.xml</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.lskj.pojo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>Config02<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注册一个bean，相当于bean标签</span>    <span class="token comment" spellcheck="true">//方法的名字，相当于bean标签中的id属性</span>    <span class="token comment" spellcheck="true">//方法的返回值，相当于bean标签中的class属性</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回要注入到bean的对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果完全使用了配置类方式，就只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User getUser <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="十、代理模式"><a href="#十、代理模式" class="headerlink" title="十、代理模式"></a>十、代理模式</h1><p>是SpringAOP的底层。</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10-1、静态代理"></a>10-1、静态代理</h2><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><ol><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>真实角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东要出租房子。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//看房</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带你看房。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//签合同</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签约租赁合同。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//收中介费</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收中介费。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>客户端访问代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//房东要出租房子</span>        Host host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//代理，中介帮房东出租房子，代理一般会有一些附属操作</span>        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//租客不用面对房东，直接找中介租房即可。</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用关注一些公共的业务</li><li>公共业务交给了代理角色，实现类业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>代理模式的缺点：</p><ul><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li></ul><p><img src="/archives/52ba89f4/image-20200711100854347.png" alt=""></p><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>真实角色：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增添了一位用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一位用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了一位用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一位用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代理角色：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>UserServiceImpl userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//日志方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用了"</span><span class="token operator">+</span>msg<span class="token operator">+</span><span class="token string">"方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问代理：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserServiceProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">setUserService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10-2、动态代理"></a>10-2、动态代理</h2><p>动态代理是程序在整个运行过程中根本就不存在目标类的代理类，目标对象的代理对象只是由代理工具（不是真实定义的类）在程序运行时由JVM根据反射等机制动态生成的。代理对象与目标对象的代理关系在程序运行时才确定。</p><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是直接写好的</li><li>动态代理分为：基于接口的动态代理，基于类的动态代理<ul><li>基于接口——JDK动态代理（要求目标对象必须实现接口，这是Java设计上的要求）</li><li>基于类：cglib（cglib代理的生成原理时生成目标类的子类，而子类时增强过的，这个子类对象就是代理对象。所以，使用cglib生成动态代理，要求目标类必须能够被继承，即不能时final的类。）</li><li>java字节码实现：javassist</li></ul></li></ul><p>Proxy：代理，InvocationHandler：调用处理程序</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用关注一些公共的业务</li><li>公共业务交给了代理角色，实现类业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h1 id="十一、AOP"><a href="#十一、AOP" class="headerlink" title="十一、AOP"></a>十一、AOP</h1><h2 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11-1、什么是AOP"></a>11-1、什么是AOP</h2><p>AOP（Aspect Oriented Programming）面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/archives/52ba89f4/image-20200711162948870.png" alt=""></p><p><strong>怎样理解面向切面编程？</strong></p><p>1）需要在分析项目功能时，找出切面</p><p>2）合理的安排切面的执行时间（在目标方法前，还是目标方法后）</p><p>3）合理的安排切面执行的位置，在哪个类，哪个方法增加增强功能</p><h2 id="11-2、AOP在Spring中的作用"><a href="#11-2、AOP在Spring中的作用" class="headerlink" title="11-2、AOP在Spring中的作用"></a>11-2、AOP在Spring中的作用</h2><p><strong>提供声明式事务；允许用户自定义切面。</strong></p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与业务逻辑无关的，但是需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等……</li><li>切面（Aspect）：横切关注点别模块化的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标对象（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><p><img src="/archives/52ba89f4/image-20200711165408763.png" alt=""></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice</p><table><thead><tr><th align="center">通知类型</th><th align="center">连接点</th><th align="center">实现接口</th></tr></thead><tbody><tr><td align="center">前置通知</td><td align="center">方法前</td><td align="center"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/package-summary.html" target="_blank" rel="noopener">org.springframework.aop</a>.<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/MethodBeforeAdvice.html" target="_blank" rel="noopener"><em>MethodBeforeAdvice</em></a></td></tr><tr><td align="center">后置通知</td><td align="center">方法后</td><td align="center"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/package-summary.html" target="_blank" rel="noopener">org.springframework.aop</a>.<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/AfterReturningAdvice.html" target="_blank" rel="noopener"><em>AfterReturningAdvice</em></a></td></tr><tr><td align="center">环绕通知</td><td align="center">方法前后</td><td align="center"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/aopalliance/intercept/package-summary.html" target="_blank" rel="noopener">org.aopalliance.intercept</a>.<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/aopalliance/intercept/MethodInterceptor.html" target="_blank" rel="noopener"><em>MethodInterceptor</em></a></td></tr><tr><td align="center">异常抛出通知</td><td align="center">方法抛出异常</td><td align="center"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/package-summary.html" target="_blank" rel="noopener">org.springframework.aop</a>.<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/ThrowsAdvice.html" target="_blank" rel="noopener"><em>ThrowsAdvice</em></a></td></tr><tr><td align="center">引介通知</td><td align="center">类中增加新的方法属性</td><td align="center"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/package-summary.html" target="_blank" rel="noopener">org.springframework.aop</a>.<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/javadoc-api/org/springframework/aop/IntroductionInterceptor.html" target="_blank" rel="noopener"><em>IntroductionInterceptor</em></a></td></tr></tbody></table><p>即AOP在不改变原有代码的情况下，去增加新的功能。</p><p><strong>一个切面有三个关键的要素：</strong></p><p>1）切面的功能代码，切面能干什么</p><p>2）切面的执行位置，使用Pointcut表示切面执行的位置</p><p>3）切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后</p><h2 id="11-3、AOP的实现"><a href="#11-3、AOP的实现" class="headerlink" title="11-3、AOP的实现"></a>11-3、AOP的实现</h2><blockquote><p>spring在内部实现aop规范，能做aop的工作。</p><p>spring主要在事务处理时使用aop。</p><p>在项目开发中很少使用spring的aop实现，因为spring的aop比较笨重。</p></blockquote><p>在Spring中使用AOP开发时，一般使用AspectJ的实现方式。Spring框架中结成了aspectj框架，通过spring就能使用aspectj的功能。</p><p><strong>aspectJ</strong>：一个开源的专门做aop的框架，是一个优秀面向切面的框架，它扩展了Java语言，提供了强大的切面实现。</p><p>AspectJ是Eclipse的开源项目，官网地址：<a href="http://www.eclipse.org/aspectj/" target="_blank" rel="noopener">http://www.eclipse.org/aspectj/</a></p><p><strong>aspectJ框架实现aop有两种方式</strong>：</p><ul><li>使用xml的配置文件：配置全局事务</li><li>使用注解，在项目中要做aop功能，一般都使用注解，aspectj有5个注解</li></ul><p><strong>使用AOP织入，需要导入一个依赖包</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>方式一：使用Spring的API接口【主要SpringAPI接口实现】</p><p>方式二：自定义实现AOP【主要是切面定义】</p><p>方式三：使用注解实现</p><h2 id="11-4、aspectj框架的使用"><a href="#11-4、aspectj框架的使用" class="headerlink" title="11-4、aspectj框架的使用"></a>11-4、aspectj框架的使用</h2><p><strong>AspectJ的切入点表达式原型</strong>：</p><pre><code>execution(modifiers-pattern? ret-type-pattern    declaring-type-pattern?name-pattern(param-pattern)    throws-pattern?)</code></pre><p><code>?</code>处表示可选，可没有。标红的是必须的。各部分之间用空格分开。</p><ul><li>modifiers-pattern：访问权限类型</li><li><font color="red">ret-type-pattern</font>：返回值类型</li><li>declaring-type-pattern：包名类名</li><li><font color="red">name-pattern(param-pattern)</font>：方法名（参数类型和参数个数）</li><li>throws-pattern：抛出异常类型</li></ul><p>以上表达式共4个部分：<strong>excution(访问权限 <font color="red">方法返回值</font> <font color="red">方法声明(参数)</font> 异常类型)</strong></p><p>在其中可以使用以下符号：</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0至多个任意字符</td></tr><tr><td align="center">..</td><td align="center">使用在方法参数中，表示任意多个参数<br>用在包名后，表示当前包及其子包路径</td></tr><tr><td align="center">+</td><td align="center">用在类名后，表示当前类及其子类<br>用在接口后，表示当前接口及其实现类</td></tr></tbody></table><pre><code>例如：execution(public ** (..))    指定切入点为任意公共方法execution(* set*(..))    指定切入点为任何一个以“set”开始的方法execution(* com.lskj.service.*.*(..))    指定切入点为定义在service包里的任意类的任意方法execution(* com.lskj.service..*.*(..))    指定切入点定义在service包或者子包里的任意类的任意方法。“..”出现在类名中时，后面必须跟“*”，表示包、子包下的所有类execution(* *.service.*.*(..))    指定只有一级包下的 serivce 子包下所有类（接口）中所有方法为切入点execution(* *..service.*.*(..))    指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点execution(* *.ISomeService.*(..))    指定只有一级包下的 ISomeSerivce 接口中所有方法为切入点execution(* *..ISomeService.*(..))    指定所有包下的 ISomeSerivce 接口中所有方法为切入点execution(* com.xyz.service.IAccountService.*(..))    指定切入点为：IAccountService 接口中的任意方法。execution(* com.xyz.service.IAccountService+.*(..))    指定切入点为：IAccountService 若为接口，则为接口中的任意方法及其所有实现类中的任意方法；若为类，则为该类及其子类中的任意方法。execution(* joke(String,int)))    指定切入点为：所有的 joke(String,int)方法，且 joke()方法的第一个参数是 String，第二个参数是 int。如果方法中的参数类型是 java.lang 包下的类，可以直接使用类名，否则必须使用全限定类名，如 joke( java.util.List, int)。execution(* joke(String,*)))    指定切入点为：所有的 joke()方法，该方法第一个参数为 String，第二个参数可以是任意类型，如joke(String s1,String s2)和joke(String s1,double d2)都是，但joke(String s1,double d2,Strings3)不是。execution(* joke(String,..)))    指定切入点为：所有的 joke()方法，该方法第一个参数为 String，后面可以有任意个参数且参数类型不限，如 joke(String s1)、joke(String s1,String s2)和 joke(String s1,double d2,String s3) 都是。execution(* joke(Object))    指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型。joke(Object ob)是，但，joke(String s)与 joke(User u)均不是。execution(* joke(Object+)))    指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型或该类的子类。不仅 joke(Object ob)是，joke(String s)和 joke(User u)也是。</code></pre><p><strong>1、切面的执行时间，这个执行时间在规范中叫做Advice（通知，增强）</strong></p><p>在aspectj框架中使用注解表示，也可以使用xml配置文件中的标签</p><ul><li><p><code>@Before</code>：前置通知</p><p>在目标方法执行之前执行。被注解为前置通知的方法，可以包含一个 JoinPoint 类型参数。该类型的对象本身就是切入点表达式。通过该参数，可获取切入点表达式、方法签名、目标对象等。</p><p>不光前置通知的方法，可以包含一个 JoinPoint 类型参数，所有的通知方法均可包含该参数。<strong>但是JoinPoint参数必须放在首位</strong></p></li><li><p><code>@AfterReturning</code>：后置通知</p><p>在目标方法执行之后执行。由于是目标方法之后执行，所以可以获取到目标方法的返回值。该注解的 returning 属性就是用于指定接收方法返回值的变量名的。所以，被注解为后置通知的方法，除了可以包含 JoinPoint 参数外，还可以包含用于接收返回值的变量。该变量最好为 Object 类型，因为目标方法的返回值可能是任何类型。</p></li><li><p><code>@Around</code>：</p><p>在目标方法执行之前之后执行。被注解为环绕增强的方法要有返回值，Object 类型。并且方法可以包含一个ProceedingJoinPoint 类型的参数。接口 ProceedingJoinPoint 其有一个proceed()方法，用于执行目标方法。若目标方法有返回值，则该方法的返回值就是目标方法的返回值。最后，环绕增强方法将其返回值返回。该增强方法实际是拦截了目标方法的执行。</p></li><li><p><code>@AfterThrowing</code>：异常通知</p><p>在目标方法抛出异常后执行。该注解的 throwing 属性用于指定所发生的异常类对象。</p><p>被注解为异常通知的方法可以包含一个参数 Throwable，参数名称为 throwing 指定的名称，表示发生的异常对象。</p></li><li><p><code>@After</code>：最终通知</p><p>无论目标方法是否抛出异常，该增强均会被执行。</p></li><li><p><code>@Pointcut</code>：定义切入点（<strong>不是通知注解，并不表示切面的执行时间，是一个辅助的功能注解</strong>）</p><p>当较多的通知增强方法使用相同的 execution 切入点表达式时，编写、维护均较为麻烦。AspectJ 提供了@Pointcut 注解，用于定义 execution 切入点表达式。</p><p>其用法是，将@Pointcut 注解在一个方法之上，以后所有的 executeion 的 value 属性值均可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。这个使用@Pointcut注解的方法一般使用 private 的标识方法，即没有实际作用的方法。</p></li></ul><p><strong>2、表示切面执行的位置，使用的是切入点表达式</strong></p><p><strong>使用AOP的目的</strong>是给已经存在的一些类和方法，增加额外的功能。前提是不改变原来的类的代码。</p><blockquote><p><strong>使用aspectj实现aop的基本步骤：</strong></p><p>1、新建maven项目</p><p>2、加入依赖</p><p>​    1）spring依赖</p><p>​    2）aspectj依赖</p><p>​    3）junit单元测试</p><p>3、创建目标类：接口和它的实现类</p><p>​    需要做的是给类中的方法增加功能。</p><p>4、创建切面类：普通类</p><p>​    1）在类的上面加入@Aspect</p><p>​    2）在类中定义方法，方法就是切面要执行的功能代码</p><p>​        在方法的上面加入aspectj中的通知注解，例如@Before</p><p>​        还需要指定切入点表达式execution()</p><p>5、创建spring的配置文件：声明对象，把对象交给容器统一管理</p><p>​    声明对象可以使用注解，或xml配置文件<bean></bean></p><p>​    1）声明目标对象</p><p>​    2）声明切面类对象</p><p>​    3）声明aspectj框架中的自动代理生成器标签</p><p>​        自动代理生成器：用来完成代理对象的自动创建功能的。</p><p>6、创建测试类，从spring容器中获取目标对象（实际就是代理对象）</p><p>​    通过代理执行方法，实现aop的功能增强</p></blockquote><h2 id="11-5、测试"><a href="#11-5、测试" class="headerlink" title="11-5、测试"></a>11-5、测试</h2><p><strong>1、新建一个maven项目，aop-aspectj</strong></p><p><strong>2、导入依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lskj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aop-aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--spring依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--aspectj依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><strong>3、创建目标类接口和其实现类。</strong></p><p>方便测试，创建了一个实体类User</p><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SomeService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">doOther</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span>    User <span class="token function">doUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">doFirst</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SomeServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//给doSome方法增加一个功能，在doSome()执行之前，输出方法的执行时间</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doSome()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doOther</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doOther()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"doOther"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">doUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doUser()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doFirst</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doFirst()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"doFirst"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doSecond()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----目标方法doFinal()-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4、创建切面类，增加功能</strong></p><p>MyAspect.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj */</span><span class="token comment" spellcheck="true">/** * @Aspect：是aspectj框架中的注解 * 作用：表示当前类是切面类 * 切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码 * 位置：在类定义的上面 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 前置通知定义方法，方法是实现切面功能的     * 方法的定义要求：     *  1、公共方法public     *  2、方法没有返回值     *  3、方法名称自定义     *  4、方法可以有参数，也可以没参数。     *      如果有参数，参数不是自定义的，有几个参数类型可以使用     */</span>    <span class="token comment" spellcheck="true">/**     * @Before：前置通知注解     * 属性：value，是切入点表达式，表示切面的功能执行的位置     * 位置：在方法的上面     * 特点：     *  1、在目标方法之前先执行的     *  2、不会改变目标方法的执行结果     *  3、不会影响目标方法的执行     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public void com.lskj.service.impl.SomeServiceImpl.doSome(String,Integer))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//切面需要执行的代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知，切面功能：在目标方法之前输出执行时间："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定通知方法中的参数：JoinPoint     * JoinPoint：业务方法，要加入切面功能的业务方法     *  作用：可以在通知方法中获取方法执行时的信息，例如方法名称，方法的是实参。     *  如果切面功能中需要用到方法的信息，就加入JoinPoint     *  这个JoinPoint参数的值是由框架赋予，必须是第一个位置的参数     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public void com.lskj.service.impl.SomeServiceImpl.doSome(String,Integer))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">twoBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取方法的完成定义</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的签名（定义） = "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的名称 = "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法的实参</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数 = "</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//切面需要执行的代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知，切面功能：在目标方法之前输出执行时间："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/**     * 后置通知定义方法，方法是实现切面功能的     * 方法的定义要求：     *  1、公共方法public     *  2、方法没有返回值     *  3、方法名称自定义     *  4、方法有参数，推荐是Object，参数名自定义     */</span>    <span class="token comment" spellcheck="true">/**     * @AfterReturening：后置通知     *  属性：     *      1、value 切入点表达式     *      2、returning  自定义的变量，表示目标方法的返回值的     *          自定义变量名必须和通知方法的形参名一样     *  位置：在方法定义的上面     *  特点：     *      1、在目标方法之后执行     *      2、能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能     *          Object obj = doOther();     *      3、可以修改这个返回值     *  后置通知的执行     *      Object obj = doOther();     *      参数传递：传值，传引用     *      myAfterReturning(obj);     *      System.out.println("obj = " + obj);     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doOther(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Object obj：是目标方法执行后的返回值，根据返回值做切面的功能处理</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知：在目标方法之后执行，获取的返回值是："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"doOther"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回值是doOther"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回值不是doOther"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//修改目标方法的返回值，测试是否影响最后的方法调用结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token string">"update后的值"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doUser(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">twoAfterReturning</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Object obj：是目标方法执行后的返回值，根据返回值做切面的功能处理</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知：在目标方法之后执行，获取的返回值是："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//若修改了obj的内容，属性值，测试是否影响最后的调用结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知方法的定义格式     *  1、public     *  2、必须有一个返回值，推荐使用Object     *  3、方法名称自定义     *  4、方法有参数，固定的参数ProceedingJoinPoint     *     *  环绕通知：经常做事务，在目标方法之前开启事务，执行目标方法，在目标方法之后提交事务     */</span>    <span class="token comment" spellcheck="true">/**     * @Around：环绕通知     *  属性：value 切入点表达式     *  位置：在方法的定义上面     * 特点：     *  1、它是功能最强的通知     *  2、在目标方法的前和后都能增强功能     *  3、控制目标方法是否被调用执行     *  4、修改原来的目标方法的执行结果，影响最后的调用结果     *     *  环绕通知，等同于jdk动态代理的InvocationHandler接口     *     *  参数：ProceedingJoinPoint等同于Method     *      作用：执行目标方法的     *  返回值：就是目标方法的执行结果，可以被修改     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFirst(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取第一个参数值</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object arg <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>arg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//实现环绕通知</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知：在目标方法之前---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1、目标方法调用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"test04"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//符合条件，调用目标方法</span>            obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//method.invoke(); Object obj = doFirst();</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知：在目标方法之后，提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、在目标方法的前或后加入功能</span>        <span class="token comment" spellcheck="true">//修改目标方法的执行结果，影响方法最后的调用结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token string">"update doFirst"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回目标方法的执行结果</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/**     * 异常通知方法的定义要求：     *  1、公共方法public     *  2、方法没有返回值     *  3、方法名称自定义     *  4、方法有一个Exception参数，如果还有，则是JoinPoint     */</span>    <span class="token comment" spellcheck="true">/**     * @AfterThrowing：异常通知     *  属性：1、value 切入点表达式     *       2、throwing 自定义的变量，表示目标方法抛出的异常对象     *          变量名必须和方法的参数名一样     *  特点：     *      1、在目标方法抛出异常时执行     *      2、可以做异常的监控程序，监控目标方法执行时是否有异常     *          若有异常，可以发送邮件、短信进行通知     *     *   执行：     *      try{     *          SomeServiceImpl.doSecond(..)     *      }catch(Exception e){     *          myAfterThrowing(e);     *      }     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSecond(..))"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知：方法发生异常时，执行："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送邮件、短信，通知开发人员</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/**     * 最终通知方法的定义要求：     *  1、公共方法public     *  2、没有返回值     *  3、方法名称自定义     *  4、方法没有参数，如果有，则是JoinPoint     */</span>    <span class="token comment" spellcheck="true">/**     * @After：最终通知     *     属性：value 切入点表达式     *     位置：在方法的上面     * 特点：     *  1、总是会执行     *  2、在目标方法之后执行的     *     *  try{     *      SomeServiceImpl.doFinal(..)     *  }catch(Exception e){     *     *  }finally{     *      myAfter()     *  }     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFinal(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知，总是会被执行的代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一般做资源清除功能</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------*/</span>    <span class="token comment" spellcheck="true">/**     * @Pointcut：定义和管理切入点，若项目中有多个切入点表达式是重复的，可以复用的，使用@Pointcut     *  属性：value 切入点表达式     *  位置：在自定义的方法上面     * 特点：     *  当使用@Pointcut定义在一个方法的上面，此时这个方法的名称就是切入点表达式的别名。     *  其它的通知中，value属性就可以使用这个方法名称，代替切入点表达式了     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSome(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不需要写代码</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myPt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5、创建spring的配置文件：声明对象，把对象交给容器统一管理</strong></p><p>applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop       https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--把对象交给spring容器，由spring容器统一创建，管理对象--></span>    <span class="token comment" spellcheck="true">&lt;!--声明目标对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.service.impl.SomeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明切面类对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明自动dialing生成器：使用aspectj框架内部的功能，创建目标对象的代理对象。        创建代理对象是在内存中实现的，修改目标对象的内存中的结构。创建为代理对象        所以目标对象就是被修改后的代理对象        aspectj-autoproxy：会把spring容器中的所有的目标对象，一次性都生成代理对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><strong>6、创建测试类，从spring容器中获取目标对象进行测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>service<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author lskj */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    String config <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>    ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从容器中获取目标对象</span>    SomeService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过代理的对象执行方法，实现目标方法执行时，增强了功能</span>        proxy<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"test01"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String str <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token string">"test02"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str = "</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user2 <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">doUser</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String test04 <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token string">"test04"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回值 = "</span><span class="token operator">+</span>test04<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span><span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"test07"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试结果</strong></p><pre><code>test01：前置通知，切面功能：在目标方法之前输出执行时间：xxx方法的签名（定义） = void com.lskj.service.SomeService.doSome(String,Integer)方法的名称 = doSome参数 = test01参数 = 20前置通知，切面功能：在目标方法之前输出执行时间：xxx-----目标方法doSome()-----test02：-----目标方法doOther()-----后置通知：在目标方法之后执行，获取的返回值是：doOther返回值是doOtherstr = doOthertest03：-----目标方法doUser()-----后置通知：在目标方法之后执行，获取的返回值是：User{id=1, name='user1'}User{id=2, name='user2'}test04：环绕通知：在目标方法之前--------目标方法doFirst()-----环绕通知：在目标方法之后，提交事务返回值 = update doFirsttest05：-----目标方法doSecond()-----异常通知：方法发生异常时，执行：/ by zerotest06：-----目标方法doFinal()-----执行最终通知，总是会被执行的代码test07：前置通知，切面功能：在目标方法之前输出执行时间：xxx方法的签名（定义） = void com.lskj.service.SomeService.doSome(String,Integer)方法的名称 = doSome参数 = test07参数 = 1前置通知，切面功能：在目标方法之前输出执行时间：xxx-----目标方法doSome()-----执行后置通知</code></pre><blockquote><ul><li><p>若目标类是接口和其实现类，则使用的是jdk的动态代理。</p></li><li><p>若目标类没有接口，则使用的是cglib动态代理，spring框架会自动应用cglib。</p></li><li><p>若希望目标类有接口和其实现类，但是想要使用cglib动态代理，需要在applicationContext.xml中增加<code>proxy-target-class="true"</code>如下</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul></blockquote><h1 id="十二、整合Mybatis"><a href="#十二、整合Mybatis" class="headerlink" title="十二、整合Mybatis"></a>十二、整合Mybatis</h1><p>把mybatis框架和spring集成在一起，使用的是IOC。</p><p>因为IOC可以创建对象，可以把mybtis框架中的对象交给spring统一创建，开发人员从spring中获取对象，不需要同时面对两个或多个框架了，只需要面对一个spring框架。</p><blockquote><p><strong>Mybatis使用步骤：</strong></p><p>1、定义dao（mapper）接口</p><p>2、定义mapper文件</p><p>3、定义mybatis的主配置文件mybatis.xml</p><p>4、创建dao（mapper）的代理对象</p><p><strong>要使用dao对象，需要使用getMapper()方法，怎么能使用getMapper()方法，需要哪些条件？</strong></p><p>1、获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法。</p><p>2、创建SqlSessionFactory对象，通过读取mybatis的主配置文件，能创建SqlSessionFactory对象</p><p>需要SqlSessionFactory对象，使用Factory能获取SqlSession，有了SqlSession就能有dao，目的就是获取dao对象。</p><p>Factory创建需要读取主配置文件。</p><p>主配置文件：1、数据库信息 2、mapper文件位置</p></blockquote><p>综上，需要让spring创建以下对象：</p><ul><li>独立的连接池类的对象，使用阿里的druid连接池</li><li>SqlSessionFactory对象</li><li>创建出dao对象</li></ul><p><strong>步骤：</strong></p><ol><li><p>新建maven项目，导入相关jar包</p><ul><li>junit</li><li>spring</li><li>mybatis</li><li>mysql驱动</li><li>spring的事务的依赖</li><li>mybatis-spring【new】</li></ul></li><li><p>创建实体类</p></li><li><p>创建dao接口和mapper文件</p></li><li><p>创建mybtis配置文件</p></li><li><p>创建Service接口和实现类</p></li><li><p>创建spring的配置文件：声明mybatis的对象交给spring创建</p><ul><li>数据源</li><li>SqlSessionFactory</li><li>Dao对象</li><li>声明自定义的service</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容        spirng知道jdbc.properties文件的位置    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明数据源DataSource，作用是连接数据库的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--set注入给DruidDataSource提供连接数据库信息--></span>        <span class="token comment" spellcheck="true">&lt;!--使用属性配置文件中的数据，语法 ${key}--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明的是mybatis中提供SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的        SqlSessionFactory sqlSessionFactory = new ..    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--set注入，把数据库连接池赋给dataSource属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis主配置文件位置            configLocation属性是Resource类型，读取配置文件            它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        创建dao对象，使用SqlSession的getMapper(xxxDao.class)        MapperScannerConfigurer：在内部调用getMapper()生成每个dao接口的代理对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spirng.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            指定包名，包名是dao接口所在的包名            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行            一次getMapper()方法，得到每个接口的dao对象            创建好的dao对象放入到spring的容器中。dao对象的默认名称是接口名首字母小写        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明service--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.service.impl.xxxServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建测试类，获取Service对象，通过service调用dao完成对数据库的访问</p></li></ol><h2 id="12-1、mybatis"><a href="#12-1、mybatis" class="headerlink" title="12-1、mybatis"></a>12-1、mybatis</h2><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xml</li><li>测试</li></ol><h2 id="12-2、Mybatis-Spring"><a href="#12-2、Mybatis-Spring" class="headerlink" title="12-2、Mybatis-Spring"></a>12-2、Mybatis-Spring</h2><ol><li>编写数据源配置</li><li>sqlSessionFactory</li><li>sqlSessionTemplate</li><li>需要给接口加实现类</li><li>将实现类注入到Spring中</li><li>测试</li></ol><h1 id="十三、声明式事务"><a href="#十三、声明式事务" class="headerlink" title="十三、声明式事务"></a>十三、声明式事务</h1><p>声明式事务：把事务相关的资源和内容都提供给spring，spring就能处理事务提交、回滚。几乎不用写代码。</p><h2 id="13-1、事务"><a href="#13-1、事务" class="headerlink" title="13-1、事务"></a>13-1、事务</h2><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败。</li><li>确保完整性和一致性</li></ul><p><strong>事务ACID原则：</strong></p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化写到存储器中。</li></ul></li></ul><h2 id="13-2、Spring中的事务管理"><a href="#13-2、Spring中的事务管理" class="headerlink" title="13-2、Spring中的事务管理"></a>13-2、Spring中的事务管理</h2><blockquote><p>spring提供一种处理事务的统一模型，能使用统一步骤、方式完成多种不同数据库访问技术的事务处理。</p><p>例如使用spring的事务处理机制，可以完成mybatis访问数据库的事务处理，也可以完成hibernate访问数据库的事务处理</p></blockquote><ul><li>声明式事务：AOP</li><li>编程式事务：在代码中进行事务的管理</li></ul><p>事务原本是数据库中的概念，在Dao层。但一般情况下，需要将事务提升到业务层，即Service层。这样做是为了能够使用事务的特性来管理具体的业务。</p><p>在Spring中通常可以通过以下两种方式来实现对事务的管理：</p><ul><li>使用spring的事务注解管理事务</li><li>使用AspectJ的AOP配置事务管理事务</li></ul><p>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况；</li><li>若不在Spring中配置声明式事务，就需要在代码中手动配置事务。</li></ul><p><strong>处理事务，需要怎样做？做什么？</strong></p><p>spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring即可。</p><p>1、事务内部提交、回滚事务，使用的是事务管理器对象，代替你完成commit、rollback</p><ul><li><p>事务管理器是一个接口和它的众多实现类</p></li><li><p>接口：PlatformTransactionManager，定义了事务重要方法commit、rollback</p></li><li><p>实现类：spring把每一种数据库访问技术对应的事务处理类创建好了。</p><ul><li>mybatis访问数据库：spring创建好的是DataSourceTransactionManager</li><li>hibernate访问数据库：spring创建的是HibernateTransactionManager</li></ul><p>怎么使用？怎样告诉spring你用的是哪种数据库访问技术呢？</p><p>声明数据库访问技术对应的事务管理器实现类，在spring的配置文件中使用<code>&lt;bean&gt;</code>声明即可。</p><p>例如，使用mybatis访问数据库，在xml配置文件中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><p>2、说明事务的类型（业务方法需要什么样的事务）</p><p>说明方法需要的事务：</p><ul><li><p>事务的隔离级别：有4个值</p><ul><li>DEFAULT：采用DB默认的事务隔离级别。Mysql的默认为REPEATABLE_READ，Oracle默认为READ_COMMITTED</li><li>READ_UNCOMMITTED：读未提交。未解决任何并发问题。</li><li>READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。</li><li>REPEATABLE_READ：可重复读。解决脏读，不可重复读，存在幻读。</li><li>SERIALIZABLE：串行化。不存在并发问题。</li></ul></li><li><p>事务的超时时间：表示一个方法的最长的执行时间，如果方法执行时超过了时间，事务就会回滚。</p><p>单位是秒，整数值，默认是-1</p></li><li><p>事务的传播行为：控制业务方法是不是有事务的，是什么样的事务。</p><p>7个传播行为，表示你的业务方法调用时，事务在方法之间时如何使用的。</p><ul><li><p><strong>PROPAGATION_REQUIRED</strong>：指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中;若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是Spring默认的事务传播行为。</p></li><li><p><strong>PROPAGATION_REQUIRES_NEW</strong>：总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。</p></li><li><p><strong>PROPAGATION_SUPPORTS</strong>：指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。</p></li><li><p>PROPAGATION_MANDATORY</p></li><li><p>PROPAGATION_NESTED</p></li><li><p>PROPAGATION_NEVER</p></li><li><p>PROPAGATION_NOT_SUPPORTED</p></li></ul></li></ul><p>3、spring提交事务，回滚事务的时机</p><ul><li><p>当你的业务方法，执行成功，没有异常抛出，当方法法执行完毕，spring在方法执行后提交事务。</p></li><li><p>当你的业务方法抛出运行时异常，spring执行回滚，调用事务管理器的rollback</p><p>运行时异常的定义：RuntimeException和它的子类都是运行时异常，例如NullPointException，NumberFormatException</p></li><li><p>当你的业务方法抛出非运行时异常，主要时受查异常时，提交事务。</p><ul><li>受查异常：编写代码时，必须处理的异常。例如IOException，SQLException</li></ul></li></ul><blockquote><p><strong>总结</strong>：</p><p>1、管理事务的是事务管理器和它的实现类</p><p>2、spring的事务是一个统一模型</p><ul><li>指定要使用的事务管理器实现类，使用<code>&lt;bean&gt;</code></li><li>指定哪些类，哪些方法需要加入事务的功能</li><li>指定方法需要的隔离级别、传播行为、超时</li></ul></blockquote><h2 id="13-3、使用Spring的事务注解管理事务"><a href="#13-3、使用Spring的事务注解管理事务" class="headerlink" title="13-3、使用Spring的事务注解管理事务"></a>13-3、使用Spring的事务注解管理事务</h2><p>适合中小型项目。</p><p>Spring框架自己用aop实现给业务方法增加事务的功能，使用<code>@Transactional</code>注解增加事务。</p><p><code>@Transactional</code>注解是Spring框架的注解，放在public方法的上面，表示当前方法具有事务。可以给注解的属性赋值，表示具体的隔离级别、传播行为、异常信息等等。</p><p><code>@Transactional</code>注解的所有可选属性如下：</p><ul><li>propagation：用于设置事务传播属性。该属性类型为Propagation枚举，默认值为Propagation.REQUIRED。</li><li>isolation：用于设置事务的隔离级别。该属性类型为Isolation枚举，默认值为Isolation.DEFAULT。</li><li>readOnly：用于设置该方法对数据库的操作是否是只读的。该属性为boolean，默认值为false。</li><li>timeout：用于设置本操作与数据库连接的超时时限。单位为秒，类型为int，默认值为-1，即没有时限。</li><li>rollbackFor：指定需要回滚的异常类。类型为Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。<ul><li>spring框架会首先检查方法抛出的异常是否在rollbackFor的属性值中。若异常在rollbackFor列表中，无论是什么样类型的异常，一定回滚。</li><li>若抛出的异常不再rollbackFor列表中，spring会判断异常是否是RuntimeException，如果是，一定回滚。</li></ul></li><li>rollbackForClassName：指定需要回滚的异常类类名。类型为String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackFor：指定不需要回滚的异常类。类型为Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackForClassName：指定不需要回滚的异常类类名。类型为String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li></ul><p>需要注意的是，@Transactional若用在方法上，只能用于public方法上。对于其他非public方法，如果加上了注解@Transactional，虽然Spring不会报错，但不会将指定事务织入到该方法中。因为Spring会忽略掉所有非public方法上的@Transaction注解。</p><p>若@Transaction注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p><blockquote><p><strong>使用@Transactional的步骤</strong>：</p><p>1、需要声明事务管理器对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--声明事务管理器对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>声明的数据源DataSource的id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>2、开启事务注解驱动，告诉Spring框架需要使用注解的方式管理事务。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--声明事务注解驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transationManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>——————————————————————</strong><br>spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能。spring给业务加入事务，在业务方法执行前，先开启事务，在业务方法之后提交或回滚事务，使用了aop的环绕通知</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"需要增加的事务功能的业务方法名称"</span><span class="token punctuation">)</span>Object <span class="token function">myAround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 开启事务，spring开启 <span class="token keyword">try</span><span class="token punctuation">{</span>     spring的事务管理<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>     spring的事务管理<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>——————————————————————</strong><br>3、在方法的上面加入@Transactional注解</p></blockquote><h2 id="13-4、使用AspectJ的AOP配置管理事务"><a href="#13-4、使用AspectJ的AOP配置管理事务" class="headerlink" title="13-4、使用AspectJ的AOP配置管理事务"></a>13-4、使用AspectJ的AOP配置管理事务</h2><p>适合大型项目，这种方式业务方法和事务配置完全分离。</p><p>使用XML配置事务代理的方式的不足是，每个目标类都需要配置事务代理。当目标类较多，配置文件会变得非常臃肿。</p><p><strong>实现步骤</strong>：都是在xml配置文件中实现。</p><p>1、加入aspectj依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、声明事务管理器对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--声明事务管理器对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>声明的数据源DataSource的id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>3、声明方法需要的事务类型（配置方法的事务属性：隔离级别、传播行为、超时）。</p><p>使用tx标签必须引入约束。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--声明业务方法的事务属性 id：自定义名称，表示&lt;tx:advice>和&lt;/tx:advice>之间的配置内容 transaction-manager：事务管理对象的id--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--tx:attributes:配置事务属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性            name：方法名称                1、完成的方法名称，不带有包和类                2、方法可以使用通配符，*表示任意字符            propagation：传播行为，枚举值            isolation：隔离级别            rollback-for：指定的异常类名，全限定类名。发生异常一定回滚        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>方法名<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.NullPointerException,xxx.xxx.xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span></code></pre><p>4、配置aop：指定哪些类要创建代理。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切入点表达式：指定哪些包中的类，需要使用事务        id：切入点表达式的名称，唯一值        expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* *..service..*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置增强器：关联advice和pointcut        advice-ref：通知，上面tx:advice那里的配置        pointcut-ref：切入点表达式的id    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1WE411d7Dv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说  &lt;/a&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1nz4y1d7uy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;动力节点&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://lskjwp.gitee.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://lskjwp.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://lskjwp.gitee.io/archives/dc7fb504/"/>
    <id>https://lskjwp.gitee.io/archives/dc7fb504/</id>
    <published>2020-08-13T07:35:41.000Z</published>
    <updated>2021-11-14T07:16:13.866Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1HZ4y1p7F1" target="_blank" rel="noopener">B站 动力节点</a></p><a id="more"></a><p>java的设计模式中有一项设计模式叫做代理模式，所谓代理模式，就是通过代理方来操作目标对象，而不是自己直接调用。</p><h1 id="一、代理模式"><a href="#一、代理模式" class="headerlink" title="一、代理模式"></a>一、代理模式</h1><p><strong>代理模式：为其它对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户类和目标对象之间起到中介的作用。</strong></p><p>换句话说，使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。</p><p>客户类真正想要访问的对象是目标对象，但客户类真正可以访问的对象是代理对象。客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。</p><pre><code>例如：假设有一个A类，本来是要调用C类的方法，完成某个功能，但是C不让A调用。    A不能调用C的方法，那么就在A和C之间创建一个B代理（C让B访问）    A访问B，B再访问C</code></pre><h1 id="二、代理模式的作用"><a href="#二、代理模式的作用" class="headerlink" title="二、代理模式的作用"></a>二、代理模式的作用</h1><ol><li>功能增强：在原有的功能上增加了额外的功能。新增加的功能，叫做功能增强。</li><li>控制访问：代理类不允许访问目标对象。</li></ol><h1 id="三、实现代理的方式"><a href="#三、实现代理的方式" class="headerlink" title="三、实现代理的方式"></a>三、实现代理的方式</h1><h2 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h2><p><strong>静态代理是指，代理类在程序运行前就已经定义好.java 源文件，其与目标类的关系在</strong><br><strong>程序运行前就已经确立。在程序运行前代理类已经编译为.class 文件。</strong></p><ul><li>代理类是手工实现的，创建一个java类，表示代理类。</li><li>同时所要代理的目标类是确定的。</li></ul><p><strong>特点：</strong></p><ol><li>实现简单</li><li>容易理解</li></ol><pre><code>模拟用户购买商品。    用户是客户端类    商家：代理，代理某个品牌的商品    厂家：目标类    三者的关系：用户（客户）-&gt;商家（代理）-&gt;厂家（目标）    商家和厂家都是卖商品的，完成的功能都是一致的。实现步骤：1.创建一个接口，定义卖商品的方法，表示厂家和商家要完成的功能。2.创建厂家类，实现1步骤的接口。3.创建商家类（代理），也要实现1步骤的接口。4.创建客户端类，调用商家的方法，买一件商品。</code></pre><p><strong>缺点：</strong>当项目中，目标类和代理类过多时，</p><ol><li>当目标类增加了，代理类可能也需要成倍增加。代理类数量过多。</li><li>当接口中功能增加或者修改了，会影响众多的实现类、厂家类，代理也需要修改，影响比较多。</li></ol><h2 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h2><p>当静态代理中目标类很多时，可以使用动态代理，避免静态代理的缺点。</p><p>动态代理中目标类即使很多，代理类数量可以很少，当修改了接口中的方法时，不会影响代理类。</p><p><strong>动态代理是指代理类对象在程序运行时由 JVM 根据反射机制动态生成的。动态代理不</strong><br><strong>需要定义代理类的.java 源文件。</strong></p><p>在程序执行过程中，使用jdk的反射机制，创建代理类对象，并动态地指定要代理的目标类。</p><p>换句话说，动态代理是一种创建java对象的能力，让你不用创建类，就能创建代理类对象。</p><h1 id="四、动态代理"><a href="#四、动态代理" class="headerlink" title="四、动态代理"></a>四、动态代理</h1><h2 id="1、动态代理的实现"><a href="#1、动态代理的实现" class="headerlink" title="1、动态代理的实现"></a>1、动态代理的实现</h2><ul><li><p>jdk动态代理：使用反射包中的类和接口实现动态代理的功能。</p><p>反射包java.lang.reflect，里面有三个类：InvocationHandler，Method，Proxy</p></li><li><p>cglib动态代理：cglib是第三方的工具库，创建代理对象。</p><p>cglib的原理是继承，cglib通过集成目标类，创建它的子类，在子类中重写父类中同名的方法，实现功能的修改。</p><p>因为cglib是继承、重写方法，所以要求目标类不能是final的，方法也不能是final的。</p><p>cglib的要求目标类比较宽松，只要能继承就可以了。cglib在很多的框架中使用，比如mybatis，spring框架中都有使用。</p></li></ul><h2 id="2、jdk动态代理的实现"><a href="#2、jdk动态代理的实现" class="headerlink" title="2、jdk动态代理的实现"></a>2、jdk动态代理的实现</h2><p>反射， Method类，表示方法。类中的方法。 通过Method可以执行某个方法。</p><p>反射包java.lang.reflect，里面有三个类：InvocationHandler，Method，Proxy</p><ul><li><p>InvocationHandler接口（调用处理器），就一个方法invoke()</p><p>invoke()表示代理对象要执行的功能代码。代理类要完成的功能就写在invoke()方法中。</p><p>代理类要完成的功能：</p><ol><li>调用目标方法，执行目标方法的功能。</li><li>功能增强，在目标方法调用时，增加功能。</li></ol><pre><code>方法原型 public Object invoke(Object proxy,Method method,Object[] args)参数：Object proxy：jdk创建的代理对象，无需赋值。（proxy：代理）Method method：目标类中的方法，jdk提供method对象Object[] args：目标类中方法的参数，jdk提供的。InvocationHandler 接口：表示你的代理要干什么。怎么用？ 1.创建类实现接口InvocationHandler2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。</code></pre></li><li><p>Method类：表示方法，确切的说就是目标类中的方法。</p><p>作用：通过Method可以执行某个目标类的方法，Method.invoke()</p><p>​    method.invoke(目标对象，方法的参数)</p></li><li><p>Proxy类：核心的对象，创建代理对象。以前创建对象都是new类的构造方法，现在使用Proxy类中的方法，代替new的使用。</p><p>方法：静态方法 newProxyInStance()</p><p>作用：创建代理对象</p><pre><code>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)参数：    1.ClassLoader loader类加载器，负责向内存中加载对象。使用反射获取对象的ClassLoader类a，a.getClass().getClassLoader()，目标对象的类加载器。    2.Class&lt;?&gt;[] interfaces：接口，目标对象实现的接口，也是反射获取的。    3.InvocationHandler h：自己写的，代理类要完成的功能。返回值：就是代理对象。</code></pre></li></ul><p><strong>实现动态代理的步骤：</strong></p><ol><li>创建接口，定义目标类要完成的功能</li><li>创建目标类实现接口</li><li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<ul><li>调用目标方法</li><li>增强功能</li></ul></li><li>使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。</li></ol><h2 id="3、cgLib代理"><a href="#3、cgLib代理" class="headerlink" title="3、cgLib代理"></a>3、cgLib代理</h2><p>CGLIB（Code Beneration Library）是一个开源项目。是一个强大的、高性能、高质量的Code生成类库，它可以在运行期扩展Java类实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP。</p><p>使用JDK的Proxy实现代理，要求目标类与代理类实现相同的接口。若目标类不存在接口，则无法使用该方式实现。</p><p>但对于无接口的类，要为其创建动态代理，就要使用CGLIB来实现。CGLIB代理的生成原理是生成目标类的子类，而子类是增强过的，这个子类对象就是代理对象。所以，使用CGLIB生成动态代理，要求目标类必须能过够被继承，即不能是final的类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1HZ4y1p7F1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 动力节点&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="动态代理" scheme="https://lskjwp.gitee.io/categories/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
    
      <category term="动态代理" scheme="https://lskjwp.gitee.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/cf486ef4/"/>
    <id>https://lskjwp.gitee.io/archives/cf486ef4/</id>
    <published>2020-08-10T10:47:58.000Z</published>
    <updated>2021-11-14T07:16:12.412Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV15k4y167XM" target="_blank" rel="noopener">B站 动力节点</a></p><a id="more"></a><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>ajax是用来做局部刷新的。局部刷新使用的核心对象是 异步对象（XMLHttpRequest）<br> 这个异步对象是存在浏览器内存中的 ，使用javascript语法创建和使用XMLHttpRequest对象。</p><blockquote><p>全局刷新：整个浏览器被新的数据覆盖。在网络中传输大量的数据。 浏览器需要加载，渲染页面。<br>局部刷新：在浏览器器的内部，发起请求，获取数据，改变页面中的部分内容。其余的页面无需加载和渲染 网络中数据传输量少， 给用户的感受好。</p></blockquote><p>AJAX：Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法</p><pre><code>Asynchronous: 异步的意思JavaScript：javascript脚本，在浏览器中执行and : 和xml : 是一种数据格式</code></pre><blockquote><p>ajax是一种做局部刷新的新方法，不是一种语言。 ajax包含的技术主要有javascript,dom,css, xml等等。 核心是javascript 和 xml 。<br>javascript：负责创建异步对象， 发送请求， 更新页面的dom对象。 ajax请求需要服务器端的数据。<br>xml： 网络中的传输的数据格式。 使用json替换了xml 。</p></blockquote><p>AJAX 不单需要前端的技术，同时需要后端（服务器）的配合。服务器需要提供数据，数据是 AJAX 请求的响应结果。</p><h1 id="二、AJAX异步实现步骤"><a href="#二、AJAX异步实现步骤" class="headerlink" title="二、AJAX异步实现步骤"></a>二、AJAX异步实现步骤</h1><p>ajax中使用XMLHttpRequest对象。</p><h2 id="1、创建异步对象"><a href="#1、创建异步对象" class="headerlink" title="1、创建异步对象"></a>1、创建异步对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2、给异步对象绑定事件"><a href="#2、给异步对象绑定事件" class="headerlink" title="2、给异步对象绑定事件"></a>2、给异步对象绑定事件</h2><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。此事件可以指定一个处理函数 function。</p><p><code>onreadystatechange ：</code>当异步对象发起请求，获取了数据都会触发这个事件。这个事件需要指定一个函数， 在函数中处理状态的变化。</p><p>通过判断 XMLHttpReqeust 对象的状态，获取服务端返回的数据。</p><pre class=" language-js"><code class="language-js">xmlHttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    处理请求的状态变化。    <span class="token keyword">if</span><span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status<span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以处理服务器端的数据，更新当前页面</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>异步对象的属性 readyState 表示异步对象请求的状态变化<br>    0：创建异步对象时， new XMLHttpRequest();<br>    1：初始异步请求对象， xmlHttp.open()<br>    2：发送请求， xmlHttp.send()<br>    3：从服务器端获取了数据，此时3， 注意3是异步对象内部使用， 获取了原始的数据。<br>    4：异步对象把接收的数据处理完成后。 此时开发人员在4的时候处理数据。<br>       在4的时候，开发人员做什么 ？  更新当前页面。</p><p>异步对象的status属性，表示网络请求的状况的，  200， 404， 500， 需要是当status==200<br>时，表示网络请求是成功的。</p></blockquote><h2 id="3、初始化异步请求"><a href="#3、初始化异步请求" class="headerlink" title="3、初始化异步请求"></a>3、初始化异步请求</h2><p>异步的方法open()</p><pre class=" language-js"><code class="language-js">xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>请求方式<span class="token keyword">get</span><span class="token operator">|</span>post<span class="token punctuation">,</span> <span class="token string">"服务器端的访问地址"</span><span class="token punctuation">,</span> 同步<span class="token operator">|</span>异步请求（默认是<span class="token boolean">true</span>，异步请求）<span class="token punctuation">)</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">)</span>参数说明：• method：请求的类型；GET 或 POST• url：服务器的 servlet 地址• <span class="token keyword">async</span>：<span class="token boolean">true</span>（异步）或 <span class="token boolean">false</span>（同步）</code></pre><p>例如：</p><pre class=" language-js"><code class="language-js">xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"login?name=admin&amp;pwd=admin"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、使用异步对象发送请求"><a href="#4、使用异步对象发送请求" class="headerlink" title="4、使用异步对象发送请求"></a>4、使用异步对象发送请求</h2><pre class=" language-js"><code class="language-js">xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="5、接收服务器响应的数据"><a href="#5、接收服务器响应的数据" class="headerlink" title="5、接收服务器响应的数据"></a>5、接收服务器响应的数据</h2><p>需获得来自服务器的响应，使用 XMLHttpRequest 对象的 responseText 或responseXML 属性。</p><blockquote><p>responseText：获得字符串形式的响应数据<br>responseXML：获得 XML 形式的响应数据</p></blockquote><p>回调：当请求的状态变化时，异步对象会自动调用<code>onreadystatechange</code>事件对应的函数。</p><h1 id="三、JSON"><a href="#三、JSON" class="headerlink" title="三、JSON"></a>三、JSON</h1><p><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</p><p>JSON分类：</p><ol><li><p>json对象</p><p>JSONObject ,这种对象的格式<code>名称:值</code>， 也可以看做是<code>key:value</code>格式。</p></li><li><p>json数组</p><p>JSONArray, 基本格式<code>[{ name:"河北", jiancheng:"冀","shenghui":"石家庄"} , { name:"山西", jiancheng:"晋","shenghui":"太原"} ]</code></p></li></ol><pre><code>json的优点：    1. json格式好理解    2. json格式数据在多种语言中，比较容易处理。 使用java、javascript读写json格式的数据比较容易。    3. json格式数据他占用的空间下，在网络中传输快， 用户的体验好。</code></pre><blockquote><p>处理json的工具库：</p><p>gson（google）</p><p>fastjson（阿里，速度快，不是最符合json处理规范的）</p><p>jackson（性能好，规范好</p><p>json-lib（性能差，依赖多）</p></blockquote><p>  在js中的，可以把json格式的字符串，转为json对象， json中的key，就是json对象的属性名。</p><h1 id="四、AJAX示例"><a href="#四、AJAX示例" class="headerlink" title="四、AJAX示例"></a>四、AJAX示例</h1><p>根据省份id查询省份信息</p><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p><strong>数据库 db_test</strong></p><p>省份信息表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'省份名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>jiancheng<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'简称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>shenghui<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'河北'</span><span class="token punctuation">,</span> <span class="token string">'冀'</span><span class="token punctuation">,</span> <span class="token string">'石家庄'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'山西'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'太原市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'内蒙古'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">,</span> <span class="token string">'呼和浩特市    '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'辽宁'</span><span class="token punctuation">,</span> <span class="token string">'辽'</span><span class="token punctuation">,</span> <span class="token string">'沈阳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'江苏'</span><span class="token punctuation">,</span> <span class="token string">'苏'</span><span class="token punctuation">,</span> <span class="token string">'南京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'浙江'</span><span class="token punctuation">,</span> <span class="token string">'浙'</span><span class="token punctuation">,</span> <span class="token string">'杭州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'安徽'</span><span class="token punctuation">,</span> <span class="token string">'皖'</span><span class="token punctuation">,</span> <span class="token string">'合肥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'福建'</span><span class="token punctuation">,</span> <span class="token string">'闽'</span><span class="token punctuation">,</span> <span class="token string">'福州'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'江西'</span><span class="token punctuation">,</span> <span class="token string">'赣'</span><span class="token punctuation">,</span> <span class="token string">'南昌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>城市信息表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>provinceid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">17</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'石家庄市'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'秦皇岛'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'保定市'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'张家口'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'南昌市'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'九江市'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'宜春市'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'福州市'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'厦门市'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'泉州市'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'龙岩市'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'太原'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'13'</span><span class="token punctuation">,</span> <span class="token string">'大同'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'呼和浩特'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'15'</span><span class="token punctuation">,</span> <span class="token string">'包头'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'16'</span><span class="token punctuation">,</span> <span class="token string">'呼伦贝尔'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2、搭建环境"><a href="#2、搭建环境" class="headerlink" title="2、搭建环境"></a>2、搭建环境</h2><ol><li><p>新建web application：ajaxweb</p></li><li><p>配置tomact服务器</p></li><li><p>Module添加Tomact支持</p></li><li><p>创建X表单和MLHttpRequest对象</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>省份编号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSearch()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>省份名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>省份简称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>projiancheng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>创建XMLHttpRequest对象：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">doSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> proid <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"proid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建异步请求对象</span>    <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定事件</span>    xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化请求参数</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"s?proid="</span><span class="token operator">+</span>proid<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送请求</span>    xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>创建Servlet处理Ajax请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>controller<span class="token punctuation">;</span></code></pre></li></ol><p>   import javax.servlet.ServletException;<br>   import javax.servlet.http.HttpServlet;<br>   import javax.servlet.http.HttpServletRequest;<br>   import javax.servlet.http.HttpServletResponse;<br>   import java.io.IOException;<br>   import java.io.PrintWriter;</p><p>   public class SearchServlet extends HttpServlet {<br>       @Override<br>       protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br>           String provinceName = “无数据”;<br>           //获取参数proid<br>           String param = req.getParameter(“proid”);<br>           if(“1”.equals(param)){<br>               provinceName = “河北”;<br>           }<br>           resp.setContentType(“text/html;charset=utf-8”);<br>           PrintWriter pw = resp.getWriter();<br>           pw.println(provinceName);<br>           pw.flush();<br>           pw.close();<br>       }</p><pre><code>   @Override   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {       super.doGet(req, resp);   }</code></pre><p>   }</p><pre><code>6. web.xml文件中注册servlet   ```xml   &lt;servlet&gt;       &lt;servlet-name&gt;SearchServlet&lt;/servlet-name&gt;       &lt;servlet-class&gt;com.lskj.controller.SearchServlet&lt;/servlet-class&gt;   &lt;/servlet&gt;   &lt;servlet-mapping&gt;       &lt;servlet-name&gt;SearchServlet&lt;/servlet-name&gt;       &lt;url-pattern&gt;/s&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt;</code></pre><ol start="7"><li><p>运行Tomact进行测试</p></li><li><p>添加mysql驱动</p><ul><li>在WEB-INF目录下创建lib文件，用来存放jar文件，把准备好的mysql驱动拷贝到lib目录下。</li><li>在项目结构中modules-&gt;Dependencies-&gt;JARs or directories-&gt;项目WEB-INF\lib目录，并选中刚添加的依赖</li><li>确认修改，也是在项目结构下的Problems-&gt;点击Fix-&gt;Add “lib” to the artifact-&gt;OK</li></ul></li><li><p>创建ProvinceDao访问数据库</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据id获取名称</span><span class="token keyword">public</span> String <span class="token function">queryProviceNameById</span><span class="token punctuation">(</span>Integer proviceId<span class="token punctuation">)</span><span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db_test"</span><span class="token punctuation">;</span>    String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String pwd <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法返回值</span>    String retName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接</span>        conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数据库操作对象</span>        String sql <span class="token operator">=</span> <span class="token string">"select name from province where id = ?"</span><span class="token punctuation">;</span>        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>proviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行SQL</span>        rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理结果集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            retName <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> retName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>修改之前创建的Servlet</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String provinceName <span class="token operator">=</span> <span class="token string">"无数据"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取参数proid</span>    String param <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"proid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*if("1".equals(param)){            provinceName = "河北";        }*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>param <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        ProvinceDao dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProvinceDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceName <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">queryProviceNameById</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintWriter pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>provinceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>修改index.jsp中的js代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//绑定事件</span>xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//alert(data);</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"proname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>部署项目，访问测试</p></li></ol><h2 id="3、使用json作为数据交换格式"><a href="#3、使用json作为数据交换格式" class="headerlink" title="3、使用json作为数据交换格式"></a>3、使用json作为数据交换格式</h2><p>根据省份id，查询省份的所有数据（数据格式为json）</p><p><strong>实现步骤：</strong></p><ol><li><p>添加处理json的工具库</p><p>jackson：是非常有名的处理 json 的工具库。使用 jackson 可以实现 java 对象到 json 格式字符串的转换，也可以实现 json 字符串转为 json 对象。</p><ul><li>把json的三个工具库jar文件复制到/WEB-INF/lib目录下</li><li>确认修改，在项目结构下的Problems-&gt;点击Fix-&gt;Add “lib” to the artifact-&gt;OK</li></ul></li><li><p>创建实体类Province</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lskj<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Province</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jiancheng<span class="token punctuation">;</span>    <span class="token keyword">private</span> String shenghui<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getJiancheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jiancheng<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJiancheng</span><span class="token punctuation">(</span>String jiancheng<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jiancheng <span class="token operator">=</span> jiancheng<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getShenghui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> shenghui<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShenghui</span><span class="token punctuation">(</span>String shenghui<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>shenghui <span class="token operator">=</span> shenghui<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在ProvinceDao中增加方法，返回对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据id获取一个完整的Province对象</span><span class="token keyword">public</span> Province <span class="token function">queryProviceById</span><span class="token punctuation">(</span>Integer proviceId<span class="token punctuation">)</span><span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db_test"</span><span class="token punctuation">;</span>    String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String pwd <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法返回值</span>    Province province <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接</span>        conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数据库操作对象</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,name,jiancheng,shenghui from province where id = ?"</span><span class="token punctuation">;</span>        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>proviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行SQL</span>        rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理结果集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            province <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Province</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            province<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            province<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            province<span class="token punctuation">.</span><span class="token function">setJiancheng</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jiancheng"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            province<span class="token punctuation">.</span><span class="token function">setShenghui</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"shenghui"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> province<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>创建新的Servlet对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchServletJson</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认值，{}：表示json格式的数据</span>        String json <span class="token operator">=</span> <span class="token string">"{}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求参数，省份id</span>        String strProid <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"proid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断proid有值时，调用dao查询数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> strProid <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> strProid<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            ProvinceDao dao  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProvinceDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Province p  <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">queryProviceById</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strProid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//需要使用jackson 把  Provice对象转为  json</span>            ObjectMapper om  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            json <span class="token operator">=</span>  om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把获取的数据，通过网络传给ajax中的异步对象，响应结果数据</span>        <span class="token comment" spellcheck="true">//指定服务器端（servlet）返回给浏览器的是json格式的数据,json数据使用utf-8编码的</span>        <span class="token comment" spellcheck="true">//response.setContentType("text/json;charset=utf-8");</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter pw  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出数据---会赋给ajax中 responseText属性</span>        pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>创建searchJson.jsp，获取json数据</p><p>页面：</p><pre class=" language-jsp"><code class="language-jsp"><div align="center">    <table>        <tr>            <td>省份编号：</td>            <td><input type="text" id="proid">                <input type="button" value="搜索" onclick="doSearch()">            </td>        </tr>        <tr>            <td>省份名称：</td>            <td><input type="text" id="proname"></td>        </tr>        <tr>            <td>省份简称：</td>            <td><input type="text" id="projiancheng"></td>        </tr>        <tr>            <td>省会名称：</td>            <td><input type="text" id="proshenghui"></td>        </tr>    </table></div></code></pre><p>ajax请求处理：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span>  <span class="token function">doSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建异步对象</span>        <span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.绑定事件</span>        xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//eval是执行括号中的代码， 把json字符串转为json对象</span>                <span class="token keyword">var</span> jsonobj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新dom对象</span>                <span class="token function">callback</span><span class="token punctuation">(</span>jsonobj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.初始异步对象的请求参数</span>        <span class="token keyword">var</span> proid <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"proid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true :异步处理请求。 使用异步对象发起请求后，不用等待数据处理完毕，就可以执行其它的操作。</span>        <span class="token comment" spellcheck="true">// false:同步，异步对象必须处理完成请求，从服务器端获取数据后，才能执行send之后的代码。 任意时刻只能执行一个异步请求。</span>        xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"json?proid="</span><span class="token operator">+</span>proid<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.发送请求</span>        xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义函数，处理服务器端返回的数据</span>    <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"proname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> json<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"projiancheng"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span>json<span class="token punctuation">.</span>jiancheng<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"proshenghui"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span> json<span class="token punctuation">.</span>shenghui<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>web.xml中注册Servlet</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SearchJson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.lskj.controller.SearchServletJson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SearchJson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>部署应用，测试访问</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV15k4y167XM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 动力节点&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ajax" scheme="https://lskjwp.gitee.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="https://lskjwp.gitee.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记</title>
    <link href="https://lskjwp.gitee.io/archives/7fd48667/"/>
    <id>https://lskjwp.gitee.io/archives/7fd48667/</id>
    <published>2020-07-07T14:33:52.000Z</published>
    <updated>2021-11-14T07:16:13.053Z</updated>
    
    <content type="html"><![CDATA[<p>学习视频链接：<a href="https://www.bilibili.com/video/BV1NE411Q7Nx" target="_blank" rel="noopener">B站 遇见狂神说</a></p><a id="more"></a><p>MyBatis是一个支持<strong>普通SQL查询</strong>，<strong>存储过程</strong>和<strong>高级映射</strong>的优秀<strong>持久层框架</strong>。</p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><strong>三层架构：</strong>界面层（User Interface Layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access Layer）</p><p><code>界面层（表示层，视图层）：</code>主要功能是接受用户的数据，显示请求的处理结果。使用 web 页面和<br>用户交互，手机 app 也就是表示层的，用户在 app 中操作，业务逻辑在服务器端处理。</p><p><code>业务逻辑层：</code>接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。</p><p><code>数据访问层：</code>与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交<br>给业务层，同时将业务层处理的数据保存到数据库。</p><p><strong>三层对应的包</strong>：</p><ul><li>界面层：controller包（servlet）</li><li>业务逻辑层：service包（XXXService类）</li><li>数据访问层：dao包（XXXDao类）</li></ul><p><strong>三层对应的处理框架</strong>：</p><ul><li>界面层-&gt;springmvc（框架），servlet</li><li>业务逻辑层-&gt;spring（框架），service类</li><li>数据访问层-&gt;mybatis（框架），dao类</li></ul><p><strong>三层处理请求的交互：</strong></p><p>用户-&gt;视图层-&gt;业务逻辑层-&gt;数据访问层-&gt;数据库</p><p><img src="/archives/7fd48667/image-20201025212720662.png" alt=""></p><p>使用三层架构的优点：</p><ul><li>结构清晰、耦合度低，各层分工明确。</li><li>可维护性高，可扩展性高。</li><li>有利于标椎化。</li><li>开发人员可以只关注整个结构中某一层的功能实现。</li><li>有利于各层逻辑的复用。</li></ul><h2 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1-1、什么是Mybatis"></a>1-1、什么是Mybatis</h2><p>Mybatis是一个优秀的基于java的持久层框架，内部封装了jdbc，开发者只需要关注sql语句本身，而不需要处理加载驱动、创建连接、创建statement、关闭连接，资源等繁杂的过程。</p><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li></ul><p>Mybatis通过xml或注解两种方式将要执行的各种sql语句配置起来，并通过java对象和sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p><p><strong>如何获得Mybatis？</strong></p><ul><li><p>maven仓库</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li><p>GitHub：<a href="https://github.com/mybatis/mybatis-3/releases/" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases/</a></p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h2 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1-2、持久化"></a>1-2、持久化</h2><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：断电即失</li><li>数据库，io文件持久化。</li></ul><h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1-3、持久层"></a>1-3、持久层</h2><p>Dao层、Service层、Controller层……</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显。</li></ul><h2 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1-4、为什么需要Mybatis"></a>1-4、为什么需要Mybatis</h2><ul><li>简单易学</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><h1 id="二、第一个Mybatis程序"><a href="#二、第一个Mybatis程序" class="headerlink" title="二、第一个Mybatis程序"></a>二、第一个Mybatis程序</h1><p>搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p><h2 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2-1、搭建环境"></a>2-1、搭建环境</h2><p>搭建数据库</p><p>新建项目</p><ol><li><p>新建一个普通的maven项目</p></li><li><p>删除src</p></li><li><p>导入maven依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mysql驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mybatis--></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2-2、创建一个模块"></a>2-2、创建一个模块</h2><ul><li><p>编写mybatis的核心配置文件（放在resources目录下，mybatis-config.xml）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!--指定约束文件，限制，检查当前文件中出现的标签、属性必须符合mybatis的要求。--></span><span class="token comment" spellcheck="true">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--default必须和某个environment的id值一样，是为了告诉mybatis使用那个数据库的连接信息，也就是访问那个数据库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--id是一个唯一值，自定义的，表示环境的名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--transactionManager：mybatis的事务类型。type：JDBC（表示使用jdbc中的Connection对象的commit，rollback做事务处理--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--dataSource：表示数据源，连接数据库的。type：表示数据源的类型，POOLED表示使用连接池--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--一下name值是固定的，不能自定义--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>true&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写mybatis工具类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//sqlSessionFactory-->sqlSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用Mybatis第一步：获取sqlSessionFactory对象</span>            <span class="token comment" spellcheck="true">//定义mybatis主配置文件的名称，从类路径的根开始（target/classes）</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取配置文件</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建SqlSessionFactory对象</span>            SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**        * openSession()或openSqlSession(false)：无参数的，获取非自动提交事务的SqlSession对象        * openSession(true)：获取自动提交事务的SqlSession对象        */</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2-3、编写代码"></a>2-3、编写代码</h2><ul><li><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Dao接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口实现类（由原来的的UserDaoImpl转变为一个Mapper配置文件）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace=绑定一个对应的Dao/Mapper接口，要求使用dao/mapper接口的全限定名称--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--select查询语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2-4 测试"></a>2-4 测试</h2><p><strong>junit测试：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一步：获得SQLSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方式一：getMapper</span>    UserDao mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭SqlSession</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SqlSession对象不是线程安全的，需要在方法内部使用。在执行sql语句之前，使用openSession()获取SqlSession对象，在执行完sql语句之后，需要执行SqlSession.close()关闭，这样才能保证它的使用是线程安全的。</p><p><strong>遇到的错误</strong></p><ul><li><p>java.lang.ExceptionInInitializerError</p><ol><li><p>…MalformedByteSequenceException: 1 字节的 UTF-8 序列的字节 1 无效。</p><ul><li>将xml文件中<code>encoding="UTF-8"</code>修改为<code>encoding="GBK"</code></li><li>File-&gt;Settings-&gt;Editor-&gt;File Encodings统一设置编码</li></ul></li><li><p>配置文件未注册，org.apache.ibatis.binding.BindingException</p><p><code>org.apache.ibatis.binding.BindingException: Type interface com.lskj.dao.UserDao is not known to the MapperRegistry.</code></p><p>核心配置文件中注册mappers</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/lskj/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre></li><li><p>（maven资源导出问题）文件找不到/不存在，The error may exist in com/lskj/dao/UserMapper.xml</p><p>   pom.xml文件中配置</p><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--在bulid中配置resources，来防止资源导出失败问题--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>org.apache.ibatis.exceptions.PersistenceException</p><p><code>SSL=true</code>修改为<code>SSL=false</code></p></li><li><p>空指针异常</p><p>没有注册到资源。（例如工具类中<code>sqlSessionFactory</code>的作用域）</p></li></ul><h1 id="三、CRUD"><a href="#三、CRUD" class="headerlink" title="三、CRUD"></a>三、CRUD</h1><h2 id="3-1、namespace"><a href="#3-1、namespace" class="headerlink" title="3-1、namespace"></a>3-1、namespace</h2><p>namespace中的包名要和Dao/mappers接口的包名一致！</p><h2 id="3-2、select"><a href="#3-2、select" class="headerlink" title="3-2、select"></a>3-2、select</h2><p>选择、查询语句。</p><ul><li>id：就是对应的namespace中的方法名；</li><li>resultType：SQL语句执行的返回值；</li><li>parameterType：参数的数据类型。</li></ul><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据ID查询用户</span>User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写对应的mapper中的sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="3-3、增删改"><a href="#3-3、增删改" class="headerlink" title="3-3、增删改"></a>3-3、增删改</h2><p><strong>增删改需要提交事务！</strong></p><ol><li>编写接口：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//insert一个用户</span><span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改用户信息</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除一个用户</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>编写对应的mapper中的sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--parameterType不是强制的，可以不用写，mybatis通过反射机制能够发现接口参数的数据类型，一般也不用写--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id,name,pwd) values (#{id},#{name},#{pwd});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.user set name = #{name},pwd = #{pwd}  where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user where id= #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//增删改需要提交事务</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token string">"654321"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户信息添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提交事务</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"王二"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户数据修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="3-4、map的使用"><a href="#3-4、map的使用" class="headerlink" title="3-4、map的使用"></a>3-4、map的使用</h2><p>如果实体类或数据库中的表、字段或者参数过多，可考虑使用Map。</p><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用map添加一个用户</span><span class="token keyword">int</span> <span class="token function">addUser2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写对应mapper中的sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--对象中的属性，可以直接取出来   传递map的key--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id,name,pwd) values (#{userid},#{username},#{password});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"李好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">addUser2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li><p>Map传递参数直接在SQL中取出key即可。【parameterType=”map”】</p></li><li><p>对象传递参数，直接在SQL中去对象的属性即可。【parameterType=”Object”】</p></li><li><p>只有一个基本类型参数的情况下，可以直接在SQL中取到。</p></li><li><p>多个参数用map，或者注解。</p></li></ul><h2 id="3-5、模糊查询"><a href="#3-5、模糊查询" class="headerlink" title="3-5、模糊查询"></a>3-5、模糊查询</h2><ul><li><p>java代码执行的时候，传递通配符%%</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%李%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在SQL拼接中使用通配符</p><pre class=" language-xml"><code class="language-xml">select * from mybatis.user where name like "%"#{value}"%";</code></pre></li></ul><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserLike</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写对应mapper中的sql语句</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where name like #{value};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%李%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span>userList <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="3-6、-Param"><a href="#3-6、-Param" class="headerlink" title="3-6、@Param"></a>3-6、@Param</h2><p>当mapper（dao）接口方法中存在多个参数时，需要通过名称使用参数。在方法形参前面加上<code>@Param("自定义参数名")</code>，mapper文件使用<code>#{自定义参数名}</code>。</p><p>例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mapper文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id=#{userId} and name=#{userName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="3-7、多个参数，按位置传值"><a href="#3-7、多个参数，按位置传值" class="headerlink" title="3-7、多个参数，按位置传值"></a>3-7、多个参数，按位置传值</h2><p>参数位置从0开始，引用参数语法<code>#{arg位置}</code>，第一个参数是<code>#{arg0}</code>，第二个是<code>#{arg1}</code>。</p><p>mybatis3.3版本和之前版本使用#{0},#{1}方式，从mybatis3.4开始使用#{arg0}方式。</p><p>例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUserByIdOrName</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mapper文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUserByIdOrName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id=#{arg0} or name=#{arg1}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="3-8、-和-的区别"><a href="#3-8、-和-的区别" class="headerlink" title="3-8、#和$的区别"></a>3-8、#和$的区别</h2><p><code>#</code>：占位符，告诉mybaits使用实际的参数值代替。并使用PrepareStatement对象执行sql语句，#{…}代替sql语句的“？”。这样做更安全，更迅速，也是经常使用的。</p><p>例如：</p><pre><code>&lt;select id="getUserById" resultType="com.lskj.pojo.User"&gt;    select * from mybatis.user where id = #{id}&lt;/select&gt;转换为Mybatis的执行：String sql = "select * from mybatis.user where id = ?";PreparedStatement ps = conn.prepareStatement(sql);ps.setInt(1,2);where id = ? 就是where id = #{id}ps.setInt(1,2)，2会替换掉#{id}</code></pre><p><code>$</code>：字符串替换，告诉mybatis使用$包含的“字符串”替换所在位置。使用Statement把sql语句和${}的内容连接起来。主要用在替换表名，列名，不同列排序等操作。</p><pre><code>假设传入的id值为1select * from mybatis.user where id = #{id}#的结果：select * from mybatis.user where id = ?select * from mybatis.user where id = ${id}$的结果：select * from mybatis.user where id = 1</code></pre><p><strong>$替换列名</strong></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> selectUser$<span class="token function">Order</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"colName"</span><span class="token punctuation">)</span> String colName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mapper文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser$Order<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user order by ${colName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>#和$的区别</strong>：</p><ul><li><code>#</code>使用<code>?</code>在sql语句中做占位用的，使用PreparedStatement执行sql，效率高</li><li><code>#</code>能够避免sql注入，更安全</li><li><code>$</code>不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低</li><li><code>$</code>有sql注入的风险，缺乏安全性</li><li><code>$</code>可以替换表名或列名</li></ul><h2 id="3-9、resultType"><a href="#3-9、resultType" class="headerlink" title="3-9、resultType"></a>3-9、resultType</h2><p>resultType是sql映射文件中定义返回值类型，返回值有基本类型，对象类型，List类型，Map类型等。</p><p>执行sql得到ResultSet转换的类型，使用类型的完全限定名或别名。如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。resultType和resultMap，不能同时使用。</p><p>处理方式：</p><ol><li>mybatis执行sql语句，然后mybatis调用类的无参构造方法，创建对象。</li><li>mybatis把ResultSet指定列值赋给同名的属性。</li></ol><pre><code>&lt;select id="getUserById" resultType="com.lskj.pojo.User"&gt;    select id,name,pwd from user&lt;/select&gt;对等的jdbcResultSet rs = executeQuery("select id,name,pwd from user");while(rs.next()){    User user = new User();    user.setId(rs.getInt("id"));    user.setName(rs.getString("name"));    user.setPwd(rs.getString("pwd"));}</code></pre><p><strong>简单类型</strong></p><pre><code>接口方法：int countUser();mapper文件：&lt;select id="countUser" resultType="int"&gt;    select count(*) from user&lt;/select&gt;</code></pre><p><strong>对象类型</strong></p><pre><code>接口方法：User selectUserById(int id);UserVo selectUserVoById(int id);com.lskj.vo.UserVo.javapublic class UserVo {    private int id;    private String name;    public User() {    }    public User(int id, String name) {        this.id = id;        this.name = name;    }    //...}mapper文件：&lt;select id="selctUserById" resultType="com.lskj.pojo.User"&gt;    select * from user where id=#{id}&lt;/select&gt;&lt;select id="selectUserVoById" resultType="com.lskj.vo.UserVo"&gt;    select id,name from user where id=#{id}&lt;/select&gt;</code></pre><p><strong>查询返回Map</strong></p><ul><li>查询返回map类型值时，列名是map的key，列值是map的value</li><li>只能最多返回一行记录。</li></ul><p><strong>resultType的默认原则是同名的列赋值给同名的属性，使用列别名（Java对象的属性名）</strong></p><pre><code>假设有一个实体类MyUser，该实体类中有userid，username,userpwd三个属性。&lt;select id="selctUserById" resultType="com.lskj.pojo.MyUser"&gt;    select id as userid,name as username,pwd as userpwd from user where id=#{id}&lt;/select&gt;</code></pre><h1 id="四、配置解析"><a href="#四、配置解析" class="headerlink" title="四、配置解析"></a>四、配置解析</h1><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">Mybatis中文XMl配置</a></p><h2 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4-1、核心配置文件"></a>4-1、核心配置文件</h2><ul><li><p>mabatis-config.xml</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p><pre><code>configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre></li></ul><h2 id="4-2、环境配置（environments）"><a href="#4-2、环境配置（environments）" class="headerlink" title="4-2、环境配置（environments）"></a>4-2、环境配置（environments）</h2><p>MyBatis 可以配置成适应多种环境</p><p><strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>Mybatis默认的事务管理器是JDBC，连接池：POOLED。</p><h2 id="4-3、属性（properties）"><a href="#4-3、属性（properties）" class="headerlink" title="4-3、属性（properties）"></a>4-3、属性（properties）</h2><p>可以通过properties属性来实现引用配置文件。</p><p>这些属性可以在外部进行配置，也可以进行动态替换。既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p><strong>在XML中，所有的标签都可以规定其顺序。</strong></p><p>1、在resources目录下编写一个配置文件<code>db.properties</code></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>2、在mybatis核心配置文件中引入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入外部配置文件，从类路径跟开始找文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的</li></ul><p>3、使用</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre><h2 id="4-4、类型别名（typeAliases）"><a href="#4-4、类型别名（typeAliases）" class="headerlink" title="4-4、类型别名（typeAliases）"></a>4-4、类型别名（typeAliases）</h2><ul><li>为 Java 类型设置一个缩写名字</li><li>仅用于 XML 配置，意在降低冗余的全限定类名书写</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--可以给实体类写别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAlias</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>也可以指定一个包名，Mybatis会在包名下面搜索需要的Java Bean，例如：</p><p>扫描实体类的包，默认别名就是这个类的<code>类名</code>，<code>首字母小写</code>。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种不可以，如果需要修改，需要在实体上增加注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="4-5、设置（settings）"><a href="#4-5、设置（settings）" class="headerlink" title="4-5、设置（settings）"></a>4-5、设置（settings）</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">settings（设置）</a>是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><h2 id="4-6、其它配置"><a href="#4-6、其它配置" class="headerlink" title="4-6、其它配置"></a>4-6、其它配置</h2><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">plugins（插件）</a><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h2 id="4-7、映射器（mappers）"><a href="#4-7、映射器（mappers）" class="headerlink" title="4-7、映射器（mappers）"></a>4-7、映射器（mappers）</h2><p>MapperRegistry：注册绑定Mapper文件。</p><p><strong>方式一：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/lskj/dao/UserMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p><strong>方式二：使用class文件绑定注册</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下。</li></ul><p><strong>方式三：使用扫描包进行注入绑定。</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下。</li></ul><h2 id="4-8、作用域（Scope）和生命周期"><a href="#4-8、作用域（Scope）和生命周期" class="headerlink" title="4-8、作用域（Scope）和生命周期"></a>4-8、作用域（Scope）和生命周期</h2><p><img src="/archives/7fd48667/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p><p>作用域和生命周期是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>可理解为：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong></li><li>SqlSessionFactory 的最佳作用域是应用作用域</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式</li></ul><p><strong>SqlSession：</strong></p><ul><li>连接到连接池的一个请求</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要关闭，否则资源被占用</li></ul><p><img src="/archives/7fd48667/SqlSessionFactory.png" alt=""></p><p>这里面的每一个Mapper，就代表一个具体的业务。</p><h1 id="五、解决属性名和字段名不一致的问题"><a href="#五、解决属性名和字段名不一致的问题" class="headerlink" title="五、解决属性名和字段名不一致的问题"></a>五、解决属性名和字段名不一致的问题</h1><h2 id="5-1、问题"><a href="#5-1、问题" class="headerlink" title="5-1、问题"></a>5-1、问题</h2><p>数据库中的字段：</p><p><strong>mybatis.user</strong></p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int(20)</td></tr><tr><td align="center">name</td><td align="center">varchar(30)</td></tr><tr><td align="center">pwd</td><td align="center">varchar(30)</td></tr></tbody></table><p>新建一个项目，拷贝之前的，测试实体类字段不一致情况。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试发现<code>password='null'</code></p><pre><code>select * from mabatis.user where id = #{id};//类型处理器select id,name,pwd from mybatis.user where id = #{id};</code></pre><p>解决方法：</p><ul><li><p>起别名</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,name,pwd as password from mybatis.user where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="5-2、resultMap"><a href="#5-2、resultMap" class="headerlink" title="5-2、resultMap"></a>5-2、resultMap</h2><p>resultMap是Mybatis最强大的元素，它可以将查询到的复杂数据（比如查询到几个表中数据）映射到一个结果集当中。</p><p><strong>resultMap和resultType不能一起使用。</strong></p><p>结果集映射</p><pre><code>id    name    pwdid    name    password</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，properties实体类中的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了</li><li><code>ResultMap</code>最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显示地用到他们。</li></ul><h1 id="六、日志"><a href="#六、日志" class="headerlink" title="六、日志"></a>六、日志</h1><h2 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6-1、日志工厂"></a>6-1、日志工厂</h2><p>如果一个数据库操作，出现了异常，需要排错，日志就是最好的助手。</p><table><thead><tr><th align="center">设置名</th><th align="center">描述</th><th align="center">有效值</th><th>默认值</th></tr></thead><tbody><tr><td align="center">logImpl</td><td align="center">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="center">SLF4J/LOG4J/LOG4J2/JDK_LOGGING/<br>COMMONS_LOGGING/<br>STDOUT_LOGGING/NO_LOGGING</td><td>未设置</td></tr></tbody></table><ul><li>SLF4J </li><li><strong>LOG4J</strong> </li><li>LOG4J2 </li><li>JDK_LOGGING </li><li>COMMONS_LOGGING </li><li><strong>STDOUT_LOGGING</strong> </li><li>NO_LOGGING</li></ul><p>在Mybatis中具体使用那一个日志实现，在设置中设定。</p><p><strong>STDOUT_LOGGING标椎日志输出</strong></p><p>在Mybatis核心配置文件中，配置我们的日志。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--标椎的日志工厂的实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h2 id="6-2、LOG4J"><a href="#6-2、LOG4J" class="headerlink" title="6-2、LOG4J"></a>6-2、LOG4J</h2><ul><li><p>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件</p></li><li><p>可以控制每一条日志的输出格式</p></li><li><p>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</p></li><li><p>通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码</p></li></ul><ol><li><p>先导入log4j的包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>log4j.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token comment" spellcheck="true">#log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%5p [%t] - %m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/lskj.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre></li><li><p>配置log4j为日志实现</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>log4j的使用，直接测试运行查询。</p></li></ol><p><strong>简单使用</strong></p><ol><li><p>在要使用Log4j的类中，导入包import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserMapperTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>日志级别</p><pre class=" language-java"><code class="language-java">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:进入了testLog4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h1 id="七、分页"><a href="#七、分页" class="headerlink" title="七、分页"></a>七、分页</h1><ul><li>减少数据的处理量</li></ul><h2 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7-1、使用Limit分页"></a>7-1、使用Limit分页</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#语法：select * from user limit startIndex,pageSize;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">limit</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#[0,n]</span></code></pre><p>使用Mybatis实现分页，核心SQL</p><ol><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--分页--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user limit #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7-2、RowBounds分页"></a>7-2、RowBounds分页</h2><p>不再使用SQL实现分页</p><ol><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//RowBounds实现</span>    RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过java代码层面实现分页</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.lskj.dao.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7-3、分页插件"></a>7-3、分页插件</h2><p><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">Mybatis 分页插件 PageHelper</a></p><p>1、导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--PageHelper依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grounpId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grounpId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、加入plugin配置。<strong>在<code>&lt;environments&gt;</code>之前加入</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    &lt;plugin interceptor="com.github.pagehelper.PageInterceptor"/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>3、PageHelper对象</p><p>查询语句之前调用<code>PageHelper.startPage</code>静态方法。</p><p>除了<code>PageHelper.startPage</code>方法外，还提供了类似用法的<code>PageHelper.offsetPage</code>方法。</p><p>在你需要进行分页的Mybatis查询方法前调用<code>PageHelper.startPage</code>静态方法即可，紧跟在这个方法后的第一个Mybatis查询方法会被进行分页。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取第1页，3条内容</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="八、使用注解开发"><a href="#八、使用注解开发" class="headerlink" title="八、使用注解开发"></a>八、使用注解开发</h1><h2 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8-1、面向接口编程"></a>8-1、面向接口编程</h2><p><strong>根本原因：解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好。</strong></p><p><strong>关于接口的理解</strong></p><ul><li>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</li><li>接口的本身反映了系统设计人员对系统的抽象理解。</li><li>接口应有两类：<ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体（abstract class）</li><li>第二类是对一个个体某方面的抽象，即形成一个抽象面（interface）</li></ul></li><li>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</li></ul><p><strong>三个面向区别</strong></p><ul><li>面向对象是指，考虑问题时，以对象为单位，考虑它的属性及方法。</li><li>面向过程是指，考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的体现。</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构。</li></ul><h2 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8-2、使用注解开发"></a>8-2、使用注解开发</h2><ol><li><p>注解在接口上实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>需要在核心配置文件中绑定接口</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--绑定接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>本质：反射机制实现</p><p>底层：动态代理</p><p><img src="/archives/7fd48667/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt=""></p><p><strong>Mybatis详细的执行流程</strong></p><p><img src="/archives/7fd48667/Mybatis%E8%AF%A6%E7%BB%86%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="Mybatis详细的执行流程"></p><h2 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8-3、CRUD"></a>8-3、CRUD</h2><p>可以在工具类创建的时候实现自动提交事务。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>编写接口，增加注解</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法存在多个参数时，所有的参数前面必须加上@Param注解</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>    User <span class="token function">getUserByID</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(id,name,pwd) values (#{id},#{name},#{password})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set name=#{name},pwd=#{password} where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #{uid}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--绑定接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lskj.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>【必须要将接口注册绑定到核心配置文件中】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//底层使用反射机制</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//底层使用反射机制</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User userByID <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByID</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userByID<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//底层使用反射机制</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"七七"</span><span class="token punctuation">,</span><span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//底层使用反射机制</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"七七"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//底层使用反射机制</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型，可以忽略，但建议加上</li><li>在SQL中引用的是@Param()中设定的属性名</li></ul><p><strong>#{}   ${}区别</strong></p><p>#{}：采用预编译方式,可以防止SQL注入<br>${}：采用直接赋值方式,无法阻止SQL注入攻击</p><h1 id="九、Lombok"><a href="#九、Lombok" class="headerlink" title="九、Lombok"></a>九、Lombok</h1><p>​    Lombok是一款Java开发插件，使得Java开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码，尤其对于简单的Java模型对象（POJO）。在开发环境中使用Lombok插件后，Java开发人员可以节省出重复构建，诸如hashCode和equals这样的方法以及各种业务对象模型的accessor和ToString等方法的大量时间。对于这些方法，它能够在编译源代码期间自动帮我们生成这些方法，并没有如反射那样降低程序的性能。</p><p><strong>使用步骤：</strong></p><ol><li><p>在IDEA中安装Lombok插件。</p></li><li><p>在项目中导入lombok的jar包。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>在实体类上加注解即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p><strong>说明：</strong></p><pre><code>@Data：无参构造、get、set、toString、hashcode、equals@AllArgsConstructor@NoArgsConstructor@Tostring @EqualsAndHashcode@Getter@Setter</code></pre><p><strong>Lombok的优缺点</strong><br><strong>优点：</strong><br>1.能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率<br>2.让代码变得简洁，不用过多的去关注相应的方法<br>3.属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</p><p><strong>缺点：</strong><br>1.不支持多种参数构造器的重载<br>2.虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</p><h1 id="十、多对一"><a href="#十、多对一" class="headerlink" title="十、多对一"></a>十、多对一</h1><p>SQL：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span><span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'秦老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">KEY</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fktid<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>teacher<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'小张'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>tid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'小王'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="10-1、测试环境搭建"><a href="#10-1、测试环境搭建" class="headerlink" title="10-1、测试环境搭建"></a>10-1、测试环境搭建</h2><ol><li>导入Lombok</li><li>新建实体类Teacher、Student</li><li>建立Mapper接口</li><li>建立Mapper.xml文件</li><li>在核心配置文件中绑定注册Mapper接口或文件。</li><li>测试查询是否能够成功。</li></ol><h2 id="10-2、按照查询嵌套处理"><a href="#10-2、按照查询嵌套处理" class="headerlink" title="10-2、按照查询嵌套处理"></a>10-2、按照查询嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    1.查询所有的学生信息    2.根据查询出来的学生的tid，寻找对应的老师    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--复杂的属性，需要单独处理            对象：association            集合：collection        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from teacher where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="10-3、按照结果嵌套处理"><a href="#10-3、按照结果嵌套处理" class="headerlink" title="10-3、按照结果嵌套处理"></a>10-3、按照结果嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按照结果嵌套处理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname    from student s,teacher t    where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>MySql多对一查询方式：</p><ul><li>子查询</li><li>联表查询</li></ul><h1 id="十一、一对多"><a href="#十一、一对多" class="headerlink" title="十一、一对多"></a>十一、一对多</h1><h2 id="11-1、环境搭建"><a href="#11-1、环境搭建" class="headerlink" title="11-1、环境搭建"></a>11-1、环境搭建</h2><p><strong>实体类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一个老师有多个学生</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="11-2、按照结果嵌套处理"><a href="#11-2、按照结果嵌套处理" class="headerlink" title="11-2、按照结果嵌套处理"></a>11-2、按照结果嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按结果嵌套查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname,t.id tid    from student s,teacher t    where s.tid = t.id and t.id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--复杂的属性，需要单独处理            对象：association            集合：collection            javaType="" 指定属性的类型            集合中的泛型信息：使用ofType获取        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h2 id="11-3、按照查询嵌套处理"><a href="#11-3、按照查询嵌套处理" class="headerlink" title="11-3、按照查询嵌套处理"></a>11-3、按照查询嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.student where tid = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>关联-association    【多对一】</p><p>集合-collection    【一对多】</p><p>JavaType &amp; ofType</p><ul><li>JavaType用来指定实体类中属性的类型</li><li>ofType用来指定映射到List或者集合中的pojo类型，泛型中的约束类型。</li></ul><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><h1 id="十二、动态SQL"><a href="#十二、动态SQL" class="headerlink" title="十二、动态SQL"></a>十二、动态SQL</h1><p><strong>动态SQL就是指根据不同的条件生成不同的SQL语句。</strong></p><h2 id="12-1、搭建环境"><a href="#12-1、搭建环境" class="headerlink" title="12-1、搭建环境"></a>12-1、搭建环境</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>ctreate_time<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写实体类对应的Mapper接口和Mapper.xml文件</p></li></ol><h2 id="12-2、if"><a href="#12-2、if" class="headerlink" title="12-2、if"></a>12-2、if</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog where 1 = 1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="12-3、choose-when-otherwise"><a href="#12-3、choose-when-otherwise" class="headerlink" title="12-3、choose (when, otherwise)"></a>12-3、choose (when, otherwise)</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #{title}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                author = #{author}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                and views = #{views}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="12-4、trim-where-set"><a href="#12-4、trim-where-set" class="headerlink" title="12-4、trim (where, set)"></a>12-4、trim (where, set)</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title = #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #{title},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author = #{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p><strong>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码。</strong></p><h2 id="12-5、SQL片段"><a href="#12-5、SQL片段" class="headerlink" title="12-5、SQL片段"></a>12-5、SQL片段</h2><p>有的时候，可能会将一些功能的部分抽取出来，方便复用。</p><ol><li><p>使用SQL标签抽取公共的部分</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre></li><li><p>在需要使用的地方使用include标签引用即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIf<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><p>注意事项：</p><ul><li>最好基于表单来定义SQL片段</li><li>不要存在where标签</li></ul><h2 id="12-6、foreach"><a href="#12-6、foreach" class="headerlink" title="12-6、foreach"></a>12-6、foreach</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    collection：表示接口中的方法参数的类型，如果是数组使用array，如果是list集合使用list    item：自定义的，表示数组和集合成员的变量    open：循环开始时的字符    close：循环结束时的字符    separator：集合成员之间的分隔符--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeachOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeachTwo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{blog.id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>动态SQL就是在拼接SQL语句，只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了。</strong></p><h1 id="十三、缓存"><a href="#十三、缓存" class="headerlink" title="十三、缓存"></a>十三、缓存</h1><h2 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13-1、简介"></a>13-1、简介</h2><ol><li><p>什么是缓存（cache）？</p><ul><li>存放内存中的临时数据</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用直接从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><p>减少和数据库的交互次数，减少系统开销，提高系统效率。</p></li><li><p>什么样的数据能使用缓存？</p><p>经常查询并且不经常改变的数据。</p></li></ol><h2 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13-2、Mybatis缓存"></a>13-2、Mybatis缓存</h2><ul><li>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大地提升查询效率。</li><li>Mybatis系统中默认定义了两级缓存：一级缓存和二级缓存。<ul><li>默认情况下，只有<code>一级缓存开启</code>。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存。</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache。可以通过实现Cache接口来自定义二级缓存。</li></ul></li></ul><h2 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13-3、一级缓存"></a>13-3、一级缓存</h2><p>一级缓存也叫本地缓存：</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库。</li></ul><p>测试步骤：</p><ol><li>开启日志</li><li>测试在一个Session中查询两次相同记录</li><li>查看输出日志</li></ol><p>缓存失效的情况：</p><ol><li><p>查询不同的记录；</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存；</p></li><li><p>查询不同的Mapper.xml；</p></li><li><p>手动清理缓存。</p><pre class=" language-xml"><code class="language-xml">sqlSession.clearCache(); //手动清理缓存</code></pre></li></ol><h2 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13-4、二级缓存"></a>13-4、二级缓存</h2><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中。</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--显示地开启全局缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre><p>也可以自定义参数</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>       <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>测试</p><ul><li><p>需要将实体类序列化</p><pre><code>Cause: java.io.NotSerializableException: com.lskj.pojo.User</code></pre></li></ul></li></ol><ul><li>只要开启了二级缓存，在同一个Mapper下就有效；</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当回话提交，或者关闭的时候，才会提交到二级缓存中。</li></ul><h2 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13-5、缓存原理"></a>13-5、缓存原理</h2><p><img src="/archives/7fd48667/%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.png" alt="缓存原理"></p><h2 id="13-6、自定义缓存-encache"><a href="#13-6、自定义缓存-encache" class="headerlink" title="13-6、自定义缓存-encache"></a>13-6、自定义缓存-encache</h2><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存。</p><p>要在程序中使用encache，先要导包。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在mapper中指定使用ehcache缓存实现。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>ehcache.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        diskStore：为终存路径，ehcache分为内存和磁盘两线，此属性定义然盘的级存位置。参数解释如下：        user.home-用户主日录        user.dir-用户当前工作目录        java.io.tmpdir-就认临时文件路径    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tmpdir/Tmp_EhCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1880<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>259200<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>       <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloud_user<span class="token punctuation">"</span></span>       <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>       <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>       <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>       <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>       <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>       <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>       <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><p>Redis数据库来做缓存。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习视频链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1NE411Q7Nx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站 遇见狂神说&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://lskjwp.gitee.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://lskjwp.gitee.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>开发工具IDEA、Eclipse常用快捷键</title>
    <link href="https://lskjwp.gitee.io/archives/b66044aa/"/>
    <id>https://lskjwp.gitee.io/archives/b66044aa/</id>
    <published>2020-07-04T10:25:48.000Z</published>
    <updated>2021-11-14T07:16:13.867Z</updated>
    
    <content type="html"><![CDATA[<p>使用开发工具IDEA、Eclipse时，常用的快捷键。</p><a id="more"></a><h1 id="一、IDEA快捷键"><a href="#一、IDEA快捷键" class="headerlink" title="一、IDEA快捷键"></a>一、IDEA快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Ctrl+D</td><td align="center">复制光标所在的行</td></tr><tr><td align="center">Ctrl+Y</td><td align="center">删除光标所在的行</td></tr><tr><td align="center">Ctrl+N</td><td align="center">搜索类</td></tr><tr><td align="center">Ctrl+Shift+N</td><td align="center">搜索文件</td></tr><tr><td align="center">Ctrl+Alt+空格</td><td align="center">代码提示（类似于Alt+/）</td></tr><tr><td align="center">Alt+F7</td><td align="center">查询在某处的使用</td></tr><tr><td align="center">Ctrl+Q</td><td align="center">查看代码提示及内容</td></tr><tr><td align="center">Ctrl+B</td><td align="center">查看类声明</td></tr><tr><td align="center">Ctrl+F12</td><td align="center">查看文件列表</td></tr><tr><td align="center">Shift+F6</td><td align="center">重命名</td></tr><tr><td align="center">Ctrl+Alt+T</td><td align="center">选中某一段代码进行try catch</td></tr><tr><td align="center">Ctrl+Shift+空格</td><td align="center">新建类时，在new后面使用（提示自动创建类）</td></tr><tr><td align="center">Ctrl+Alt+B</td><td align="center">查看接口或抽象类的子类</td></tr><tr><td align="center">Ctrl+W</td><td align="center">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td align="center">Ctrl + Shift + W</td><td align="center">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td align="center">Ctrl+[</td><td align="center">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="center">Ctrl+]</td><td align="center">移动光标到当前所在代码的花括号结束位置</td></tr><tr><td align="center">Ctrl + End</td><td align="center">跳到文件尾</td></tr><tr><td align="center">Ctrl + Home</td><td align="center">跳到文件头</td></tr><tr><td align="center">Ctrl + Delete</td><td align="center">删除光标后面的单词或是中文句</td></tr><tr><td align="center">Ctrl + BackSpace</td><td align="center">删除光标前面的单词或是中文句</td></tr><tr><td align="center">Alt + Enter</td><td align="center">根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td align="center">Alt + Insert</td><td align="center">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td align="center">Alt + ←或→</td><td align="center">左右切换当前已打开的文件视图</td></tr><tr><td align="center">Alt+↑或↓</td><td align="center">当前光标跳转到当前文件的前/后一个方法名位置</td></tr><tr><td align="center">Shift + End</td><td align="center">选中光标到当前行尾位置</td></tr><tr><td align="center">Shift + Home</td><td align="center">选中光标到当前行头位置</td></tr><tr><td align="center">Shift + Enter</td><td align="center">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="center">Shift + 鼠标滚轮前后滚动</td><td align="center">当前文件的横向滚动轴滚动</td></tr><tr><td align="center">Ctrl + Alt + L</td><td align="center">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td align="center">Ctrl + Alt + O</td><td align="center">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td align="center">Ctrl + Alt +←或→</td><td align="center">退回/前进到上一个操作的地方</td></tr><tr><td align="center">Ctrl + Shift + Enter</td><td align="center">自动结束代码，行末自动添加分号</td></tr><tr><td align="center">Ctrl + Shift + R</td><td align="center">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td align="center">Ctrl+F</td><td align="center">查找文本</td></tr><tr><td align="center">Ctrl+R</td><td align="center">替换文本</td></tr><tr><td align="center">Ctrl + Shift + U</td><td align="center">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td align="center">Ctrl + Shift + C</td><td align="center">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="center">F2 或Shift+F2</td><td align="center">高亮错误或警告快速定位</td></tr></tbody></table><h2 id="1-1、全局搜索"><a href="#1-1、全局搜索" class="headerlink" title="1-1、全局搜索"></a>1-1、全局搜索</h2><p>1、Ctrl+N：按名字搜索类，相当于eclipse的ctrl+shift+R，输入类名可以定位到这个类文件。</p><p>相当于eclipse的ctrl+shift+R，输入类名可以定位到这个类文件</p><p>2、Ctrl+Shift+N：按文件名搜索文件。同搜索类类似，只不过可以匹配所有类型的文件了。</p><p>同搜索类类似，只不过可以匹配所有类型的文件了。</p><p>3、Ctrl+H：查看类的继承关系。</p><p>4、Ctrl+Alt+B：查看子类方法实现。</p><p>Ctrl+B可以查看父类或父方法定义，但是不如ctrl+鼠标左键方便。但是在这里，Ctrl+B或ctrl+鼠标左键只能看见Map接口的抽象方法put的定义，不是我们想要的，这时候Ctrl+Alt+B就可以查看HashMap的put方法。</p><p>5、Alt+F7：查找类或方法在哪被使用。相当于eclipse的ctrl+shif+H,但是速度快得多。</p><p>相当于eclipse的ctrl+shif+H,但是速度快得多。</p><p>6、Ctrl+F/Ctrl+Shift+F：按照文本的内容查找。相当于eclipse的ctrl+H，速度优势更加明显。其中Ctrl+F是在本页查找，Ctrl+Shift+F是全局查找。</p><p>相当于eclipse的ctrl+H，速度优势更加明显。其中Ctrl+F是在本页查找，Ctrl+Shift+F是全局查找。</p><p>7、Shift+Shift搜索任何东西。</p><p>8、 ctrl + alt +B   或者   Ctrl+Alt+鼠标左键：查看接口的实现类。</p><h1 id="二、Eclipse快捷键"><a href="#二、Eclipse快捷键" class="headerlink" title="二、Eclipse快捷键"></a>二、Eclipse快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Alt+带下划线字母</td><td align="center">在对话框中进行快捷的操作</td></tr><tr><td align="center">Ctrl+M</td><td align="center">窗口最大化/还原</td></tr><tr><td align="center">Alt+Enter</td><td align="center">打开被选择的工程、包、文件等的属性窗口</td></tr><tr><td align="center">Ctrl+N</td><td align="center">新疆一个工程、文件、文件夹等内容</td></tr><tr><td align="center">Ctrl+F11</td><td align="center">运行程序</td></tr><tr><td align="center">F11</td><td align="center">以调试模式运行程序</td></tr><tr><td align="center">Alt+Shfit+R</td><td align="center">重命名工程名、文件名、方法名、变量名</td></tr><tr><td align="center">F2</td><td align="center">重命名工程名、文件名</td></tr><tr><td align="center">Ctrl+E</td><td align="center">打开编辑窗口查看目录</td></tr><tr><td align="center">Ctrl+Page Up</td><td align="center">切换到当前编辑窗口的上一个窗口</td></tr><tr><td align="center">Ctrl+Page Down</td><td align="center">切换到当前窗口的下一个窗口</td></tr></tbody></table><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Ctrl+Alt+↓</td><td align="center">向下复制光标所在行内容或选中内容</td></tr><tr><td align="center">Ctrl+Alt+↑</td><td align="center">向上复制光标所在行内容或选中内容</td></tr><tr><td align="center">Ctrl+D</td><td align="center">删除选中行或光标所在行</td></tr><tr><td align="center">Alt+↓</td><td align="center">向下移动光标所在行内容或选中内容</td></tr><tr><td align="center">Alt+↑</td><td align="center">向上移动光标所在行内容或选中内容</td></tr><tr><td align="center">Shift+Enter</td><td align="center">在光标所在行下添加一个空行</td></tr><tr><td align="center">Ctrl+1</td><td align="center">给出解决方案</td></tr><tr><td align="center">Alt+？</td><td align="center">显示自动提示功能</td></tr><tr><td align="center">Alt+Shift+Z</td><td align="center">生成try-catch等（Surrount With）</td></tr><tr><td align="center">Alt+Shift+S</td><td align="center">弹出Source菜单</td></tr><tr><td align="center">带下划线字母或数字</td><td align="center">在选择菜单项时的快捷操作</td></tr><tr><td align="center">Alt+Shift+L</td><td align="center">将选中内容抽取为变量</td></tr><tr><td align="center">Alt+Shift+M</td><td align="center">将选中内容抽取为方法</td></tr><tr><td align="center">Ctrl+Shift+F</td><td align="center">格式化代码</td></tr></tbody></table><p><strong>打印某方法的输出结果：</strong></p><p>（1）选中这个方法</p><p>（2）Alt+？，弹出帮助信息</p><p>（3）按向上键，即选到帮助的最后一条（使用System.out.println将其括起来）</p><p><strong>将局部变量转变为成员变量：</strong></p><p>​        在要转变的局部变量上使用Ctrl+1，在弹出的菜单中选择Convert local variable to field，将局部变量转换为成员变量。</p><p><strong>快速选择（Windows快捷键）：</strong></p><p>Ctrl+Shift+←或→：快速选择一个单词</p><p>Shift+Home或End：从光标当前位置，快速选择到行首或行尾</p><p>Shift+向上或向下箭头：从光标当前位置，快速选择到上一行或下一行</p><p><strong>查看源码常用快捷键：</strong></p><p>Ctrl+T：查看类的继承结构</p><p>Ctrl+O：查看类的结构</p><p>Ctrl+Shift+T：打开查看类窗口</p><p>F3：转到定义。将光标放在类或接口或方法上，查看其定义，或按住Ctrl，单击该类或接口</p><p>Alt+←：返回上一次光标停留位置，即使在不同文件中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用开发工具IDEA、Eclipse时，常用的快捷键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://lskjwp.gitee.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA" scheme="https://lskjwp.gitee.io/tags/IDEA/"/>
    
      <category term="Eclipse" scheme="https://lskjwp.gitee.io/tags/Eclipse/"/>
    
  </entry>
  
</feed>
